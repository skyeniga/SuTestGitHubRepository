
#pragma warning disable 162

namespace SBA.ETRANObligation.Logic
{

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notificationsResponse__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound.notificationsResponse _schema = new SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound.notificationsResponse();

        public __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notificationsResponse__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound.notificationsResponse)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notificationsResponse__)
        },
        0,
        @"http://soap.sforce.com/2005/09/outbound#notificationsResponse"
    )]
    [System.SerializableAttribute]
    sealed internal class SFNotificationAckMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notificationsResponse__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notificationsResponse__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SFNotificationAckMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notifications__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound.notifications _schema = new SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound.notifications();

        public __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notifications__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound.notifications)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notifications__)
        },
        0,
        @"http://soap.sforce.com/2005/09/outbound#notifications"
    )]
    [System.SerializableAttribute]
    sealed internal class SFNotificationFullMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notifications__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationService_soap_sforce_com_2005_09_outbound_notifications__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SFNotificationFullMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3CFCInvocationException__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3CFCInvocationException _schema = new SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3CFCInvocationException();

        public __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3CFCInvocationException__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3CFCInvocationException)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3CFCInvocationException__)
        },
        0,
        @"http://ws.elend#CFCInvocationException"
    )]
    [System.SerializableAttribute]
    sealed internal class ETranFaultMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3CFCInvocationException__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3CFCInvocationException__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ETranFaultMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __BTS_soap_envelope_1__2_Fault__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static BTS.soap_envelope_1__2.Fault _schema = new BTS.soap_envelope_1__2.Fault();

        public __BTS_soap_envelope_1__2_Fault__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(BTS.soap_envelope_1__2.Fault)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__BTS_soap_envelope_1__2_Fault__)
        },
        0,
        @"http://www.w3.org/2003/05/soap-envelope#Fault"
    )]
    [System.SerializableAttribute]
    sealed internal class Fault1_2MsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __BTS_soap_envelope_1__2_Fault__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __BTS_soap_envelope_1__2_Fault__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public Fault1_2MsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __BTS_soap_envelope_1__1_Fault__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static BTS.soap_envelope_1__1.Fault _schema = new BTS.soap_envelope_1__1.Fault();

        public __BTS_soap_envelope_1__1_Fault__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(BTS.soap_envelope_1__1.Fault)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__BTS_soap_envelope_1__1_Fault__)
        },
        0,
        @"http://schemas.xmlsoap.org/soap/envelope/#Fault"
    )]
    [System.SerializableAttribute]
    sealed internal class Fault1_1MsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __BTS_soap_envelope_1__1_Fault__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __BTS_soap_envelope_1__1_Fault__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public Fault1_1MsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Request _schema = new SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Request();

        public __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Request__)
        },
        0,
        @"http://ws.elend#Originate3"
    )]
    [System.SerializableAttribute]
    sealed internal class ETRANOriginateRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ETRANOriginateRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_5_0_orig__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_5_0_orig _schema = new SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_5_0_orig();

        public __SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_5_0_orig__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_5_0_orig)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_5_0_orig__)
        },
        0,
        @"SBA_ETran"
    )]
    [System.SerializableAttribute]
    sealed internal class ETRANOriginateAppType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_5_0_orig__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_5_0_orig__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ETRANOriginateAppType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Response _schema = new SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Response();

        public __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Response__)
        },
        0,
        @"http://ws.elend#Originate3Response"
    )]
    [System.SerializableAttribute]
    sealed internal class ETRANOriginateResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_ETRAN_SBAETranOriginate3Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ETRANOriginateResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_SaveRequest__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save.SaveRequest _schema = new SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save.SaveRequest();

        public __SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_SaveRequest__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save.SaveRequest)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_SaveRequest__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/Definition/Salesforce/Loan__c/Save/#SaveRequest"
    )]
    [System.SerializableAttribute]
    sealed internal class SFLoanUpdateRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_SaveRequest__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_SaveRequest__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SFLoanUpdateRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_results__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save.results _schema = new SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save.results();

        public __SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_results__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save.results)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_results__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/Definition/Salesforce/Loan__c/Save/#results"
    )]
    [System.SerializableAttribute]
    sealed internal class SFLoanUpdateResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_results__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Salesforce_Loan__c_Loan__c_Save_results__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SFLoanUpdateResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_Response_orig__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig _schema = new SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig();

        public __SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_Response_orig__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_Response_orig__)
        },
        0,
        @"http://ws.elend#SBA_Etran_Response"
    )]
    [System.SerializableAttribute]
    sealed internal class ETRANActualResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_Response_orig__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_ETRAN_SBA_ETran_Response_orig__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ETRANActualResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationSingle__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationSingle _schema = new SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationSingle();

        public __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationSingle__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationSingle)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationSingle__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/Salesforce/NotificationSingle/#Notification"
    )]
    [System.SerializableAttribute]
    sealed internal class SFNotificationSingleMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationSingle__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Salesforce_Notification_NotificationSingle__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SFNotificationSingleMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Canonical_ETRANObligationCanonical__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical _schema = new SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical();

        public __SBA_ETRANObligation_Definition_Canonical_ETRANObligationCanonical__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Canonical_ETRANObligationCanonical__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/Canonical/#Canonical"
    )]
    [System.SerializableAttribute]
    sealed internal class CanonicalMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Canonical_ETRANObligationCanonical__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Canonical_ETRANObligationCanonical__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public CanonicalMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_ETRAN_Originate_ETRANOriginateAppDefaults__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.ETRAN_Originate.ETRANOriginateAppDefaults _schema = new SBA.ETRANObligation.Definition.ETRAN_Originate.ETRANOriginateAppDefaults();

        public __SBA_ETRANObligation_Definition_ETRAN_Originate_ETRANOriginateAppDefaults__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.ETRAN_Originate.ETRANOriginateAppDefaults)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_ETRAN_Originate_ETRANOriginateAppDefaults__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/ETRANOriginate/ETRANOriginateAppDefaults/#ETRAN_Originate_App_Defaults"
    )]
    [System.SerializableAttribute]
    sealed internal class ETRANOriginateAppDefaultsType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_ETRAN_Originate_ETRANOriginateAppDefaults__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_ETRAN_Originate_ETRANOriginateAppDefaults__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ETRANOriginateAppDefaultsType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRAN_Shared_Definition_ETranCredentials__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRAN.Shared.Definition.ETranCredentials _schema = new SBA.ETRAN.Shared.Definition.ETranCredentials();

        public __SBA_ETRAN_Shared_Definition_ETranCredentials__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRAN.Shared.Definition.ETranCredentials)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRAN_Shared_Definition_ETranCredentials__)
        },
        0,
        @"http://SBA.gov/ETranShared/ETranCredentials/#ETranCredentials"
    )]
    [System.SerializableAttribute]
    sealed internal class ETranCredentialsMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRAN_Shared_Definition_ETranCredentials__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRAN_Shared_Definition_ETranCredentials__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ETranCredentialsMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Rules_ETranObligationTransport__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Rules.ETranObligationTransport _schema = new SBA.ETRANObligation.Definition.Rules.ETranObligationTransport();

        public __SBA_ETRANObligation_Definition_Rules_ETranObligationTransport__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Rules.ETranObligationTransport)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Rules_ETranObligationTransport__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/Definition/Rules/ETranObligationTransport/#ETranObligationTransport"
    )]
    [System.SerializableAttribute]
    sealed internal class ETranObligationTransportMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Rules_ETranObligationTransport__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Rules_ETranObligationTransport__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ETranObligationTransportMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query.Request _schema = new SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query.Request();

        public __SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_Request__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SFMultiQueryRequestMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SFMultiQueryRequestMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_QueryResult__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query.QueryResult _schema = new SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query.QueryResult();

        public __SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_QueryResult__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query.QueryResult)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_QueryResult__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/#QueryResult"
    )]
    [System.SerializableAttribute]
    sealed internal class SFMultiQueryResultMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_QueryResult__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Salesforce_Multi_Salesforce_Multi_Query_QueryResult__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SFMultiQueryResultMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_ETRANObligation_Definition_Rules_LegalOrgTypeMapping__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping _schema = new SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping();

        public __SBA_ETRANObligation_Definition_Rules_LegalOrgTypeMapping__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_ETRANObligation_Definition_Rules_LegalOrgTypeMapping__)
        },
        0,
        @"http://SBA.gov/ETRANObligation/Definition/Rules/LegalOrgTypeMapping/#LegalOrgTypeMapping"
    )]
    [System.SerializableAttribute]
    sealed internal class LegalOrgTypeMsgType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_ETRANObligation_Definition_Rules_LegalOrgTypeMapping__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_ETRANObligation_Definition_Rules_LegalOrgTypeMapping__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public LegalOrgTypeMsgType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Notify",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Logic.SFNotificationFullMsgType), 
            typeof(SBA.ETRANObligation.Logic.SFNotificationAckMsgType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class SFNotificationFullPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public SFNotificationFullPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public SFNotificationFullPortType(SFNotificationFullPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            SFNotificationFullPortType p = new SFNotificationFullPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Notify = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Notify",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(SFNotificationFullPortType),
            typeof(SFNotificationFullMsgType),
            typeof(SFNotificationAckMsgType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Notify" ] = Notify;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Originate3",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Logic.ETRANOriginateRequestType), 
            typeof(SBA.ETRANObligation.Logic.ETRANActualResponseType), 
            typeof(SBA.ETRANObligation.Logic.ETranFaultMsgType), 
            typeof(SBA.ETRANObligation.Logic.Fault1_1MsgType), 
            typeof(SBA.ETRANObligation.Logic.Fault1_2MsgType)
        },
        new string[]{
            "CVCInvocationException", 
            "Fault_1_1", 
            "Fault_1_2"
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class ETRANOriginatePortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public ETRANOriginatePortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public ETRANOriginatePortType(ETRANOriginatePortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            ETRANOriginatePortType p = new ETRANOriginatePortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Originate3 = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Originate3",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(ETRANOriginatePortType),
            typeof(ETRANOriginateRequestType),
            typeof(ETRANActualResponseType),
            new System.Type[]{
                typeof(ETranFaultMsgType),
                typeof(Fault1_1MsgType),
                typeof(Fault1_2MsgType)
            },
            new string[]{
                "CVCInvocationException",
                "Fault_1_1",
                "Fault_1_2"
            }
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Originate3" ] = Originate3;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "NotifySingle",
        new System.Type[]{
            typeof(SBA.ETRANObligation.Logic.SFNotificationSingleMsgType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class SFNotificationSinglePortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public SFNotificationSinglePortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public SFNotificationSinglePortType(SFNotificationSinglePortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            SFNotificationSinglePortType p = new SFNotificationSinglePortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo NotifySingle = new Microsoft.XLANGs.Core.OperationInfo
        (
            "NotifySingle",
            System.Web.Services.Description.OperationFlow.OneWay,
            typeof(SFNotificationSinglePortType),
            typeof(SFNotificationSingleMsgType),
            null,
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "NotifySingle" ] = NotifySingle;
                return h;
            }
        }
        #endregion // port reflection support
    }
    //#line 549 "C:\Users\skyeniga\Source\Repos\Biztalk\ETRAN Obligation\ETRAN Obligation Logic\ETRAN Obligation SF Notify Debatcher.odx"
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "SF_Notify_Full_Receive", "Notify", -1, -1, true
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(SBA.ETRANObligation.Logic.SFNotificationFullPortType),
            typeof(SBA.ETRANObligation.Logic.SFNotificationSinglePortType)
        },
        new System.String[] {
            "SF_Notify_Full_Receive",
            "SF_Single_Send"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
            typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce)
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class ETRANObligationSFNotifyDebatcher : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eNone,
            new System.String[] {
                "SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce"
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(ETRANObligationSFNotifyDebatcher));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static ETRANObligationSFNotifyDebatcher()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 3, 3),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment4), 1, 3, 4),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment5), 1, 2, 5)
            };

            _Locks = 0;
            _rootContext = new __ETRANObligationSFNotifyDebatcher_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[5];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public ETRANObligationSFNotifyDebatcher(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "ETRANObligationSFNotifyDebatcher", tracker)
        {
            ConstructorHelper();
        }

        public ETRANObligationSFNotifyDebatcher(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "ETRANObligationSFNotifyDebatcher")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>3e8236f7-62dc-40a7-b8f8-793e6050daf6</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>66af9bab-3c4d-428b-bd22-740a188c8352</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Get SF Notify</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>19324fcf-a9e3-434b-8246-a2dc6ba00b12</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Init Constants</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>2c14ba47-147d-421a-8f46-9fea0fb1f552</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Main Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>6313a80d-c678-412c-95a7-c28f5d9f9057</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>SF Notify Ack</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>8b060fb1-285d-4790-a783-4682a59a211b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create SF Notify Ack Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>e1e0ae8d-7fe7-4297-b3b4-c736a05e7089</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map SF Notify Ack</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>9fcbe804-50ac-449a-99bf-1e53cd35f1fa</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>6e192fc9-924c-4956-913f-a5d76c1eff9c</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>2fd38dde-b564-48ba-9c10-bf871d72b8f4</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>8a985857-435a-4323-bdcd-f9f2e1e888b9</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send SF Ack</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>cc292401-f71b-49dd-b62c-7dea0a9f22a9</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Debatch &amp; Send Single Notify</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>05203bf6-12fc-4819-a292-3feadc1dbe1e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Notifies</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>WhileShape</shapeType>      <ShapeID>4db43a9c-a659-4a35-856e-9f6942736305</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loop Notifications</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>f31b279b-ba7f-4f50-8f2b-b3cd5bf04dab</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Single Notify Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>8c02f4cf-c20b-43d9-9006-faae19fcad21</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Init for Single Notify</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>10780c16-53c6-4d61-9562-b87679ca3009</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Initial Single Notify</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>0f6d35c6-68ac-4e11-90cc-4364c87d8e2b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Next Single</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>08a30c03-6e49-4ed5-bbfa-29f149331c7f</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>c03b66df-f76e-4bb5-993a-cc432461254e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Loan/App Id</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>18850a29-9e81-40c1-9ada-d4a8f81217a9</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Single Notify</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>65da83e3-4db7-475e-a6d6-feb48d0431a2</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception (Single Notify)</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>2fb69e4d-0d9e-46bd-bc94-5a333bcbcbb6</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Handle Error (Single)</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>216a1546-7b9d-4b2b-85fc-18b53b4df1fc</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Count &amp; Re-Init</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>9d45e875-da51-41a3-8afb-73de5120e21f</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception (Main)</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>7ee04bb6-1725-4422-bc68-2c25e6354497</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Handle Error (Main)</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>35c367d3-f004-4c24-b41f-530a9cb78410</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Errors? </shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>b9939fe3-2614-4b99-bce0-6caac8150856</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>d9a48671-6340-4d18-b7a6-75f772f3858e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Prep Error Info</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>52d46472-1648-4cc1-9f0c-6d714bac545a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Have App Num? </shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>f6eb0f3c-a648-4ffb-b3d7-961041b01ab3</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>8c1bd063-f595-47cb-a351-0515ebb4e199</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>0ac802ff-1506-47da-b3a8-8d2d439ce3b6</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>1ce05490-d77e-4c6d-9a0f-18f6ebd07c13</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e76ff520-734a-41e1-b83b-796888f51c02</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>46f19606-56f9-4512-bebd-0cdaeb08de22</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>1f22a564-2b55-4857-a7f3-5c29dd84510d</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesForceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>2a1e0c9d-bfda-4d2e-a272-39d6f3adcf09</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesForceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>af0aa14b-e3e3-443b-9cdc-04922ce8ec8e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>68a5d7bb-eed6-4f10-9857-1533120e0c36</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>AutoDeclineReason</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>efde8d80-c733-465d-ba95-138737bae5e4</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>14a3bceb-c31f-480e-89ff-597ddff0de1f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Log</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>a1a16c04-def2-40fd-8714-dee4e9a8ff03</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>ec0c36a8-f45f-4efd-a92c-b9b85b8b6071</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'ETRANObligationSFNotifyDebatcher'</ActionName><IsAtomic>0</IsAtomic><Line>549</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>577</Line><Position>22</Position><ShapeID>'66af9bab-3c4d-428b-bd22-740a188c8352'</ShapeID>
<Messages>
	<MsgInfo><name>SFNotificationFullMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound+notifications</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>595</Line><Position>33</Position><ShapeID>'19324fcf-a9e3-434b-8246-a2dc6ba00b12'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope43'</ActionName><IsAtomic>0</IsAtomic><Line>609</Line><Position>13</Position><ShapeID>'2c14ba47-147d-421a-8f46-9fea0fb1f552'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>614</Line><Position>21</Position><ShapeID>'8b060fb1-285d-4790-a783-4682a59a211b'</ShapeID>
<Messages>
	<MsgInfo><name>SFNotificationAckMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound+notificationsResponse</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>SFNotificationFullMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound+notifications</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>620</Line><Position>21</Position><ShapeID>'8a985857-435a-4323-bdcd-f9f2e1e888b9'</ShapeID>
<Messages>
	<MsgInfo><name>SFNotificationAckMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound+notificationsResponse</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>622</Line><Position>41</Position><ShapeID>'05203bf6-12fc-4819-a292-3feadc1dbe1e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>625</Line><Position>21</Position><ShapeID>'4db43a9c-a659-4a35-856e-9f6942736305'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope44'</ActionName><IsAtomic>0</IsAtomic><Line>628</Line><Position>25</Position><ShapeID>'f31b279b-ba7f-4f50-8f2b-b3cd5bf04dab'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>635</Line><Position>63</Position><ShapeID>'8c02f4cf-c20b-43d9-9006-faae19fcad21'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>640</Line><Position>33</Position><ShapeID>'10780c16-53c6-4d61-9562-b87679ca3009'</ShapeID>
<Messages>
	<MsgInfo><name>SFNotificationSingleMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationSingle</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>652</Line><Position>63</Position><ShapeID>'c03b66df-f76e-4bb5-993a-cc432461254e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>655</Line><Position>33</Position><ShapeID>'18850a29-9e81-40c1-9ada-d4a8f81217a9'</ShapeID>
<Messages>
	<MsgInfo><name>SFNotificationSingleMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationSingle</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>660</Line><Position>33</Position><ShapeID>'65da83e3-4db7-475e-a6d6-feb48d0431a2'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>664</Line><Position>54</Position><ShapeID>'2fb69e4d-0d9e-46bd-bc94-5a333bcbcbb6'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>672</Line><Position>31</Position><ShapeID>'216a1546-7b9d-4b2b-85fc-18b53b4df1fc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>684</Line><Position>21</Position><ShapeID>'9d45e875-da51-41a3-8afb-73de5120e21f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>688</Line><Position>42</Position><ShapeID>'7ee04bb6-1725-4422-bc68-2c25e6354497'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>694</Line><Position>13</Position><ShapeID>'35c367d3-f004-4c24-b41f-530a9cb78410'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>698</Line><Position>24</Position><ShapeID>'d9a48671-6340-4d18-b7a6-75f772f3858e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>705</Line><Position>17</Position><ShapeID>'52d46472-1648-4cc1-9f0c-6d714bac545a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>708</Line><Position>97</Position><ShapeID>'8c1bd063-f595-47cb-a351-0515ebb4e199'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>713</Line><Position>59</Position><ShapeID>'14a3bceb-c31f-480e-89ff-597ddff0de1f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>716</Line><Position>17</Position><ShapeID>'a1a16c04-def2-40fd-8714-dee4e9a8ff03'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='2c8e9fb5-ffc7-420f-a1e8-938fb1a16009' LowerBound='1.1' HigherBound='192.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='SBA.ETRANObligation.Logic' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='PortType' OID='d7e9c173-2127-4200-91c2-7bdcf0dc30e5' ParentLink='Module_PortType' LowerBound='12.1' HigherBound='19.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFNotificationFullPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='100cf346-55af-4328-9cd0-93f2999fbba7' ParentLink='PortType_OperationDeclaration' LowerBound='14.1' HigherBound='18.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Notify' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='8fbfdafa-03f1-429b-9775-f80669899c3a' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='16.13' HigherBound='16.38'>
                    <om:Property Name='Ref' Value='SBA.ETRANObligation.Logic.SFNotificationFullMsgType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='a80a2d1a-889b-423c-8713-ed39f67e03fe' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='16.40' HigherBound='16.64'>
                    <om:Property Name='Ref' Value='SBA.ETRANObligation.Logic.SFNotificationAckMsgType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='a277d2a1-e09f-4c3f-817f-b060154e4f14' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFNotificationAckMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='c06af24a-b32f-460a-a4b3-ee073042411a' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound.notificationsResponse' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='cbd62613-1440-4981-a917-d7434a70378a' ParentLink='Module_MessageType' LowerBound='8.1' HigherBound='12.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFNotificationFullMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='f9f8336e-f8cf-45d7-a16b-db780baed94c' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='10.1' HigherBound='11.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationService_soap_sforce_com_2005_09_outbound.notifications' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='ServiceDeclaration' OID='2be9f148-8e51-44a2-aab3-d7d1b284b904' ParentLink='Module_ServiceDeclaration' LowerBound='19.1' HigherBound='191.1'>
            <om:Property Name='InitializedTransactionType' Value='True' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETRANObligationSFNotifyDebatcher' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='8a01d631-e8be-4ee8-b5e4-18881a6533c0' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='30.1' HigherBound='31.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Exception' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempEx' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='8a9def50-c953-4c33-bc3d-c6b7cf298e5b' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='31.1' HigherBound='32.1'>
                <om:Property Name='InitialValue' Value='1' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Int32' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Index' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='dfb022d1-cd1b-4be5-9e9d-6f5e18b241e8' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='32.1' HigherBound='33.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ErrorMessages' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='106b86a1-4601-4379-9d22-f1a0d2f9090c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='33.1' HigherBound='34.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SingleNotifyApplicationNumber' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='54027c6e-50a4-425b-b840-d4837887e293' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='34.1' HigherBound='35.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SingleNotifyLoanId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='eda063cd-200f-4bcb-9297-c6c044b84af7' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='35.1' HigherBound='36.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Guid' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='OrchestrationId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='afec27b6-6455-4c28-8289-db78c7764cbc' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='36.1' HigherBound='37.1'>
                <om:Property Name='InitialValue' Value='&quot;Loan__c&quot;' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesForceObjectName' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='91d664db-3ec9-46bf-882d-a265923d7cc7' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='37.1' HigherBound='38.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesForceObjectId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='ae05dab5-6bb5-49bd-9053-1ac7e280a111' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='38.1' HigherBound='39.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ApplicationNumber' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='4f23c1bb-30af-4d17-a027-9093f703ad86' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='39.1' HigherBound='40.1'>
                <om:Property Name='InitialValue' Value='&quot;Loan Obligated&quot;' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Stage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='2c2d0494-920e-4136-b2c1-f87caa487b72' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='40.1' HigherBound='41.1'>
                <om:Property Name='InitialValue' Value='&quot;Error&quot;' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Status' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='234c0efa-89e6-4e21-bcd7-93c255fdddf3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='41.1' HigherBound='42.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Message' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5e9a0e66-e5a9-407a-8ab0-5f6a4534da8d' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='42.1' HigherBound='43.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempOrchestrationId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='805f6357-d8db-4c72-986b-d55f274aa72e' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='43.1' HigherBound='44.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='AutoDeclineReason' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='eee24873-5653-4419-bd1d-4e6e8c03888d' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='44.1' HigherBound='45.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='SBA.BizTalk.Shared.MessageHelper.CustomTypes.XmlDocumentList' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='NotificationXmlDocs' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='39c463a6-a179-4699-b692-b97e4aea5484' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='27.1' HigherBound='28.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFNotificationAckMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFNotificationAckMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='00cfb5f1-bcee-440d-aa0a-1697db03ea77' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='28.1' HigherBound='29.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFNotificationFullMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFNotificationFullMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='1c758b47-8d9b-4427-ab96-e23a9dc3241f' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='29.1' HigherBound='30.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFNotificationSingleMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFNotificationSingleMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='3e8236f7-62dc-40a7-b8f8-793e6050daf6' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Receive' OID='66af9bab-3c4d-428b-bd22-740a188c8352' ParentLink='ServiceBody_Statement' LowerBound='47.1' HigherBound='63.1'>
                    <om:Property Name='Activate' Value='True' />
                    <om:Property Name='PortName' Value='SF_Notify_Full_Receive' />
                    <om:Property Name='MessageName' Value='SFNotificationFullMsg' />
                    <om:Property Name='OperationName' Value='Notify' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Get SF Notify' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableAssignment' OID='19324fcf-a9e3-434b-8246-a2dc6ba00b12' ParentLink='ServiceBody_Statement' LowerBound='63.1' HigherBound='79.1'>
                    <om:Property Name='Expression' Value='&#xD;&#xA;// Get this Orchestration&apos;s instance Id. &#xD;&#xA;TempOrchestrationId = System.Convert.ToString(ETRANObligationSFNotifyDebatcher(Microsoft.XLANGs.BaseTypes.InstanceId));&#xD;&#xA;OrchestrationId = System.Guid.Empty;&#xD;&#xA;if (!System.Guid.TryParse(TempOrchestrationId, out OrchestrationId)) {&#xD;&#xA;    TempEx = new System.Exception(&quot;Unable to get Orchestration Instance GUID!&quot;); &#xD;&#xA;    TempEx.Data.Add(&quot;TempOrchestrationId&quot;, TempOrchestrationId); &#xD;&#xA;    throw TempEx;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Index = 0;&#xD;&#xA;NotificationXmlDocs = null; &#xD;&#xA;&#xD;&#xA;// Initialize StringBuilder for holding any error information in case any are encountered. &#xD;&#xA;ErrorMessages = new SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList(); &#xD;&#xA;' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Init Constants' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='Scope' OID='2c14ba47-147d-421a-8f46-9fea0fb1f552' ParentLink='ServiceBody_Statement' LowerBound='79.1' HigherBound='164.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Main Scope' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='Task' OID='6313a80d-c678-412c-95a7-c28f5d9f9057' ParentLink='ComplexStatement_Statement' LowerBound='84.1' HigherBound='92.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='SF Notify Ack' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='8b060fb1-285d-4790-a783-4682a59a211b' ParentLink='ComplexStatement_Statement' LowerBound='84.1' HigherBound='90.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Create SF Notify Ack Msg' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Transform' OID='e1e0ae8d-7fe7-4297-b3b4-c736a05e7089' ParentLink='ComplexStatement_Statement' LowerBound='87.1' HigherBound='89.1'>
                                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.Notification.MapNotificationAckResponse' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Map SF Notify Ack' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='MessagePartRef' OID='9fcbe804-50ac-449a-99bf-1e53cd35f1fa' ParentLink='Transform_InputMessagePartRef' LowerBound='88.139' HigherBound='88.172'>
                                    <om:Property Name='MessageRef' Value='SFNotificationFullMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_1' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='6e192fc9-924c-4956-913f-a5d76c1eff9c' ParentLink='Transform_OutputMessagePartRef' LowerBound='88.36' HigherBound='88.68'>
                                    <om:Property Name='MessageRef' Value='SFNotificationAckMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_2' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageRef' OID='2fd38dde-b564-48ba-9c10-bf871d72b8f4' ParentLink='Construct_MessageRef' LowerBound='85.31' HigherBound='85.51'>
                                <om:Property Name='Ref' Value='SFNotificationAckMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='8a985857-435a-4323-bdcd-f9f2e1e888b9' ParentLink='ComplexStatement_Statement' LowerBound='90.1' HigherBound='92.1'>
                            <om:Property Name='PortName' Value='SF_Notify_Full_Receive' />
                            <om:Property Name='MessageName' Value='SFNotificationAckMsg' />
                            <om:Property Name='OperationName' Value='Notify' />
                            <om:Property Name='OperationMessageName' Value='Response' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Send SF Ack' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Task' OID='cc292401-f71b-49dd-b62c-7dea0a9f22a9' ParentLink='ComplexStatement_Statement' LowerBound='92.1' HigherBound='151.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Debatch &amp; Send Single Notify' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='05203bf6-12fc-4819-a292-3feadc1dbe1e' ParentLink='ComplexStatement_Statement' LowerBound='92.1' HigherBound='95.1'>
                            <om:Property Name='Expression' Value='NotificationXmlDocs = SBA.BizTalk.Shared.MessageHelper.Specialized.NotificationHelper.Instance.GetSingleNotificationXmlDocs(SFNotificationFullMsg, &#xD;&#xA;                                                                                    &quot;http://SBA.gov/ETRANObligation/Salesforce/NotificationSingle/&quot;); ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Get Notifies' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='While' OID='4db43a9c-a659-4a35-856e-9f6942736305' ParentLink='ComplexStatement_Statement' LowerBound='95.1' HigherBound='151.1'>
                            <om:Property Name='Expression' Value='Index &lt; NotificationXmlDocs.Length' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Loop Notifications' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='Scope' OID='f31b279b-ba7f-4f50-8f2b-b3cd5bf04dab' ParentLink='ComplexStatement_Statement' LowerBound='98.1' HigherBound='140.1'>
                                <om:Property Name='InitializedTransactionType' Value='True' />
                                <om:Property Name='IsSynchronized' Value='False' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Single Notify Scope' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='VariableAssignment' OID='8c02f4cf-c20b-43d9-9006-faae19fcad21' ParentLink='ComplexStatement_Statement' LowerBound='103.1' HigherBound='110.1'>
                                    <om:Property Name='Expression' Value='&#xD;&#xA;// Reset these to defaults. &#xD;&#xA;SingleNotifyApplicationNumber = System.String.Empty; &#xD;&#xA;SingleNotifyLoanId = System.String.Empty; &#xD;&#xA;&#xD;&#xA; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Init for Single Notify' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='Construct' OID='10780c16-53c6-4d61-9562-b87679ca3009' ParentLink='ComplexStatement_Statement' LowerBound='110.1' HigherBound='121.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Initial Single Notify' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageAssignment' OID='0f6d35c6-68ac-4e11-90cc-4364c87d8e2b' ParentLink='ComplexStatement_Statement' LowerBound='113.1' HigherBound='120.1'>
                                        <om:Property Name='Expression' Value='&#xD;&#xA;// Create the single SF notify message using the XmlDocument for content &#xD;&#xA;// and the original full SF notify message&apos;s context properties. &#xD;&#xA;SFNotificationSingleMsg.MessagePart = null; &#xD;&#xA;SFNotificationSingleMsg.MessagePart = NotificationXmlDocs[Index]; &#xD;&#xA;SFNotificationSingleMsg(*) = SFNotificationFullMsg(*); ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Make Next Single' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='08a30c03-6e49-4ed5-bbfa-29f149331c7f' ParentLink='Construct_MessageRef' LowerBound='111.43' HigherBound='111.66'>
                                        <om:Property Name='Ref' Value='SFNotificationSingleMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='c03b66df-f76e-4bb5-993a-cc432461254e' ParentLink='ComplexStatement_Statement' LowerBound='121.1' HigherBound='125.1'>
                                    <om:Property Name='Expression' Value='  &#xD;&#xA;SingleNotifyApplicationNumber = SFNotificationSingleMsg.MessagePart.sObject.Application_Number__c;&#xD;&#xA;SingleNotifyLoanId = SFNotificationSingleMsg.MessagePart.sObject.SObject_ID__c;' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Get Loan/App Id' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Send' OID='18850a29-9e81-40c1-9ada-d4a8f81217a9' ParentLink='ComplexStatement_Statement' LowerBound='125.1' HigherBound='127.1'>
                                    <om:Property Name='PortName' Value='SF_Single_Send' />
                                    <om:Property Name='MessageName' Value='SFNotificationSingleMsg' />
                                    <om:Property Name='OperationName' Value='NotifySingle' />
                                    <om:Property Name='OperationMessageName' Value='Request' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Send Single Notify' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='Catch' OID='65da83e3-4db7-475e-a6d6-feb48d0431a2' ParentLink='Scope_Catch' LowerBound='130.1' HigherBound='138.1'>
                                    <om:Property Name='ExceptionName' Value='exSingleNotify' />
                                    <om:Property Name='ExceptionType' Value='System.Exception' />
                                    <om:Property Name='IsFaultMessage' Value='False' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Catch Exception (Single Notify)' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='VariableAssignment' OID='2fb69e4d-0d9e-46bd-bc94-5a333bcbcbb6' ParentLink='Catch_Statement' LowerBound='133.1' HigherBound='137.1'>
                                        <om:Property Name='Expression' Value='&#xD;&#xA;ErrorMessages.Add(SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(exSingleNotify));&#xD;&#xA;  ' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Handle Error (Single)' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='VariableAssignment' OID='216a1546-7b9d-4b2b-85fc-18b53b4df1fc' ParentLink='ComplexStatement_Statement' LowerBound='140.1' HigherBound='150.1'>
                                <om:Property Name='Expression' Value='&#xD;&#xA;// Increment the Index - this is used to grab the next single SF notify message.  &#xD;&#xA;Index = Index + 1; &#xD;&#xA; &#xD;&#xA;// Reset single notify related values to defaults. &#xD;&#xA;SingleNotifyApplicationNumber = System.String.Empty; &#xD;&#xA;SingleNotifyLoanId = System.String.Empty; &#xD;&#xA; &#xD;&#xA; ' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Count &amp; Re-Init' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Catch' OID='9d45e875-da51-41a3-8afb-73de5120e21f' ParentLink='Scope_Catch' LowerBound='154.1' HigherBound='162.1'>
                        <om:Property Name='ExceptionName' Value='exMain' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Exception (Main)' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='7ee04bb6-1725-4422-bc68-2c25e6354497' ParentLink='Catch_Statement' LowerBound='157.1' HigherBound='161.1'>
                            <om:Property Name='Expression' Value='&#xD;&#xA;ErrorMessages.Add(SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(exMain)); &#xD;&#xA;  ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Handle Error (Main)' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                </om:Element>
                <om:Element Type='Decision' OID='35c367d3-f004-4c24-b41f-530a9cb78410' ParentLink='ServiceBody_Statement' LowerBound='164.1' HigherBound='189.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Errors? ' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='DecisionBranch' OID='b9939fe3-2614-4b99-bce0-6caac8150856' ParentLink='ReallyComplexStatement_Branch' LowerBound='165.13' HigherBound='189.1'>
                        <om:Property Name='Expression' Value='ErrorMessages.Length &gt; 0' />
                        <om:Property Name='IsGhostBranch' Value='True' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Yes' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='d9a48671-6340-4d18-b7a6-75f772f3858e' ParentLink='ComplexStatement_Statement' LowerBound='167.1' HigherBound='175.1'>
                            <om:Property Name='Expression' Value='&#xD;&#xA;Status = &quot;Error&quot;; &#xD;&#xA;Message = System.String.Format(&quot;One or more failures occurred during Salesforce Notification Debatching. \r\n\r\n&quot; + &#xD;&#xA;                               &quot;Exceptions: \r\n\r\n{0} \r\n\r\n&quot; + &#xD;&#xA;                               &quot;SF Full Notify Msg: \r\n\r\n{1}&quot;, &#xD;&#xA;                               ErrorMessages.ToString(&quot; \r\n\r\n&quot;), &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(SFNotificationFullMsg)); ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Prep Error Info' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Decision' OID='52d46472-1648-4cc1-9f0c-6d714bac545a' ParentLink='ComplexStatement_Statement' LowerBound='175.1' HigherBound='186.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Have App Num? ' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='f6eb0f3c-a648-4ffb-b3d7-961041b01ab3' ParentLink='ReallyComplexStatement_Branch' LowerBound='176.17' HigherBound='181.1'>
                                <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(SingleNotifyApplicationNumber)' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Call' OID='8c1bd063-f595-47cb-a351-0515ebb4e199' ParentLink='ComplexStatement_Statement' LowerBound='178.1' HigherBound='180.1'>
                                    <om:Property Name='Identifier' Value='Call_Event_Request' />
                                    <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Event Request' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Parameter' OID='0ac802ff-1506-47da-b3a8-8d2d439ce3b6' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='OrchestrationId' />
                                        <om:Property Name='Type' Value='System.Guid' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='1ce05490-d77e-4c6d-9a0f-18f6ebd07c13' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Status' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='e76ff520-734a-41e1-b83b-796888f51c02' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Stage' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='46f19606-56f9-4512-bebd-0cdaeb08de22' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='ApplicationNumber' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='1f22a564-2b55-4857-a7f3-5c29dd84510d' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='SalesForceObjectName' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='2a1e0c9d-bfda-4d2e-a272-39d6f3adcf09' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='SalesForceObjectId' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='af0aa14b-e3e3-443b-9cdc-04922ce8ec8e' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Message' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='68a5d7bb-eed6-4f10-9857-1533120e0c36' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='AutoDeclineReason' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='efde8d80-c733-465d-ba95-138737bae5e4' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='VariableAssignment' OID='14a3bceb-c31f-480e-89ff-597ddff0de1f' ParentLink='ComplexStatement_Statement' LowerBound='183.1' HigherBound='185.1'>
                                    <om:Property Name='Expression' Value='System.Diagnostics.EventLog.WriteEntry(&quot;BizTalk - ETran Obligations&quot;, Message, System.Diagnostics.EventLogEntryType.Error); ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Event Log' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Terminate' OID='a1a16c04-def2-40fd-8714-dee4e9a8ff03' ParentLink='ComplexStatement_Statement' LowerBound='186.1' HigherBound='188.1'>
                            <om:Property Name='ErrorMessage' Value='Message;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='DecisionBranch' OID='ec0c36a8-f45f-4efd-a92c-b9b85b8b6071' ParentLink='ReallyComplexStatement_Branch'>
                        <om:Property Name='IsGhostBranch' Value='True' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Else' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='7e9f3ac9-e126-4c9b-9919-c11ea55dcfab' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='22.1' HigherBound='24.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='10' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFNotificationFullPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SF_Notify_Full_Receive' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='LogicalBindingAttribute' OID='cca4c89b-a8e3-4948-a4c2-70efc4e7c372' ParentLink='PortDeclaration_CLRAttribute' LowerBound='22.1' HigherBound='23.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='d3f53e42-3d73-4aed-92cb-875589afa576' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='24.1' HigherBound='27.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='73' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='Transmitted' />
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFNotificationSinglePortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SF_Single_Send' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='6e4b5e92-17fe-4a87-98f2-49664a5078b6' ParentLink='PortDeclaration_CLRAttribute' LowerBound='24.1' HigherBound='25.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __ETRANObligationSFNotifyDebatcher_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __ETRANObligationSFNotifyDebatcher_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ETRANObligationSFNotifyDebatcher")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationSFNotifyDebatcher __svc__ = (ETRANObligationSFNotifyDebatcher)_service;
                __ETRANObligationSFNotifyDebatcher_root_0 __ctx0__ = (__ETRANObligationSFNotifyDebatcher_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.SF_Single_Send != null)
                {
                    __svc__.SF_Single_Send.Close(this, null);
                    __svc__.SF_Single_Send = null;
                }
                if (__svc__.SF_Notify_Full_Receive != null)
                {
                    __svc__.SF_Notify_Full_Receive.Close(this, null);
                    __svc__.SF_Notify_Full_Receive = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
        }


        [System.SerializableAttribute]
        public class __ETRANObligationSFNotifyDebatcher_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __ETRANObligationSFNotifyDebatcher_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ETRANObligationSFNotifyDebatcher")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationSFNotifyDebatcher __svc__ = (ETRANObligationSFNotifyDebatcher)_service;
                __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null)
                    __ctx1__.__ErrorMessages = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesForceObjectName = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempEx = null;
                if (__ctx1__ != null)
                    __ctx1__.__SingleNotifyApplicationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesForceObjectId = null;
                if (__ctx1__ != null)
                    __ctx1__.__Message = null;
                if (__ctx1__ != null)
                    __ctx1__.__Status = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempOrchestrationId = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__AutoDeclineReason = null;
                if (__ctx1__ != null)
                    __ctx1__.__SingleNotifyLoanId = null;
                if (__ctx1__ != null)
                    __ctx1__.__NotificationXmlDocs = null;
                if (__ctx1__ != null)
                    __ctx1__.__Stage = null;
                if (__ctx1__ != null && __ctx1__.__SFNotificationFullMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationFullMsg);
                    __ctx1__.__SFNotificationFullMsg = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("SFNotificationAckMsg")]
            internal SFNotificationAckMsgType __SFNotificationAckMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFNotificationFullMsg")]
            internal SFNotificationFullMsgType __SFNotificationFullMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFNotificationSingleMsg")]
            internal SFNotificationSingleMsgType __SFNotificationSingleMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempEx")]
            internal System.Exception __TempEx;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Index")]
            internal System.Int32 __Index;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ErrorMessages")]
            internal SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList __ErrorMessages;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SingleNotifyApplicationNumber")]
            internal System.String __SingleNotifyApplicationNumber;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SingleNotifyLoanId")]
            internal System.String __SingleNotifyLoanId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("OrchestrationId")]
            internal System.Guid __OrchestrationId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SalesForceObjectName")]
            internal System.String __SalesForceObjectName;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SalesForceObjectId")]
            internal System.String __SalesForceObjectId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ApplicationNumber")]
            internal System.String __ApplicationNumber;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Stage")]
            internal System.String __Stage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Status")]
            internal System.String __Status;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Message")]
            internal System.String __Message;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempOrchestrationId")]
            internal System.String __TempOrchestrationId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("AutoDeclineReason")]
            internal System.String __AutoDeclineReason;
            [Microsoft.XLANGs.Core.UserVariableAttribute("NotificationXmlDocs")]
            internal SBA.BizTalk.Shared.MessageHelper.CustomTypes.XmlDocumentList __NotificationXmlDocs;
        }


        [System.SerializableAttribute]
        public class ____scope43_2 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope43_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope43")
            {
            }

            public override int Index { get { return 2; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[5];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationSFNotifyDebatcher __svc__ = (ETRANObligationSFNotifyDebatcher)_service;
                ____scope43_2 __ctx2__ = (____scope43_2)(__svc__._stateMgrs[2]);
                __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__SFNotificationAckMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationAckMsg);
                    __ctx1__.__SFNotificationAckMsg = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__exMain_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exMain_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope44_3 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope44_3(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope44")
            {
            }

            public override int Index { get { return 3; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[3]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[3]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[4];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationSFNotifyDebatcher __svc__ = (ETRANObligationSFNotifyDebatcher)_service;
                ____scope44_3 __ctx3__ = (____scope44_3)(__svc__._stateMgrs[3]);
                __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__SFNotificationSingleMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationSingleMsg);
                    __ctx1__.__SFNotificationSingleMsg = null;
                }
                if (__ctx3__ != null)
                    __ctx3__.__exSingleNotify_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exSingleNotify_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("SF_Notify_Full_Receive")]
        internal SFNotificationFullPortType SF_Notify_Full_Receive;
        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.DeliveryNotificationAttribute(Microsoft.XLANGs.BaseTypes.DeliveryNotificationAttribute.NotificationLevel.Transmitted)]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("SF_Single_Send")]
        internal SFNotificationSinglePortType SF_Single_Send;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {SFNotificationFullPortType.Notify},
                                               typeof(ETRANObligationSFNotifyDebatcher).GetField("SF_Notify_Full_Receive", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ETRANObligationSFNotifyDebatcher), "SF_Notify_Full_Receive"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {SFNotificationSinglePortType.NotifySingle},
                                               typeof(ETRANObligationSFNotifyDebatcher).GetField("SF_Single_Send", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ETRANObligationSFNotifyDebatcher), "SF_Single_Send"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce)                    
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[1]{
                     new object[5] { _portInfo[0], 0, null , -1, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "66af9bab-3c4d-428b-bd22-740a188c8352", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "66af9bab-3c4d-428b-bd22-740a188c8352", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "19324fcf-a9e3-434b-8246-a2dc6ba00b12", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "19324fcf-a9e3-434b-8246-a2dc6ba00b12", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "2c14ba47-147d-421a-8f46-9fea0fb1f552", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "8b060fb1-285d-4790-a783-4682a59a211b", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "8b060fb1-285d-4790-a783-4682a59a211b", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "8a985857-435a-4323-bdcd-f9f2e1e888b9", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "8a985857-435a-4323-bdcd-f9f2e1e888b9", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "05203bf6-12fc-4819-a292-3feadc1dbe1e", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "05203bf6-12fc-4819-a292-3feadc1dbe1e", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "4db43a9c-a659-4a35-856e-9f6942736305", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "f31b279b-ba7f-4f50-8f2b-b3cd5bf04dab", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "00000000-0000-0000-0000-000000000000", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "8c02f4cf-c20b-43d9-9006-faae19fcad21", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "8c02f4cf-c20b-43d9-9006-faae19fcad21", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "00000000-0000-0000-0000-000000000000", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "10780c16-53c6-4d61-9562-b87679ca3009", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "10780c16-53c6-4d61-9562-b87679ca3009", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "c03b66df-f76e-4bb5-993a-cc432461254e", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "c03b66df-f76e-4bb5-993a-cc432461254e", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "18850a29-9e81-40c1-9ada-d4a8f81217a9", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "18850a29-9e81-40c1-9ada-d4a8f81217a9", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(26, "65da83e3-4db7-475e-a6d6-feb48d0431a2", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(27, "2fb69e4d-0d9e-46bd-bc94-5a333bcbcbb6", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(28, "2fb69e4d-0d9e-46bd-bc94-5a333bcbcbb6", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(29, "65da83e3-4db7-475e-a6d6-feb48d0431a2", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(30, "f31b279b-ba7f-4f50-8f2b-b3cd5bf04dab", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(31, "216a1546-7b9d-4b2b-85fc-18b53b4df1fc", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(32, "216a1546-7b9d-4b2b-85fc-18b53b4df1fc", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(33, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(34, "4db43a9c-a659-4a35-856e-9f6942736305", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(35, "9d45e875-da51-41a3-8afb-73de5120e21f", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(36, "7ee04bb6-1725-4422-bc68-2c25e6354497", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(37, "7ee04bb6-1725-4422-bc68-2c25e6354497", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(38, "9d45e875-da51-41a3-8afb-73de5120e21f", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(39, "2c14ba47-147d-421a-8f46-9fea0fb1f552", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(40, "35c367d3-f004-4c24-b41f-530a9cb78410", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(41, "d9a48671-6340-4d18-b7a6-75f772f3858e", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(42, "d9a48671-6340-4d18-b7a6-75f772f3858e", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(43, "52d46472-1648-4cc1-9f0c-6d714bac545a", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(44, "8c1bd063-f595-47cb-a351-0515ebb4e199", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(45, "8c1bd063-f595-47cb-a351-0515ebb4e199", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(46, "14a3bceb-c31f-480e-89ff-597ddff0de1f", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(47, "14a3bceb-c31f-480e-89ff-597ddff0de1f", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(48, "52d46472-1648-4cc1-9f0c-6d714bac545a", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(49, "a1a16c04-def2-40fd-8714-dee4e9a8ff03", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(50, "35c367d3-f004-4c24-b41f-530a9cb78410", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Call),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,3,3,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,39,40,40,41,41,42,42,43,43,44,44,45,43,46,46,47,48,49,49,50,3,3,3,3,};
        public static int[] __progressLocation2 = new int[] { 8,8,8,9,10,10,10,11,12,12,13,14,14,14,15,15,15,30,31,31,32,32,32,34,34,34,34,34,34,};
        public static int[] __progressLocation3 = new int[] { 17,17,17,18,18,20,20,21,22,22,23,23,24,24,24,25,25,25,25,};
        public static int[] __progressLocation4 = new int[] { 26,26,27,27,28,29,29,};
        public static int[] __progressLocation5 = new int[] { 35,35,36,36,37,38,38,};

        public static int[][] __progressLocations = new int[6] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3,__progressLocation4,__progressLocation5};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __ETRANObligationSFNotifyDebatcher_root_0 __ctx0__ = (__ETRANObligationSFNotifyDebatcher_root_0)_stateMgrs[0];
            __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                SF_Notify_Full_Receive = new SFNotificationFullPortType(0, this);
                SF_Single_Send = new SFNotificationSinglePortType(1, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], SF_Notify_Full_Receive, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __ETRANObligationSFNotifyDebatcher_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __ETRANObligationSFNotifyDebatcher_root_0 __ctx0__ = (__ETRANObligationSFNotifyDebatcher_root_0)_stateMgrs[0];
            ____scope43_2 __ctx2__ = (____scope43_2)_stateMgrs[2];
            __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__TempEx = default(System.Exception);
                __ctx1__.__Index = default(System.Int32);
                __ctx1__.__ErrorMessages = default(SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList);
                __ctx1__.__SingleNotifyApplicationNumber = default(System.String);
                __ctx1__.__SingleNotifyLoanId = default(System.String);
                __ctx1__.__OrchestrationId = default(System.Guid);
                __ctx1__.__SalesForceObjectName = default(System.String);
                __ctx1__.__SalesForceObjectId = default(System.String);
                __ctx1__.__ApplicationNumber = default(System.String);
                __ctx1__.__Stage = default(System.String);
                __ctx1__.__Status = default(System.String);
                __ctx1__.__Message = default(System.String);
                __ctx1__.__TempOrchestrationId = default(System.String);
                __ctx1__.__AutoDeclineReason = default(System.String);
                __ctx1__.__NotificationXmlDocs = default(SBA.BizTalk.Shared.MessageHelper.CustomTypes.XmlDocumentList);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!SF_Notify_Full_Receive.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__SFNotificationFullMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationFullMsg);
                __ctx1__.__SFNotificationFullMsg = new SFNotificationFullMsgType("SFNotificationFullMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__SFNotificationFullMsg);
                SF_Notify_Full_Receive.ReceiveMessage(0, __msgEnv__, __ctx1__.__SFNotificationFullMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__SFNotificationFullMsg);
                    __edata.PortName = @"SF_Notify_Full_Receive";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__TempEx = new System.Exception();
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx1__.__Index = 1;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.__ErrorMessages = new SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList();
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__SingleNotifyApplicationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                __ctx1__.__SingleNotifyLoanId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                __ctx1__.__SalesForceObjectName = "Loan__c";
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                __ctx1__.__SalesForceObjectId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                __ctx1__.__ApplicationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                __ctx1__.__Stage = "Loan Obligated";
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                __ctx1__.__Message = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                __ctx1__.__TempOrchestrationId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                __ctx1__.__AutoDeclineReason = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                __ctx1__.__NotificationXmlDocs = new SBA.BizTalk.Shared.MessageHelper.CustomTypes.XmlDocumentList();
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                __ctx1__.__TempOrchestrationId = System.Convert.ToString((System.String)GetPropertyValueThrows(typeof(Microsoft.XLANGs.BaseTypes.InstanceId)));
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[5],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                __ctx1__.__OrchestrationId = System.Guid.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                __condition__ = !System.Guid.TryParse(__ctx1__.__TempOrchestrationId, out __ctx1__.__OrchestrationId);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 29;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                __ctx1__.__TempEx = new System.Exception("Unable to get Orchestration Instance GUID!");
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                __ctx1__.__TempEx.Data.Add("TempOrchestrationId", __ctx1__.__TempOrchestrationId);
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                throw __ctx1__.__TempEx;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__TempOrchestrationId = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempEx = null;
                Tracker.FireEvent(__eventLocations[3],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                __ctx1__.__Index = 0;
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                __ctx1__.__NotificationXmlDocs = null;
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 32:
                __ctx1__.__ErrorMessages = new SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList();
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 33;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                __ctx2__ = new ____scope43_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 35;
            case 35:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 36:
                if ( !PreProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__NotificationXmlDocs = null;
                if (__ctx1__ != null)
                    __ctx1__.__SingleNotifyLoanId = null;
                if (SF_Single_Send != null)
                {
                    SF_Single_Send.Close(__ctx1__, __seg__);
                    SF_Single_Send = null;
                }
                if (SF_Notify_Full_Receive != null)
                {
                    SF_Notify_Full_Receive.Close(__ctx1__, __seg__);
                    SF_Notify_Full_Receive = null;
                }
                Tracker.FireEvent(__eventLocations[39],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 37;
            case 37:
                if ( !PreProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[40],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 38;
            case 38:
                __condition__ = __ctx1__.__ErrorMessages.Length > 0;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 55;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 39:
                if ( !PreProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[41],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 40;
            case 40:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 41;
            case 41:
                if ( !PreProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[42],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 42;
            case 42:
                __ctx1__.__Message = System.String.Format("One or more failures occurred during Salesforce Notification Debatching. \r\n\r\n" + "Exceptions: \r\n\r\n{0} \r\n\r\n" + "SF Full Notify Msg: \r\n\r\n{1}", __ctx1__.__ErrorMessages.ToString(" \r\n\r\n"), SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__SFNotificationFullMsg)));
                if ( !PostProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 43;
            case 43:
                if ( !PreProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[43],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 44;
            case 44:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__SingleNotifyApplicationNumber);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 49 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 49;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 45;
            case 45:
                if ( !PreProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[44],__eventData[17],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 46;
            case 46:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce(4, InstanceId, this);
                    _stateMgrs[4] = svc;
                    __ctx1__.StartCall(__seg__, svc, __eventLocations[44],new object[] {__ctx1__.__OrchestrationId, __ctx1__.__Status, __ctx1__.__Stage, __ctx1__.__ApplicationNumber, __ctx1__.__SalesForceObjectName, __ctx1__.__SalesForceObjectId, __ctx1__.__Message, __ctx1__.__AutoDeclineReason});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 47:
                if ( !PreProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[4]).Args;
                }
                Tracker.FireEvent(__eventLocations[45],__eventData[18],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 48;
            case 48:
                if ( !PostProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 52;
            case 49:
                if ( !PreProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[46],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 50;
            case 50:
                System.Diagnostics.EventLog.WriteEntry("BizTalk - ETran Obligations", __ctx1__.__Message, System.Diagnostics.EventLogEntryType.Error);
                if ( !PostProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 51;
            case 51:
                Tracker.FireEvent(__eventLocations[47],__eventData[3],_stateMgrs[1].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 52;
            case 52:
                if ( !PreProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[48],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 53;
            case 53:
                if ( !PreProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[49],__eventData[19],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 54;
            case 54:
                RequestTerminate(__ctx1__,__ctx1__.__Message);
                __seg__.SegmentDone();
                break;
            case 55:
                if ( !PreProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__AutoDeclineReason = null;
                if (__ctx1__ != null)
                    __ctx1__.__Message = null;
                if (__ctx1__ != null)
                    __ctx1__.__Status = null;
                if (__ctx1__ != null)
                    __ctx1__.__Stage = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesForceObjectId = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesForceObjectName = null;
                if (__ctx1__ != null)
                    __ctx1__.__SingleNotifyApplicationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__ErrorMessages = null;
                if (__ctx1__ != null && __ctx1__.__SFNotificationFullMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationFullMsg);
                    __ctx1__.__SFNotificationFullMsg = null;
                }
                Tracker.FireEvent(__eventLocations[50],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 56;
            case 56:
                if ( !PreProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[20],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 57;
            case 57:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 58;
            case 58:
                if ( !PreProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 59;
            case 59:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            ____scope44_3 __ctx3__ = (____scope44_3)_stateMgrs[3];
            __ETRANObligationSFNotifyDebatcher_root_0 __ctx0__ = (__ETRANObligationSFNotifyDebatcher_root_0)_stateMgrs[0];
            ____scope43_2 __ctx2__ = (____scope43_2)_stateMgrs[2];
            __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                {
                    SFNotificationAckMsgType __SFNotificationAckMsg = new SFNotificationAckMsgType("SFNotificationAckMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.Notification.MapNotificationAckResponse), new object[] {__SFNotificationAckMsg.MessagePart}, new object[] {__ctx1__.__SFNotificationFullMsg.MessagePart});

                    if (__ctx1__.__SFNotificationAckMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__SFNotificationAckMsg);
                    __ctx1__.__SFNotificationAckMsg = __SFNotificationAckMsg;
                    __ctx1__.RefMessage(__ctx1__.__SFNotificationAckMsg);
                }
                __ctx1__.__SFNotificationAckMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__SFNotificationAckMsg);
                    __edata.Messages.Add(__ctx1__.__SFNotificationFullMsg);
                    Tracker.FireEvent(__eventLocations[9],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                SF_Notify_Full_Receive.SendMessage(0, __ctx1__.__SFNotificationAckMsg, null, null, __ctx2__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingResp) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingResp;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__SFNotificationAckMsg);
                    __edata.PortName = @"SF_Notify_Full_Receive";
                    Tracker.FireEvent(__eventLocations[11],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__SFNotificationAckMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationAckMsg);
                    __ctx1__.__SFNotificationAckMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx1__.__NotificationXmlDocs = SBA.BizTalk.Shared.MessageHelper.Specialized.NotificationHelper.Instance.GetSingleNotificationXmlDocs(CreateMessageWrapperForUserCode(__ctx1__.__SFNotificationFullMsg), "http://SBA.gov/ETRANObligation/Salesforce/NotificationSingle/");
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __condition__ = __ctx1__.__Index < __ctx1__.__NotificationXmlDocs.Length;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 25;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                __ctx3__ = new ____scope44_3(this);
                _stateMgrs[3] = __ctx3__;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                __ctx2__.StartContext(__seg__, __ctx3__);
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[30],__eventData[14],_stateMgrs[2].TrackDataStream );
                __ctx3__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[31],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __ctx1__.__Index = __ctx1__.__Index + 1;
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[32],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                __ctx1__.__SingleNotifyApplicationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                __ctx1__.__SingleNotifyLoanId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[34],__eventData[15],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[34],__eventData[16],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 28;
            case 28:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            ____scope44_3 __ctx3__ = (____scope44_3)_stateMgrs[3];
            __ETRANObligationSFNotifyDebatcher_root_0 __ctx0__ = (__ETRANObligationSFNotifyDebatcher_root_0)_stateMgrs[0];
            ____scope43_2 __ctx2__ = (____scope43_2)_stateMgrs[2];
            __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[2],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                __ctx1__.__SingleNotifyApplicationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                __ctx1__.__SingleNotifyLoanId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[8],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                {
                    SFNotificationSingleMsgType __SFNotificationSingleMsg = new SFNotificationSingleMsgType("SFNotificationSingleMsg", __ctx1__);

                    __SFNotificationSingleMsg.MessagePart.LoadFrom(null);
                    __SFNotificationSingleMsg.MessagePart.LoadFrom(__ctx1__.__NotificationXmlDocs[__ctx1__.__Index]);
                    __SFNotificationSingleMsg.CopyContextPropertiesFrom(__ctx1__.__SFNotificationFullMsg);

                    if (__ctx1__.__SFNotificationSingleMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__SFNotificationSingleMsg);
                    __ctx1__.__SFNotificationSingleMsg = __SFNotificationSingleMsg;
                    __ctx1__.RefMessage(__ctx1__.__SFNotificationSingleMsg);
                }
                __ctx1__.__SFNotificationSingleMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__SFNotificationSingleMsg);
                    Tracker.FireEvent(__eventLocations[21],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[2],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx1__.__SingleNotifyApplicationNumber = (System.String)__ctx1__.__SFNotificationSingleMsg.MessagePart.GetDistinguishedField("sObject.Application_Number__c");
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[23],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                __ctx1__.__SingleNotifyLoanId = (System.String)__ctx1__.__SFNotificationSingleMsg.MessagePart.GetDistinguishedField("sObject.SObject_ID__c");
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[24],__eventData[9],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                SF_Single_Send.SendMessage(0, __ctx1__.__SFNotificationSingleMsg, null, null, __ctx3__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.NextActivityPersists );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__SFNotificationSingleMsg);
                    __edata.PortName = @"SF_Single_Send";
                    Tracker.FireEvent(__eventLocations[25],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__SFNotificationSingleMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationSingleMsg);
                    __ctx1__.__SFNotificationSingleMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if (!__ctx3__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx3__.OnCommit();
                goto case 18;
            case 18:
                __seg__.SegmentDone();
                _segments[2].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment4(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[4];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            ____scope44_3 __ctx3__ = (____scope44_3)_stateMgrs[3];
            __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(3);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[26],__eventData[12],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[27],__eventData[2],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__ErrorMessages.Add(SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx3__.__exSingleNotify_0));
                if (__ctx3__ != null)
                    __ctx3__.__exSingleNotify_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[28],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[29],__eventData[13],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx3__.__exv__ = null;
                OnEndCatchHandler(3, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment5(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[5];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            ____scope43_2 __ctx2__ = (____scope43_2)_stateMgrs[2];
            __ETRANObligationSFNotifyDebatcher_1 __ctx1__ = (__ETRANObligationSFNotifyDebatcher_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[35],__eventData[12],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[36],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__ErrorMessages.Add(SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx2__.__exMain_0));
                if (__ctx2__ != null)
                    __ctx2__.__exMain_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[37],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[38],__eventData[13],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
    }
    //#line 3819 "C:\Users\skyeniga\Source\Repos\Biztalk\ETRAN Obligation\ETRAN Obligation Logic\ETRAN Obligation Logic.odx"
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "SF_Notify_Receive", "NotifySingle", -1, -1, true
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eDynamic
        },
        new System.Type[] {
            typeof(SBA.ETRANObligation.Logic.SFNotificationSinglePortType),
            typeof(SBA.ETRANObligation.Logic.ETRANOriginatePortType)
        },
        new System.String[] {
            "SF_Notify_Receive",
            "ETran_Originate3_Port"
        },
        new System.Type[] {
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
            typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce),
            typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce),
            typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce),
            typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce),
            typeof(SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Query_NoParm),
            typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce),
            typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce),
            typeof(SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___All),
            typeof(SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate),
            typeof(SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Save),
            typeof(SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___StatusUpdate),
            typeof(SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate),
            typeof(SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate),
            typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce)
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class ETRANObligationLogic : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eHasRequestResponse
,
            new System.String[] {
                "SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce",
                "SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce",
                "SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce",
                "SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce",
                "SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Query_NoParm",
                "SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce",
                "SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce",
                "SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___All",
                "SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate",
                "SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Save",
                "SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___StatusUpdate",
                "SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate",
                "SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate",
                "SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce"
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(ETRANObligationLogic));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static ETRANObligationLogic()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 2, 3),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment4), 1, 3, 4),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment5), 1, 4, 5),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment6), 1, 3, 6),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment7), 1, 5, 7),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment8), 1, 6, 8),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment9), 1, 7, 9),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment10), 1, 7, 10),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment11), 1, 8, 11),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment12), 1, 9, 12),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment13), 1, 9, 13),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment14), 1, 10, 14),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment15), 1, 10, 15),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment16), 1, 10, 16),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment17), 1, 10, 17),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment18), 1, 11, 18),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment19), 1, 11, 19),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment20), 1, 12, 20),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment21), 1, 12, 21),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment22), 1, 5, 22),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment23), 1, 13, 23),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment24), 1, 13, 24),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment25), 1, 14, 25),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment26), 1, 15, 26),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment27), 1, 15, 27),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment28), 1, 14, 28)
            };

            _Locks = 1;
            _rootContext = new __ETRANObligationLogic_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[30];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public ETRANObligationLogic(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "ETRANObligationLogic", tracker)
        {
            ConstructorHelper();
        }

        public ETRANObligationLogic(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "ETRANObligationLogic")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>8d461852-8edc-4096-8b1a-5ba0da660b79</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>9d0008fa-a18c-4e0b-8f12-b80439b3a24a</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Get SF Notify</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>0aaf36ae-98b8-4284-8f65-e457a7ff8189</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Failsafe Var Init</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>e0237d5f-9e91-432a-b6d3-436fe075004f</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Canonical Create Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>840dcd91-eaf0-4fef-b49f-2e63ab6264c4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>f2569e3d-c6ea-4789-ba71-4b5a4dea66c1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Initial Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>983c0e23-016f-483f-8eec-6715262fd772</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map Notification to Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>10e50599-c00c-4244-9a09-3ef1deacbfa5</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_21</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>85363015-61b0-4e07-af36-8ee814b34519</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_22</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>0a279e41-69b3-4998-a964-7fe1a0283bac</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Context +</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>7d22b494-0600-44d0-b6d6-0219c37ef98c</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>b576ad87-e8cb-47c5-b385-e393f8ccd379</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception - Canonical</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>0cc5dfb1-3923-4d60-941c-544103c65360</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Set TempEx</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>276237f5-fb5c-4124-9d37-363a5c3504f0</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>c9996409-6886-4ce4-a06c-2db0459029da</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>AppNum/LoanId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>624f488d-f8c9-440a-9546-265b7d0d8d0a</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>d62ca653-63c1-4057-8f7e-1bba844bb410</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Have App Num? </shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>16f2881d-cb91-4bb7-8739-3e8ace1c31b4</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>8ffcde6b-deab-4727-aa1e-620e510b88f1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>374f6aff-e66f-455b-886d-2fb70f7382f2</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>18b304bd-8006-4618-94d8-047a236a90a2</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>9a2d4039-6795-4c95-a2ad-8576739794f7</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>641869bb-d574-406c-9abb-6f61df75299f</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>52fe0d36-929e-4baa-a535-60ff6f7ea84e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>16ecc4b9-99c4-4faa-bdeb-8a683e4a3f4c</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>58dfba93-ff0e-4a62-a3b9-40da4d748519</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>de784b1c-4679-42b8-be40-78200db3cfaf</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>AutoDeclineReason</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>fcfdad9f-1541-4b4f-823c-381802462b4c</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>d175d4e3-3238-45f9-ae24-e672e2963e26</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>System Log</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>57bb9b05-9072-4f5f-8a44-71ae062f3aba</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>f79bd841-98c3-4431-857b-85e9e0161f9e</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>ETran Transport Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>60ceafe2-aa08-4f7f-aa71-c2751e3f0c08</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ETran Obligation Transport</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>43a301d5-3a97-440b-b823-4a72fc0b18b0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create ETran Transport</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>fb78599a-d734-4d82-9f0c-33766edd9bb2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make ETran Transport</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>031c655c-13e1-4477-83a0-348cf32f0b56</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallRulesShape</shapeType>      <ShapeID>3b6dc529-7bda-4c5e-aac5-ca18e70b400c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Transport BRE</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>RulesParameterRefShape</shapeType>      <ShapeID>de52f478-fe0a-4569-9647-96587a42a906</ShapeID>      <ParentLink>CallRules_RulesParameterRef</ParentLink>                <shapeText>RulesParameterRef_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>4a5e5973-9d2d-4255-97d0-27e470257923</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception - ETran Transport</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>a3740ab7-3ebe-4f03-bb53-5d0245dbc95c</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Set TempEx</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>068ff41a-37dc-415c-93c1-4edba6f2d37d</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>6784a7f2-c680-4e88-bbe2-4b5147c2d625</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>AppNum/LoanId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>7c11a6ff-9510-4813-bbef-32f4f3034bf4</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>4096ab60-625a-4a28-98b1-094841915eec</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Have App Num? </shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>529b4540-6f40-4166-b839-730390e1ac11</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>a4b2cd04-93d4-444b-a5fa-85b4eb02112a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>d5e08f2a-77cb-46c2-91ba-caf19f854f7d</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>d9a996f3-aa43-481a-abeb-3669a48c0e38</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>f0bd6be9-a712-4f45-9a1d-ee9c2d8378ba</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>0f88d453-e5ea-415f-99ea-f31ec467fbc3</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>92ee83f3-4553-4e3e-ad4b-568ceabca4df</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>8f1b134e-c71f-4d26-bd3b-fb283d991dc0</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>84bfe990-e8b3-46d0-b1e7-c7364ae8a48a</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>ca6f720b-1927-4404-9f66-f077f9cdd09a</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>AutoDeclineReason</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>10f68846-7b3c-463e-af3e-3251caceea00</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>bd73c65e-a7a0-43c5-8520-8ed52091b335</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>System Log</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>d4a91e07-74db-40db-baa3-81c73e150e76</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>64b6ac8b-3e7c-43ab-ae82-48f889fc141a</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Single Notification Processing</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>3e47ceca-c5a8-4d6b-a803-a598cf34c11d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Loan/App Id</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>e2c77bf6-1db4-4dcf-aaae-c3680107e401</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ETran Credentials</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>3831c9ab-fbd1-4ee1-b592-1d6d12ed84a2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create ETran Creds</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>d8492f0d-a326-4523-a6fc-97a01b80c499</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Embedded</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>80c1bb70-0706-4ee8-b8a6-6ab6455c8c33</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallRulesShape</shapeType>      <ShapeID>bdd6012b-1087-4e44-ba7f-0312abac20a8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ETran Creds BRE</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>RulesParameterRefShape</shapeType>      <ShapeID>34ad5630-5285-4831-87aa-01d331114f37</ShapeID>      <ParentLink>CallRules_RulesParameterRef</ParentLink>                <shapeText>RulesParameterRef_2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>4b6f1d86-efa3-4eff-adc9-e015a977271c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ETran Credentials Missing?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>a433f13b-663c-498d-a459-ecc13083118d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>4920ab8d-83db-4928-b418-b8cfbf860e2d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>cebbaaaf-24ac-4e1f-8bf9-8376bc876747</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>f5925138-6e24-476f-81c0-0d2db02cf60f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>c8007ea8-6223-49ad-9a5a-ca4a2a5cfbcb</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>2e229c75-f654-4a74-a673-907e75ab8251</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>40bca1d3-8d50-4322-b783-95040d6ee452</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>80c0f13a-3f04-4d18-8d66-959c29b0d096</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>090da4e6-b9a5-4e32-b761-7a659b82c728</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>c980fbab-7fcb-43f3-b6be-89657730a5a4</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>47245486-512b-4177-9926-d63f6f2d6696</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>0475c27f-ed2f-4550-8e4b-bc93e23a10a4</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>AutoDeclineReason</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>77c0a15d-7bd6-4fd4-b204-1994d509ca28</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>b0f445bf-e79f-41c3-8993-a35a2fc220e8</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>3ae09513-5ee6-474e-b41a-70ec64dd551f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ETRAN Originate App Defaults</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>3fee5f1c-3795-4ed1-836e-9915ae0c0344</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create App Defaults</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>5245f02b-8dca-49e0-90dd-a0f4cd20b6c3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make App Defaults</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>34891d69-5851-4a92-86c4-28e393c540c3</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_57</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>f07cb818-70f7-4dab-8696-177dde30bed1</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_58</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>c4509192-96da-4cd4-8da2-56573eb3528e</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>d29d8683-8cd1-434c-a6a7-e29432bf6988</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Temp Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>feeb3126-f927-4162-b232-eeb05f83f1b8</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>27fc3ef8-4a8f-4bf6-bc35-6e8ad58594a8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Copy Canonical</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>80db332f-78c8-4678-a81a-d428b3ed3072</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Canonical - ETRAN Originate App Defaults</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>fb52680b-5221-4e54-a6f0-bd0bfbf8a058</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map ETRAN Originate App Defaults</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>7616eb29-5c54-456a-ba0d-f3ddf1a43d93</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_50</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>6e4e251e-a62f-48e6-9e05-79832e9caa00</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_59</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>674e2e83-96b6-4ccd-8b7d-bcb30b53361b</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_51</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>f9bdc320-ca7a-4ac6-b001-3fe24491c175</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Context</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>bed895ee-c52d-43e2-bde4-a79bd98e184e</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>50fbfe01-bccb-47ed-85b9-212cb7f7abea</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Defaults Loaded OK? </shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>d8b107e7-e439-4c9b-8b4d-df443ffd42c9</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>db963cc5-2005-4ca0-961c-cb44ceb37ae3</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>c9539a2a-6c1e-436e-adce-d54b765a367e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>9ce6607c-e910-4a67-88e1-b1bea3fbfd37</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>704c4ca9-a261-4845-969a-536ff4c196b4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>df7e5b4b-4309-4aa4-8603-7323c9ca930d</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e7e9eac6-6c6a-455e-974c-bee412a3cfcf</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e7ffcd18-0c01-4f11-bc3b-506f22f8ae90</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>acd995a5-1d3e-4b79-8a27-f0add48a5324</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e07fc87e-fd0d-41c4-9a6a-58244ada0336</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>353a8254-76eb-42c0-951a-e010b8d7c322</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>127b8e01-5ac8-4c26-b3af-d0dbca987461</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>aa91f72a-236e-429a-9025-1fbba4fe5241</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>AutoDeclineReason</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>3fb6c8a2-fb76-424d-b781-f9c6aae9efc5</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>f4f2c119-58ac-4b7d-bdb0-e6027b08a512</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Salesforce Multi Query</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>cdada8af-e48a-4580-8c6a-5d6721ba9454</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Build &amp; Merge Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>efc5efb9-cf2f-44a6-96f2-9dcf98f1f335</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create SF Multi Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>e922adf9-6c15-4b12-8225-2c057bb78fa2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map SF Multi Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>a2ea0759-b3b2-41d2-a146-0ce837bd0708</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_30</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>75f2c377-a321-4a3c-92c2-1d3f28fca4c8</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_31</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>8b3d4013-d0fc-4595-b799-edbb74b307a0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get SOQL</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>d18b8240-f761-4fdf-8b20-e6502090420c</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>7a7e9d7c-8c9b-472b-8ea8-01696b8dccd2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Temp Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>3743c799-5213-4c48-ab1e-b87470f06063</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>b64d860c-8b43-4af2-bd64-75463cbd7232</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Copy Canonical</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>12878e4c-18b6-43d2-9a10-0d15a5b4b268</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create Canonical - Multi Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>42fa2a8a-bbb7-411a-ad48-16c4983ff60d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map SF Multi Request To Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>924bae85-df9c-402c-9d0b-443f4e5f04b8</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_35</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>6609024a-0776-43e0-b10b-2aff9f308848</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_36</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>1b897e60-e91c-4a0f-bb68-231e24f62024</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_37</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>27074f1a-c3ba-4b60-a934-b537b2d27118</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>a92f17e3-4625-40e6-8d6c-8f81b2480390</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Init SF Query Result</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>12f346eb-bbea-466a-a515-be4f2b6829f3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Init SF Query Result</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>c293905e-7158-4919-be6f-d478df335d6e</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>2ca367f3-6579-4d2e-aa06-1853ffefc5ba</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>SF Multi Query Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>1093c121-d79b-429f-ab8b-bfab411f8558</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Multi Query</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e0e86f3d-2f53-442f-902b-2662b7e6d2b7</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>a7c96edb-6bf9-43d4-a231-916dade55980</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>ebc3f83b-3540-4739-9802-c9214e6e9cc5</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SFRestQueryResultMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>cc9149d5-e165-429e-a56c-11e77a313dcf</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SOQL</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>d4851353-2209-4626-a47a-4703a0bc7113</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception - SF Multi Query</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>454342e6-f97a-4b53-8f6f-8727574e2b55</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>76bd31f7-6ba7-42cb-b59a-33bc3749fdb2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Success?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>ca70645f-175c-4d70-af58-6aefeeed4e70</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>e3f207a8-6b58-460e-9c60-1e12c1af64d4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Merge Results</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>e58caa1f-d73f-416a-8ba5-059f3ba3d5ce</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create SF Multi Result</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>7098b66e-30c2-4018-a045-7764a4e07e05</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make SF Multi Result</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>7dfa5571-5bb9-492e-8e13-5fa677506862</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>0bcd248a-fedb-4439-aa51-4581bff7751d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Temp Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>68d7a3a4-ee03-480d-bb77-019909a539e5</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>25f19671-cbbb-41ab-9f54-3e5bfbc66825</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Copy Canonical</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>b33d192d-36a2-4d47-b36b-7c7cc9799a38</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create Canonical - Multi Result</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>ee1664a1-16c3-4c8a-a549-d00593b52937</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map SF Multi Result To Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>b62c0985-d423-42be-9290-f5958c7c96fb</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_32</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>ff501738-2cdf-4695-8efa-bfa9226d6e91</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_33</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>24a77963-2795-4466-8773-1a944714713a</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_34</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>6291d991-f794-4dd2-86cf-0b74c3c81356</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>57c73e15-9534-43bf-9843-1de41110150e</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>e5a633d9-a082-436c-a7ce-13e561390a86</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Handle Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>a864eb7c-d233-4f39-9203-f1c1904d6cda</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>a432802b-c350-4eda-8ab0-4c05ab0efbd6</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6ce20f9a-70c5-4850-bf3e-3476268117b8</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>2a362eab-58e1-4609-8b4a-30a9fc66ed41</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6187d193-febc-46aa-84c4-f2046f714d1e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e5e68e03-2609-414a-a799-9827d0b2a338</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>08512a1c-f388-41f2-91cc-3348c117a12f</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>757e21bf-7af6-4212-b2d7-d15d24b7b62e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>b9026335-fa64-4f9e-af07-843b69be66b0</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>a95be5de-9185-4d4f-90ce-20a91292571f</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>AutoDeclineReason</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>2cdb7967-f371-4f6c-bfd7-47aaeeae9669</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>f0381a1a-ad78-4b9a-a85a-13bea100c96a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Validate Salesforce Information</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>8ae31e70-1bef-486e-ab64-743b1eafee99</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Application Check</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>9b24f1ea-9f6d-4252-a5ae-ef5f5b8da25c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Is Application OK?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>e1d66025-9845-476b-a182-0e9298075bc4</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>6d80ef3e-768a-4c96-abce-67b3596c3446</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>FEMA Reg Num</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>14a2412e-b37b-4368-a628-e824757f8128</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>2cf301f0-2c5a-4b29-8f72-11f438e24a2e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>b0032d13-3618-4ca2-8ac7-c60557774143</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Success?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>95c4c3f9-da7d-47bb-85b7-2ecada6bd663</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>a9d03c4c-2f9c-425c-b405-d645e4f09f6c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Property Check</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>8666dd9d-9e1e-414e-8382-2c3e9cec88d1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Prop Id</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>521e77b9-757a-43c7-b376-cd4f6326f647</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Is Property OK?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>73829f77-6eaa-48c8-93e0-c6b09f07128b</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>2ff07492-88e8-4722-9d6f-fd024bd35eca</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>5d548c04-68b5-46e3-8e6d-d3bee9418c4d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>89a5973e-28e6-431d-bc7b-0868428d9b6b</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>8fb70f73-141c-4fbd-a372-4fb3f1ae9e6d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Success?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>51a470ce-5aed-4b08-8986-0dc5dbbc17a5</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>bbe0b095-9dd6-4815-b660-5287a68cd056</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Applicant Check</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>75b494ee-b30c-494e-80bf-c139b90e019c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Apl Count</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>7a92d22b-aadb-445c-a886-0201148360aa</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Is Applicant(s) OK?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>c828878b-4372-4a34-96f0-89bced15c90c</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>6c7b7219-64c2-4d94-8d55-82367789de02</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>d6e94240-696e-4892-a3e6-bdf1a29c1e71</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>84bfc69f-fe9f-4bf7-831c-99e2b83b8e26</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>4ed55e4b-6692-43ca-9b79-4f2bcc5213cc</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Success?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>1ea4992f-1168-421d-b2fe-cef057d420a1</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>b87191ad-a660-435e-a2cb-a1fb30d03fdd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loan Check</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>52e6d3b2-e5f4-4e8d-bc18-a75e82006e2b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Is Loan OK?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>60fda2cf-89f0-446e-b236-aa7140e11cbb</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>7b83d8f9-f6d5-4934-a263-fad8f0da3a6e</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>9e148208-44ef-4cdc-a42c-9e416afcd572</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>d3f891b4-482b-4bc0-ac97-5b7d5604015a</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>13e77923-27b5-4ed5-bc22-24ebe4654e7b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Success?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>8736cd6a-872b-4872-b37e-7dc97e46773a</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>bc92e933-fc63-4e99-803d-983b7026a5e0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Disaster Check</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>6224a92c-8223-442f-8e52-b783fb9eeb2b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loan has Disaster? </shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>703051ba-781c-416d-b9d3-3580b288d8ef</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>cfe2bb5e-26dd-45c8-91ae-1de1fe5b497b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Have Disaster Number?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>efdf5d6b-cbdf-450b-aebf-6248ebedc327</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>1ac9ad1b-fc47-4b04-bbe9-0ab85a3f387b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Disaster Number</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>dd0e3145-78b7-4d91-baa7-b593e44d94cc</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>9b07ae96-effc-4118-80e7-f8b5eac607b0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BLANK Dis Num</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>1df972f7-33a7-4254-9109-a91fe38dafc6</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>b662e531-c1c7-443a-8683-af26cccfff37</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BLANK Dis Num</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>f589ad24-9c2f-4209-9e95-05c5cc80c469</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>aa969da3-eed4-48fa-9332-ec444cc95831</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Have Error(s)?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>9cd1656e-f6c0-40cc-9e50-8840d895f6a2</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>57c7ea08-f14b-41f8-b7e8-862ca33c2257</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Handle Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>dcacfe7e-1f73-44f1-a0b9-0a2022c7e7ae</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>dbb339c2-8150-4c63-8806-b255331757ca</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>ba236c1d-f0c5-4a56-8772-718b1e944206</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>262b88ae-9314-409a-960d-0b9fbfd47e83</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>71103717-3962-4ac2-9900-9c336d6c1146</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e1566b79-8577-4b4d-a4c6-a56fd1dc9d73</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>03a9931a-1291-499a-85ee-9b767b56c1f8</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>7c32df0f-20c1-4e3d-9327-f6cfb29b8986</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>7015e903-780a-4afb-944d-25f6bcbde88e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>8a5bf182-edc2-4aba-b019-571d34a18a87</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>AutoDeclineReason</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>28b6d666-93b4-41df-9f8d-602f8ba25659</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>23b2c17c-2a44-4451-b907-be7a18086c21</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>0071f020-905a-40f1-bed6-26e8cd631a6e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Borrower Business Types</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>b31ad991-4ba4-4540-8a32-4f4c43824b79</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Gather Applicant Business Types</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>44911854-955d-43bb-bfc6-6722f32d0395</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Temp Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>9fc63383-f05f-4d76-95c2-7d44bc5e37b0</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>fa68909e-f015-4840-981d-ccdb37827939</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Copy Canonical</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>5290e08f-80c7-436f-803c-b1315c3550e6</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create Canonical - Business Types</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>335b89f5-45e7-4d84-86dc-2d58e8a30475</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map Borrower Business Types to Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>74b6eee4-fe47-4b49-af5c-d82d378ac322</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_17</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>70113d3f-1e43-4b0f-9091-6335dc15d67d</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_18</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>dc069f79-824e-4f33-8ba4-5a0837d2ee7f</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>4826c5b0-3943-4325-9e4e-87f72c12ceb4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Bus Types</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>3d8828da-78a2-43c8-a377-2e57499bff91</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loop over Applicant Business Types</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>WhileShape</shapeType>      <ShapeID>337b1489-81fe-4c81-b643-325f915ce008</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Dedupe List to Dict</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>d65b5928-bbdd-4eb9-8a2a-9de3fcd344b1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Current</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>b0a9fff1-335e-44ca-8de1-7b948f7c9932</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Dict has Value?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>1d3b99b5-0dff-4a6d-ac19-4ae62a14ebca</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>8cbecb6c-c23d-4599-95a9-b641d07f2351</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>1d161741-6392-435f-a80e-89245fe63a9c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get ETRAN Code</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>e6594a9c-33bc-40dd-a68e-f76d62f4518c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Add to Dict</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>8cf8d7b6-59fd-4bef-9c0a-a8ad76673e47</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create Legal Org Type Mapping</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>1a32e13b-4930-458d-b397-535e330a75f9</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>34a45bba-d0f6-441b-8390-5e8294683ec1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Legal Org Type Mapping</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>12412404-137d-46f0-971b-720cffe24c18</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set SF Value</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallRulesShape</shapeType>      <ShapeID>12c21c0f-1403-44a1-8090-72ef0c71722d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BRE: Legal Org Types</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>RulesParameterRefShape</shapeType>      <ShapeID>dff95666-d455-4093-8c0b-ca7ac967c943</ShapeID>      <ParentLink>CallRules_RulesParameterRef</ParentLink>                <shapeText>RulesParameterRef_4</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>4ce034b6-731f-4da5-bf76-5e7aefe3c650</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Update Dict</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>77dc5d2b-3f68-42f9-af99-f47a3eade13f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map to Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>fdc2d8d0-0948-45a5-b78f-fb6623249aad</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Temp Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>395e7675-20ee-4b62-a85e-1fcd23db0560</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Copy Canonical</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>07bd7e02-614d-48da-9f60-8a4f6124525b</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>485be72b-d94c-42b5-9ceb-95af3a201160</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create Canonical - ETRAN Org Code</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>41d93f01-bd49-4b5b-91b4-ffc419a157a8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map Business Type To Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>0a04373d-bdae-40ad-9a9f-ef4decfb3fbf</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_11</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>e00eb1de-fb82-46e4-9f3e-ccb4adced2e1</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_16</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>d13682af-9475-4b84-979d-6c40d12d8840</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_19</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>a9e0b5a7-9503-45d2-82a6-b683a6451cf5</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>cb646f58-a905-46c7-8a84-edfd4161a8bc</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Increment</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>c944ba07-479f-4621-8706-0160d32a2890</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ETRAN Originate</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>aa8a2433-15c4-46f7-9543-53b72600abdd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create ETran App Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>80a6a119-7813-4e28-88ab-46a6630512c7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map ETRAN Originate App</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>3ed51e86-4cff-4345-8ee7-b62cf27c0771</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_3</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>76e8e3b6-9d45-40db-bcf7-4499b0a07f8e</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_4</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>202cb12a-a0bb-4da1-861f-44b3da2c6a86</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>200c79c9-76fb-4c38-9226-18d20f7d9594</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Request Xml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>e7a5b3a0-f285-4c8b-8eb2-1a3e8e2d7c3d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit - Initial Create</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>cde6f24c-94fc-4851-b2b8-d8e9dc9b0773</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Do BT Audit?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>9d3efb7e-820f-42dc-bb03-710a0514d95e</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>be1a9e2f-3546-4813-987a-bd850c28f69c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Initial Create Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>2495d267-9a74-48ab-9f30-a9989e2bb202</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get BT Audit</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>04a53283-43f1-4ee1-bfae-2c72db7ecda9</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit All</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>26239c45-485f-4756-b342-840abf3426d3</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6aa596fd-e727-4e8c-8869-ca52afbb5d27</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>5f1bfbfa-7cc9-405e-b531-789f0e777634</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ETranResponseXml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6bde3f77-71fe-4f0a-b71f-a5f234f193e0</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ETranRequestXml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>285d844b-ddb8-4fb3-a669-2ff5719b19a2</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ProcessStatusCode</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>b95666bd-6257-435e-a1bf-492b7843dfd4</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>fe782252-d6aa-4a28-9f24-c88457f8d0f5</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>InterfaceType</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>f9782dec-ce6d-4dce-98c2-04097421c7e2</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>FEMARegistrationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>40f607b9-40fa-4621-9e3d-5ac303e74803</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>FEMAEventCode</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>3915af25-16e9-4dc3-bf9e-d433e984f00e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DisasterNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>390cf243-8eaf-40f0-86fe-042e8801537f</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>3e338220-58d1-495a-92a8-0f0d8533113b</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>e5be2368-7319-4409-9bbc-e0514833f531</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Step</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>308dc554-dd96-4643-8e3d-7f75f2a89cb5</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception - BT Audit Initial</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>0ba01092-39a5-421c-a33c-0df2c6f11375</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>BT Audit Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>7f8e5ca0-4ac8-4253-bbdd-e38b3698d140</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Errors?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>c341ac28-1c1f-4de5-8198-7e32a0e768fe</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>e75d9761-3ecd-4aa6-a5f8-cd61936ca8e3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Silent Log</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>3fa57d06-8719-4230-bd14-a8874121fecb</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>f1476714-5330-404c-a85e-32e27433d71d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>c38b0c6a-bef9-4f76-bd04-22e4716b2935</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct ETRAN Originate Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>1c0f2bde-d4cb-4e35-b957-c7813b3252e2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map ETRAN Originate Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>de3f1841-c4d4-4f5d-b559-7d86768774a4</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_7</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>4aa35777-8c0d-45e0-b8df-a1969d279b98</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_49</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>9c6d8f89-1019-4279-9f50-330ba10ab587</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_8</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>ad9521cd-5727-40c6-af6c-f4d936be6881</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Transport</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>0a894b21-e17e-4392-9687-3c6d9b26f23c</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>b4d0474c-bf75-4063-ba60-381037091dd1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ETran Originate3 Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>6349357f-3bdb-445b-aff5-bd1df9fe9a96</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send ETRAN Originate Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>30ae5582-ae42-4403-ad5d-41fe457cb229</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get ETRAN Originate Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>42c9a161-5bdb-4211-b4d8-f5a78abb438d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Response Xml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>99906019-9683-41de-8764-abc3678057d9</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch CVCInvocationException</shapeText>                      <ExceptionType>ETran_Originate3_Port.Originate3.CVCInvocationException</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>b32dd36a-2ed2-4a9b-b92b-69e11a6d3c2d</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Create ETran Fault</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>06425e3e-d624-4501-8407-cd2c636ce7f1</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>96090c4c-5e94-497b-b747-1568d9d04b4d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make ETran Fault</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>a4bb8223-5e83-4177-92c6-9d04426e684f</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Response Xml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>f446587d-7c3e-4157-aa36-802d7a94c84e</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>d604f178-325b-4ee4-8ddc-c07d2e2a1208</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Create Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>eae34c24-eb36-41d5-93f5-5ce40bc41a62</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>591fad4c-2cdc-41f4-b0f6-fac517796dec</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_24</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>2f46d802-d859-4834-b985-09b2a92a4415</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_23</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>2a50ae98-feaa-4db6-a095-0db7bf13e858</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Context</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>636df783-e611-40b1-a03d-a2481ce1a18b</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>7d2fa022-4f17-4af1-806e-7cf284a6340a</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Fault_1_1</shapeText>                      <ExceptionType>ETran_Originate3_Port.Originate3.Fault_1_1</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>f623fa76-7b97-4f50-b2ff-a56dc9421539</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Create Fault 1_1</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>d17ca2e3-032c-4721-92f3-d2e007c83a24</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Fault 1_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>10a4b9ca-a450-4a1a-b5b3-84f5b46e93b6</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>480197e8-6c5c-49a2-800c-142b8d28e144</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Response Xml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>03144c18-b59b-466a-892c-184dc6bcfd35</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>18019260-298c-460c-9f58-2ae16cdaa7e4</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Create Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>9bfbf936-d273-4bdb-9974-249b20eef392</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>55576f5e-3435-45d2-81db-208167cd0618</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_6</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>6415a80c-46e1-456b-8711-79c92b6d0714</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_5</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>7b7f5fba-6ca2-4380-a560-974de1821da5</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Context</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>7afb7198-fe16-448a-993c-55a36e944ccd</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>cc6d81be-86bf-4968-8b73-f409f74af0fe</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Fault_1_2</shapeText>                      <ExceptionType>ETran_Originate3_Port.Originate3.Fault_1_2</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>98f13ef0-a950-4e36-945e-3f7e8bbca6a0</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Create Fault 1_2</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>765c5eff-d6a8-48da-b69f-2421dc70eec2</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>22518c7d-0630-4b29-b738-6fa19d979eb1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Fault 1_2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>0186d6ea-328e-46ef-9421-fc726aec3588</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Response Xml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>650e496e-914e-40e7-a2c6-9c545444dc55</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>b0fa6f71-8dea-45dd-8c08-002803563b39</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Create Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>570e2b2c-a0a5-469b-8867-76f066b4e1de</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>d9762081-a042-474d-b8a4-d31e776c9e7a</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_15</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>5942d182-68ac-4895-8c26-5db297f9e166</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_14</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>bfc6b945-03ed-436a-b171-020452c98447</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Context</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>0c38a45a-65ef-47c4-baff-5e7f8ce05bad</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>c4501d24-e757-4a56-8acd-3eb5eadc0651</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit - Response Update</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>30dc3b61-7116-469c-8506-ba23b61bf0f1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Do BT Audit &amp; Create Was Success?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>ccbbcdca-cc04-484c-88aa-ee61294f654f</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>f712dbeb-9d89-4737-8557-1145de70028f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Response Update Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>5bea8229-b7ea-4637-a557-b5cee6d72def</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get BT Audit</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>c3036ad5-ad94-4a0c-ab3a-69311289f7aa</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Response Update</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>02c450aa-8bd7-4361-bdeb-91ef5b3a41df</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ETranResponseXml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>4dcfce2f-637b-4d3c-acfb-7c3e4af757a7</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e56e071e-fca4-46ca-8140-a76ff83cc7ed</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>9c31ffa5-5b76-42d8-99ac-f6d2d731c36c</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>b5cbef6e-43ea-4846-b272-c5cc13d5867d</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ProcessStatusCode</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>745209b1-9002-4917-b07c-424c690a79b3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Step</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>61993345-8f02-4c4f-8b7a-7c87996eb345</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception - BT Audit Response</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>8591f6d3-56e0-4723-ac82-69699f3c8e33</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>BT Audit Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>74e015d6-3b7c-4992-901e-56d287f861c9</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Errors?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>f1c2b435-f60e-404d-a8c3-64ebed9d0557</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>57297fef-0f33-4f61-b3e6-5f02ac89f13e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Silent Log</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>514c3fac-2701-4c0a-81a5-20be53dc9280</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>0ec11361-864b-4850-bd5f-5e85abee775b</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>59b04336-ea71-4fc6-8858-1abbb269b940</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Temp Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>281afe3d-e653-4c3b-834d-0d1ce27c2168</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>47417190-a5a6-42db-a02e-bfba1552fa8f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Copy Canonical</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>6fd785fb-4a9c-4524-832c-028bc8d8a7d6</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Canonical - ETRAN Originate</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>aa951222-50f1-4b8a-b0cc-3f7ef31bc508</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>c2a831e3-fb8e-404c-bb10-433a158b372e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map ETRAN Originate Response to Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>80f4b0c5-ec60-4bb6-95a3-c1afe8bd22e5</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_45</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>fd3c287c-cc49-4526-83db-58fe4d909d4c</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_46</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>04e1ff3e-6a05-41c0-8eef-3bbf12995b00</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_47</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>5ee431f4-422d-456b-9bea-7da152f086fa</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Context</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>c1f31b98-9531-457a-b4e1-b587a32a3ddd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event_Request__c Info</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>9d3c1a15-00f3-4942-95cc-111b1506ef9a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Temp Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>68cd5629-edf7-479e-9335-0767c21a2c57</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Assign Canonical to Temp</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>dfbe59b4-5642-4e6d-bdd4-8745018741fe</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>52f4e19b-7488-4125-b79c-f288ecdbd7aa</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Final Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>48c3c631-fb8f-4cc3-9411-78035d8c41a1</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>d943fe17-bff7-4240-b9cf-b60c0ab170e0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map Final Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>f6a4f1e1-8704-47b6-9f05-332e1c7547dc</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_13</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>dbbfab3d-ebdf-4f90-86fc-b9c7e9887db9</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_12</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>58ae8d28-bd20-4ca1-93a8-f6673a64dee7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Context</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>407491ad-8e56-4849-b0a4-a2208446ab24</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Eval Success</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>23fe3f13-a120-4f74-9da3-c89630b8d5dd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loan Obligated Successfully?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>e00304fa-0328-4f16-b54c-ce4bdfa7159f</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Success</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>fad7893d-5970-460e-beff-21385a182ab7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Update Loan__c on Success</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>5632e4b5-8266-4067-9369-94760c8aa9e0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Loan__c Update</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>dd296099-da03-4f97-a433-216bed6e622f</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>861e285b-7bf9-4edd-85e0-0640d0a1493b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Loan__c Update</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>168c2e4d-c240-437b-b097-809a3e0b0df6</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_10</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>2b504df4-57ec-4957-a80b-9003bb74ad61</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_9</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>422224de-0a06-4a0e-9632-3bb098b5c287</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create SF Rest Save</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>e84ae361-8d4c-4fc2-88a5-63447777d6eb</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make SF Rest Save</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>23120262-3e16-4e3d-bd96-62258889ca73</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>0c7d3478-5311-49cf-86ec-ac720091a870</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Init SF Save Results</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>b718acb3-bc1a-4465-8a30-c14c67dc9212</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Init SF Save Results</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>c11a24d2-1e3c-4fcc-95d4-2f5e435cf612</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>8fe62c7e-9afd-4c62-b0b7-e42771c201b4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loan Update Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>b335a54e-2838-490d-a584-37dbc63de55c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loan Save</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>58c60cfe-0472-481c-8aa9-c99e8c47052a</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>ed6d2e5f-5677-4f8c-aafd-68c310b8c89e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SFRestSaveRequestMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>699f68a4-fcf2-4f17-8be1-39441beb7d7c</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SFRestSaveResultMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>fa2a2931-7ece-4686-9d7f-fa06325bd4a6</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>00850782-f21a-4da8-b87a-5abd98e80453</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception - Loan Update</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>8150612d-c260-416e-9be3-e3df0af996b7</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>670bf676-f1fe-46db-990a-51943a3c3165</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>bb4ae145-5705-4976-a112-c43506ebf7cc</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch SF Receive Notification Exception</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>60dfd91c-c834-4bc7-88b1-2db0cd8f6e35</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Set Ex</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>6bafd73a-30d8-4d91-b027-8cb61272aadd</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Get Error Info</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>e5496d1e-84b0-423e-96ec-725f8609b83e</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>f167b43f-4f35-4861-b466-7fc4bca40ee0</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Inner Catch Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>11d9a15e-bce9-4203-8248-c55798d1895a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Remake Canonical from Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>b753e454-865f-484c-ae2a-b5ce330b9b37</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create Temp Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>5543d446-50c9-4b09-b18a-6c0a66a461c3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Copy Canonical</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>8c639c3c-ea4d-4576-a6f9-9ba68b04756c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>+ Event Vals</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>7bc69149-4aa1-4b1e-af8d-bc1b98d5793c</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>b0d41c3b-cc89-4579-bd57-fd632d334092</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Create Error Canonical</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>df389394-3010-467b-94dd-58d90c25fa90</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Map Canonical from Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>edcb0c2d-650e-4f89-8dc1-32e96e34a747</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>24cf87a8-5341-47b6-b7c8-c9226815e817</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>3588fe90-ce32-45f6-a365-234a03ec9fcb</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Context</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>707f6253-f0d2-462e-a66c-20acb9501ee8</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>987a67db-f64d-4fbf-81f7-f8e5b0029f45</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get Error Info</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>39aab17a-7630-40cd-ad0b-689e778b1338</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>da32304a-a783-4f42-ab36-c56724b28685</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Inner Exception</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>30cab463-0479-46f1-b201-5b03d327eed3</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Set ExInner</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>093547c3-b764-4596-8e79-b94af878edc5</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Get Error Info</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>24b7ae04-28c2-4096-bc57-e639b68628a8</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>152c295c-bf84-4923-87ac-6a8ae210421e</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Event Logging Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>b9750666-c3d8-4729-9a47-79c1156ff4d6</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Final Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>f68c5698-56a3-459b-b280-d5cbb37ffc07</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Do BT Audit?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>d569ebc1-2d12-48cc-9de8-5bf93777ff93</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>444d0cc3-d6a3-418d-bca9-0c7d20bc15e3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Have BT Audit Id?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>c1285929-e04e-4d99-a2c2-59d642bc83c8</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>2c4afcef-ae24-458e-83c4-bfee70c40861</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>ETran Obligate Success?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>c8dfbc8a-5043-4d9a-8990-e37b6bcd6e26</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>53ab454a-2533-4f36-a914-ac4e5aae0d7a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get BT Audit</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>5b8aeca8-5807-4cec-8d49-72877d50cb01</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Response Already Logged?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>732322b9-4456-4ebd-a8e3-bf4c45656341</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>2645248b-f560-4578-bd2e-058fc864f744</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Status Update</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>48d23741-df99-49d4-878e-77840afaf04e</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>eefa62e5-06ce-4ca3-9a7c-6af96b445194</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>069d98bb-b27a-498d-ac92-722f92300fa2</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>d11ba45d-2e0d-41e9-a0ec-9723888be113</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ProcessStatusCode</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>1dde942c-12ae-40dd-9109-59be37ae4c15</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>fdf5a2a9-d29b-484e-a619-a470d4b3239d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Response Success</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>795e4fef-b23b-48f5-bc98-b26d9efc1e34</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ETranResponseXml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>afd3f764-3cbc-4b8c-9d9c-d192c8ff322c</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>77d0f80d-36db-4007-9081-a1025b9810cd</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>54bf56be-3d05-4b79-bd09-5e42fe5df165</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>873f8449-06cf-4e17-960b-31bfd8218364</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ProcessStatusCode</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>201a014b-eb98-4060-a340-5f174acec4fe</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>4bc3cf7b-7053-4551-a2ee-774bf06b49a8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Get BT Audit</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>dfec0ba2-1ce3-44c4-a4f0-2922b3e25d77</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Response Failure</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>081ca8e1-371a-4d83-a144-d4a9cf604efe</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ETranResponseXml</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>7d6624ab-5c87-4b44-81b5-061a98c557eb</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditMessage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>52a31272-bf5b-4d6d-b15e-6617a8d3642c</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>dc3c4d4e-dfa7-4de9-83b4-4046599fe1d1</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>BTAuditId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e0e79204-7768-4d58-81b7-259f89a63b3d</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ProcessStatusCode</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>bdf0f799-d64c-4155-9efe-2c29b521111d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>f4ea9e1c-5c66-4282-b345-8b1a464a1c40</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>158e1791-4874-4353-950f-b5034a342f18</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Errors?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>6e525c1f-f52d-42dc-848e-baa480eae189</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>7d9780d2-dbaf-4128-ac3a-d73a2098f8d8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Silent Log</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>29c664a9-e50b-4a75-bb11-2cdb6e39c28d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>22a359fa-7634-4abc-afe0-b66d46aad936</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>BT Audit Success?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>8b62d806-ad4a-4cd0-9718-598f1a67c2d1</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Yes</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>edd45601-45a3-4a67-a85d-74a0284ef2da</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>6d9a00c5-a436-4b4a-991f-0b895824c082</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>f1f69389-ee4b-40dd-9231-7fdec7500787</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception - BT Audit Final</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>daf797d7-5d9a-4fec-b12f-2bd91d8b3eda</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Silent Log</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>b92652bf-8041-4cb8-8a20-f9525f16d87c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Event Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>c555e89e-a5fc-4587-86ea-4ff11b12e0d4</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>c5521243-3f5e-4434-ae71-51aba51782d2</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>453e0fec-9a93-4554-9f1f-8892ed47d388</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>09f1f6b2-0418-4e9b-92f8-e837775cf686</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>08ead32f-0ff3-4013-835e-d540bb41518d</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>f21562dc-d163-4863-9299-66de45bcb741</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesforceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>d9a6be28-f173-4ea5-a5b5-42327fc4cbc7</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>99badebc-cbc2-4328-9cbd-1963857fea46</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>AutoDeclineReason</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>f15fc139-dd14-42f9-8ea4-bf8755cf8572</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>Catch Exception - Event Logging</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>52fd919e-1ceb-4ef2-85dc-9eea433fe2d6</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Error Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>6744c0f4-42fd-4e6b-a3a4-4437ee5546c1</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Truncate Error</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>59ba1990-74cc-4fe1-b652-47b4c45e85e0</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>System Log</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>84fe56d2-8e9a-4318-8b83-b916d7592992</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'ETRANObligationLogic'</ActionName><IsAtomic>0</IsAtomic><Line>3819</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>3886</Line><Position>22</Position><ShapeID>'9d0008fa-a18c-4e0b-8f12-b80439b3a24a'</ShapeID>
<Messages>
	<MsgInfo><name>SFNotificationSingleMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationSingle</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3924</Line><Position>41</Position><ShapeID>'0aaf36ae-98b8-4284-8f65-e457a7ff8189'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope49'</ActionName><IsAtomic>0</IsAtomic><Line>3952</Line><Position>13</Position><ShapeID>'e0237d5f-9e91-432a-b6d3-436fe075004f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3957</Line><Position>21</Position><ShapeID>'f2569e3d-c6ea-4789-ba71-4b5a4dea66c1'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>SFNotificationSingleMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationSingle</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3971</Line><Position>21</Position><ShapeID>'b576ad87-e8cb-47c5-b385-e393f8ccd379'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3974</Line><Position>28</Position><ShapeID>'0cc5dfb1-3923-4d60-941c-544103c65360'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3977</Line><Position>33</Position><ShapeID>'276237f5-fb5c-4124-9d37-363a5c3504f0'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3981</Line><Position>43</Position><ShapeID>'c9996409-6886-4ce4-a06c-2db0459029da'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3984</Line><Position>25</Position><ShapeID>'624f488d-f8c9-440a-9546-265b7d0d8d0a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3988</Line><Position>25</Position><ShapeID>'d62ca653-63c1-4057-8f7e-1bba844bb410'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3991</Line><Position>105</Position><ShapeID>'8ffcde6b-deab-4727-aa1e-620e510b88f1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3996</Line><Position>67</Position><ShapeID>'d175d4e3-3238-45f9-ae24-e672e2963e26'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3999</Line><Position>25</Position><ShapeID>'57bb9b05-9072-4f5f-8a44-71ae062f3aba'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope50'</ActionName><IsAtomic>0</IsAtomic><Line>4004</Line><Position>13</Position><ShapeID>'f79bd841-98c3-4431-857b-85e9e0161f9e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4009</Line><Position>21</Position><ShapeID>'43a301d5-3a97-440b-b823-4a72fc0b18b0'</ShapeID>
<Messages>
	<MsgInfo><name>ETranObligationTransportMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Rules.ETranObligationTransport</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope51'</ActionName><IsAtomic>0</IsAtomic><Line>4019</Line><Position>21</Position><ShapeID>'3b6dc529-7bda-4c5e-aac5-ca18e70b400c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4045</Line><Position>21</Position><ShapeID>'4a5e5973-9d2d-4255-97d0-27e470257923'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4048</Line><Position>28</Position><ShapeID>'a3740ab7-3ebe-4f03-bb53-5d0245dbc95c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4051</Line><Position>33</Position><ShapeID>'068ff41a-37dc-415c-93c1-4edba6f2d37d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4056</Line><Position>43</Position><ShapeID>'6784a7f2-c680-4e88-bbe2-4b5147c2d625'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4059</Line><Position>25</Position><ShapeID>'7c11a6ff-9510-4813-bbef-32f4f3034bf4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4063</Line><Position>25</Position><ShapeID>'4096ab60-625a-4a28-98b1-094841915eec'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4066</Line><Position>105</Position><ShapeID>'a4b2cd04-93d4-444b-a5fa-85b4eb02112a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4071</Line><Position>67</Position><ShapeID>'bd73c65e-a7a0-43c5-8520-8ed52091b335'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4074</Line><Position>25</Position><ShapeID>'d4a91e07-74db-40db-baa3-81c73e150e76'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope52'</ActionName><IsAtomic>0</IsAtomic><Line>4079</Line><Position>13</Position><ShapeID>'64b6ac8b-3e7c-43ab-ae82-48f889fc141a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4086</Line><Position>39</Position><ShapeID>'3e47ceca-c5a8-4d6b-a803-a598cf34c11d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4093</Line><Position>21</Position><ShapeID>'3831c9ab-fbd1-4ee1-b592-1d6d12ed84a2'</ShapeID>
<Messages>
	<MsgInfo><name>ETranCredentials</name><part>MessagePart</part><schema>SBA.ETRAN.Shared.Definition.ETranCredentials</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope53'</ActionName><IsAtomic>0</IsAtomic><Line>4103</Line><Position>21</Position><ShapeID>'bdd6012b-1087-4e44-ba7f-0312abac20a8'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4126</Line><Position>21</Position><ShapeID>'4b6f1d86-efa3-4eff-adc9-e015a977271c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4132</Line><Position>33</Position><ShapeID>'4920ab8d-83db-4928-b418-b8cfbf860e2d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4144</Line><Position>25</Position><ShapeID>'cebbaaaf-24ac-4e1f-8bf9-8376bc876747'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4148</Line><Position>101</Position><ShapeID>'f5925138-6e24-476f-81c0-0d2db02cf60f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4150</Line><Position>25</Position><ShapeID>'77c0a15d-7bd6-4fd4-b204-1994d509ca28'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4153</Line><Position>21</Position><ShapeID>'3fee5f1c-3795-4ed1-836e-9915ae0c0344'</ShapeID>
<Messages>
	<MsgInfo><name>ETRANOriginateAppDefaultsMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN_Originate.ETRANOriginateAppDefaults</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4159</Line><Position>21</Position><ShapeID>'d29d8683-8cd1-434c-a6a7-e29432bf6988'</ShapeID>
<Messages>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4166</Line><Position>21</Position><ShapeID>'80db332f-78c8-4678-a81a-d428b3ed3072'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
	<MsgInfo><name>ETRANOriginateAppDefaultsMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN_Originate.ETRANOriginateAppDefaults</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4174</Line><Position>21</Position><ShapeID>'50fbfe01-bccb-47ed-85b9-212cb7f7abea'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4208</Line><Position>32</Position><ShapeID>'c9539a2a-6c1e-436e-adce-d54b765a367e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4217</Line><Position>25</Position><ShapeID>'9ce6607c-e910-4a67-88e1-b1bea3fbfd37'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4221</Line><Position>101</Position><ShapeID>'704c4ca9-a261-4845-969a-536ff4c196b4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4223</Line><Position>25</Position><ShapeID>'3fb6c8a2-fb76-424d-b781-f9c6aae9efc5'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4226</Line><Position>21</Position><ShapeID>'efc5efb9-cf2f-44a6-96f2-9dcf98f1f335'</ShapeID>
<Messages>
	<MsgInfo><name>SFMultiQueryRequestMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query+Request</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4238</Line><Position>21</Position><ShapeID>'7a7e9d7c-8c9b-472b-8ea8-01696b8dccd2'</ShapeID>
<Messages>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4245</Line><Position>21</Position><ShapeID>'12878e4c-18b6-43d2-9a10-0d15a5b4b268'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
	<MsgInfo><name>SFMultiQueryRequestMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query+Request</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4251</Line><Position>21</Position><ShapeID>'a92f17e3-4625-40e6-8d6c-8f81b2480390'</ShapeID>
<Messages>
	<MsgInfo><name>SFRestQueryResultMsg</name><part>MessagePart</part><schema>SBA.BizTalk.Shared.Salesforce.RestApi.Definition.Response.QueryResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope54'</ActionName><IsAtomic>0</IsAtomic><Line>4261</Line><Position>21</Position><ShapeID>'2ca367f3-6579-4d2e-aa06-1853ffefc5ba'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4266</Line><Position>99</Position><ShapeID>'1093c121-d79b-429f-ab8b-bfab411f8558'</ShapeID>
<Messages>
	<MsgInfo><name>SFRestQueryResultMsg</name><part>MessagePart</part><schema>SBA.BizTalk.Shared.Salesforce.RestApi.Definition.Response.QueryResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4271</Line><Position>29</Position><ShapeID>'d4851353-2209-4626-a47a-4703a0bc7113'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4274</Line><Position>40</Position><ShapeID>'454342e6-f97a-4b53-8f6f-8727574e2b55'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4284</Line><Position>21</Position><ShapeID>'76bd31f7-6ba7-42cb-b59a-33bc3749fdb2'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4287</Line><Position>25</Position><ShapeID>'e58caa1f-d73f-416a-8ba5-059f3ba3d5ce'</ShapeID>
<Messages>
	<MsgInfo><name>SFMultiQueryResultMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query+QueryResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4298</Line><Position>25</Position><ShapeID>'0bcd248a-fedb-4439-aa51-4581bff7751d'</ShapeID>
<Messages>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4305</Line><Position>25</Position><ShapeID>'b33d192d-36a2-4d47-b36b-7c7cc9799a38'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
	<MsgInfo><name>SFMultiQueryResultMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query+QueryResult</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4315</Line><Position>25</Position><ShapeID>'a864eb7c-d233-4f39-9203-f1c1904d6cda'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4319</Line><Position>101</Position><ShapeID>'a432802b-c350-4eda-8ab0-4c05ab0efbd6'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4321</Line><Position>25</Position><ShapeID>'2cdb7967-f371-4f6c-bfd7-47aaeeae9669'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4324</Line><Position>21</Position><ShapeID>'9b24f1ea-9f6d-4252-a5ae-ef5f5b8da25c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4330</Line><Position>25</Position><ShapeID>'6d80ef3e-768a-4c96-abce-67b3596c3446'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4340</Line><Position>32</Position><ShapeID>'2cf301f0-2c5a-4b29-8f72-11f438e24a2e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4351</Line><Position>21</Position><ShapeID>'b0032d13-3618-4ca2-8ac7-c60557774143'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4354</Line><Position>39</Position><ShapeID>'8666dd9d-9e1e-414e-8382-2c3e9cec88d1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4359</Line><Position>25</Position><ShapeID>'521e77b9-757a-43c7-b376-cd4f6326f647'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4365</Line><Position>36</Position><ShapeID>'5d548c04-68b5-46e3-8e6d-d3bee9418c4d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4373</Line><Position>21</Position><ShapeID>'8fb70f73-141c-4fbd-a372-4fb3f1ae9e6d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4376</Line><Position>39</Position><ShapeID>'75b494ee-b30c-494e-80bf-c139b90e019c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4380</Line><Position>25</Position><ShapeID>'7a92d22b-aadb-445c-a886-0201148360aa'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4386</Line><Position>36</Position><ShapeID>'d6e94240-696e-4892-a3e6-bdf1a29c1e71'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4394</Line><Position>21</Position><ShapeID>'4ed55e4b-6692-43ca-9b79-4f2bcc5213cc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4397</Line><Position>25</Position><ShapeID>'52e6d3b2-e5f4-4e8d-bc18-a75e82006e2b'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4408</Line><Position>36</Position><ShapeID>'9e148208-44ef-4cdc-a42c-9e416afcd572'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4422</Line><Position>21</Position><ShapeID>'13e77923-27b5-4ed5-bc22-24ebe4654e7b'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4425</Line><Position>25</Position><ShapeID>'6224a92c-8223-442f-8e52-b783fb9eeb2b'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4429</Line><Position>29</Position><ShapeID>'cfe2bb5e-26dd-45c8-91ae-1de1fe5b497b'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4432</Line><Position>48</Position><ShapeID>'1ac9ad1b-fc47-4b04-bbe9-0ab85a3f387b'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4437</Line><Position>48</Position><ShapeID>'9b07ae96-effc-4118-80e7-f8b5eac607b0'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4443</Line><Position>44</Position><ShapeID>'b662e531-c1c7-443a-8683-af26cccfff37'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4447</Line><Position>21</Position><ShapeID>'aa969da3-eed4-48fa-9332-ec444cc95831'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4451</Line><Position>25</Position><ShapeID>'dcacfe7e-1f73-44f1-a0b9-0a2022c7e7ae'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4455</Line><Position>101</Position><ShapeID>'dbb339c2-8150-4c63-8806-b255331757ca'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4457</Line><Position>25</Position><ShapeID>'28b6d666-93b4-41df-9f8d-602f8ba25659'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4460</Line><Position>21</Position><ShapeID>'44911854-955d-43bb-bfc6-6722f32d0395'</ShapeID>
<Messages>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4467</Line><Position>21</Position><ShapeID>'5290e08f-80c7-436f-803c-b1315c3550e6'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4474</Line><Position>31</Position><ShapeID>'4826c5b0-3943-4325-9e4e-87f72c12ceb4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4480</Line><Position>21</Position><ShapeID>'337b1489-81fe-4c81-b643-325f915ce008'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4483</Line><Position>42</Position><ShapeID>'d65b5928-bbdd-4eb9-8a2a-9de3fcd344b1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4485</Line><Position>25</Position><ShapeID>'b0a9fff1-335e-44ca-8de1-7b948f7c9932'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4491</Line><Position>47</Position><ShapeID>'e6594a9c-33bc-40dd-a68e-f76d62f4518c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4493</Line><Position>29</Position><ShapeID>'8cf8d7b6-59fd-4bef-9c0a-a8ad76673e47'</ShapeID>
<Messages>
	<MsgInfo><name>LegalOrgTypeMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope55'</ActionName><IsAtomic>0</IsAtomic><Line>4507</Line><Position>29</Position><ShapeID>'12c21c0f-1403-44a1-8090-72ef0c71722d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4530</Line><Position>55</Position><ShapeID>'4ce034b6-731f-4da5-bf76-5e7aefe3c650'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4532</Line><Position>29</Position><ShapeID>'fdc2d8d0-0948-45a5-b78f-fb6623249aad'</ShapeID>
<Messages>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4539</Line><Position>29</Position><ShapeID>'485be72b-d94c-42b5-9ceb-95af3a201160'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
	<MsgInfo><name>LegalOrgTypeMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4546</Line><Position>48</Position><ShapeID>'cb646f58-a905-46c7-8a84-edfd4161a8bc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4549</Line><Position>21</Position><ShapeID>'aa8a2433-15c4-46f7-9543-53b72600abdd'</ShapeID>
<Messages>
	<MsgInfo><name>ETRANOriginateAppMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_5_0_orig</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4555</Line><Position>37</Position><ShapeID>'200c79c9-76fb-4c38-9226-18d20f7d9594'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4557</Line><Position>21</Position><ShapeID>'cde6f24c-94fc-4851-b2b8-d8e9dc9b0773'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope56'</ActionName><IsAtomic>0</IsAtomic><Line>4560</Line><Position>25</Position><ShapeID>'be1a9e2f-3546-4813-987a-bd850c28f69c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4565</Line><Position>51</Position><ShapeID>'2495d267-9a74-48ab-9f30-a9989e2bb202'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4567</Line><Position>91</Position><ShapeID>'04a53283-43f1-4ee1-bfae-2c72db7ecda9'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4569</Line><Position>54</Position><ShapeID>'e5be2368-7319-4409-9bbc-e0514833f531'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4574</Line><Position>33</Position><ShapeID>'308dc554-dd96-4643-8e3d-7f75f2a89cb5'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4577</Line><Position>51</Position><ShapeID>'0ba01092-39a5-421c-a33c-0df2c6f11375'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4584</Line><Position>25</Position><ShapeID>'7f8e5ca0-4ac8-4253-bbdd-e38b3698d140'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4587</Line><Position>44</Position><ShapeID>'e75d9761-3ecd-4aa6-a5f8-cd61936ca8e3'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4598</Line><Position>21</Position><ShapeID>'c38b0c6a-bef9-4f76-bd04-22e4716b2935'</ShapeID>
<Messages>
	<MsgInfo><name>ETRANOriginateRequestMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Request</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>ETRANOriginateAppMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_5_0_orig</schema><direction>In</direction></MsgInfo>
	<MsgInfo><name>ETranCredentials</name><part>MessagePart</part><schema>SBA.ETRAN.Shared.Definition.ETranCredentials</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope57'</ActionName><IsAtomic>0</IsAtomic><Line>4636</Line><Position>21</Position><ShapeID>'b4d0474c-bf75-4063-ba60-381037091dd1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4641</Line><Position>29</Position><ShapeID>'6349357f-3bdb-445b-aff5-bd1df9fe9a96'</ShapeID>
<Messages>
	<MsgInfo><name>ETRANOriginateRequestMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Request</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4643</Line><Position>29</Position><ShapeID>'30ae5582-ae42-4403-ad5d-41fe457cb229'</ShapeID>
<Messages>
	<MsgInfo><name>ETRANActualResponseMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4645</Line><Position>46</Position><ShapeID>'42c9a161-5bdb-4211-b4d8-f5a78abb438d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4651</Line><Position>29</Position><ShapeID>'99906019-9683-41de-8764-abc3678057d9'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4654</Line><Position>33</Position><ShapeID>'b32dd36a-2ed2-4a9b-b92b-69e11a6d3c2d'</ShapeID>
<Messages>
	<MsgInfo><name>ETranFaultMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3CFCInvocationException</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4662</Line><Position>50</Position><ShapeID>'a4bb8223-5e83-4177-92c6-9d04426e684f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4665</Line><Position>41</Position><ShapeID>'f446587d-7c3e-4157-aa36-802d7a94c84e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4669</Line><Position>33</Position><ShapeID>'d604f178-325b-4ee4-8ddc-c07d2e2a1208'</ShapeID>
<Messages>
	<MsgInfo><name>ETRANActualResponseMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>ETranFaultMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3CFCInvocationException</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4678</Line><Position>29</Position><ShapeID>'7d2fa022-4f17-4af1-806e-7cf284a6340a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4681</Line><Position>33</Position><ShapeID>'f623fa76-7b97-4f50-b2ff-a56dc9421539'</ShapeID>
<Messages>
	<MsgInfo><name>Fault1_1Msg</name><part>MessagePart</part><schema>BTS.soap_envelope_1__1+Fault</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4689</Line><Position>50</Position><ShapeID>'480197e8-6c5c-49a2-800c-142b8d28e144'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4692</Line><Position>41</Position><ShapeID>'03144c18-b59b-466a-892c-184dc6bcfd35'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4696</Line><Position>33</Position><ShapeID>'18019260-298c-460c-9f58-2ae16cdaa7e4'</ShapeID>
<Messages>
	<MsgInfo><name>ETRANActualResponseMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>Fault1_1Msg</name><part>MessagePart</part><schema>BTS.soap_envelope_1__1+Fault</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4705</Line><Position>29</Position><ShapeID>'cc6d81be-86bf-4968-8b73-f409f74af0fe'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4708</Line><Position>33</Position><ShapeID>'98f13ef0-a950-4e36-945e-3f7e8bbca6a0'</ShapeID>
<Messages>
	<MsgInfo><name>Fault1_2Msg</name><part>MessagePart</part><schema>BTS.soap_envelope_1__2+Fault</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4716</Line><Position>50</Position><ShapeID>'0186d6ea-328e-46ef-9421-fc726aec3588'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4719</Line><Position>41</Position><ShapeID>'650e496e-914e-40e7-a2c6-9c545444dc55'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4723</Line><Position>33</Position><ShapeID>'b0fa6f71-8dea-45dd-8c08-002803563b39'</ShapeID>
<Messages>
	<MsgInfo><name>ETRANActualResponseMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>Fault1_2Msg</name><part>MessagePart</part><schema>BTS.soap_envelope_1__2+Fault</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4734</Line><Position>21</Position><ShapeID>'30dc3b61-7116-469c-8506-ba23b61bf0f1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope58'</ActionName><IsAtomic>0</IsAtomic><Line>4737</Line><Position>25</Position><ShapeID>'f712dbeb-9d89-4737-8557-1145de70028f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4742</Line><Position>33</Position><ShapeID>'5bea8229-b7ea-4637-a557-b5cee6d72def'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4746</Line><Position>102</Position><ShapeID>'c3036ad5-ad94-4a0c-ab3a-69311289f7aa'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4748</Line><Position>54</Position><ShapeID>'745209b1-9002-4917-b07c-424c690a79b3'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4753</Line><Position>33</Position><ShapeID>'61993345-8f02-4c4f-8b7a-7c87996eb345'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4756</Line><Position>51</Position><ShapeID>'8591f6d3-56e0-4723-ac82-69699f3c8e33'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4763</Line><Position>25</Position><ShapeID>'74e015d6-3b7c-4992-901e-56d287f861c9'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4766</Line><Position>44</Position><ShapeID>'57297fef-0f33-4f61-b3e6-5f02ac89f13e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4777</Line><Position>21</Position><ShapeID>'59b04336-ea71-4fc6-8858-1abbb269b940'</ShapeID>
<Messages>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4784</Line><Position>21</Position><ShapeID>'6fd785fb-4a9c-4524-832c-028bc8d8a7d6'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
	<MsgInfo><name>ETRANActualResponseMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4792</Line><Position>21</Position><ShapeID>'9d3c1a15-00f3-4942-95cc-111b1506ef9a'</ShapeID>
<Messages>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4800</Line><Position>21</Position><ShapeID>'52f4e19b-7488-4125-b79c-f288ecdbd7aa'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4810</Line><Position>29</Position><ShapeID>'407491ad-8e56-4849-b0a4-a2208446ab24'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4816</Line><Position>21</Position><ShapeID>'23fe3f13-a120-4f74-9da3-c89630b8d5dd'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4819</Line><Position>25</Position><ShapeID>'5632e4b5-8266-4067-9369-94760c8aa9e0'</ShapeID>
<Messages>
	<MsgInfo><name>SFLoanUpdateRequestMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save+SaveRequest</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4825</Line><Position>25</Position><ShapeID>'422224de-0a06-4a0e-9632-3bb098b5c287'</ShapeID>
<Messages>
	<MsgInfo><name>SFRestSaveRequestMsg</name><part>MessagePart</part><schema>SBA.BizTalk.Shared.Salesforce.RestApi.Definition.Request.SaveRequest</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4836</Line><Position>25</Position><ShapeID>'0c7d3478-5311-49cf-86ec-ac720091a870'</ShapeID>
<Messages>
	<MsgInfo><name>SFRestSaveResultMsg</name><part>MessagePart</part><schema>SBA.BizTalk.Shared.Salesforce.RestApi.Definition.Response.SaveResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope59'</ActionName><IsAtomic>0</IsAtomic><Line>4846</Line><Position>25</Position><ShapeID>'8fe62c7e-9afd-4c62-b0b7-e42771c201b4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4851</Line><Position>95</Position><ShapeID>'b335a54e-2838-490d-a584-37dbc63de55c'</ShapeID>
<Messages>
	<MsgInfo><name>SFRestSaveRequestMsg</name><part>MessagePart</part><schema>SBA.BizTalk.Shared.Salesforce.RestApi.Definition.Request.SaveRequest</schema><direction>In</direction></MsgInfo>
	<MsgInfo><name>SFRestSaveResultMsg</name><part>MessagePart</part><schema>SBA.BizTalk.Shared.Salesforce.RestApi.Definition.Response.SaveResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4856</Line><Position>33</Position><ShapeID>'00850782-f21a-4da8-b87a-5abd98e80453'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4859</Line><Position>44</Position><ShapeID>'8150612d-c260-416e-9be3-e3df0af996b7'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4877</Line><Position>21</Position><ShapeID>'bb4ae145-5705-4976-a112-c43506ebf7cc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4881</Line><Position>28</Position><ShapeID>'60dfd91c-c834-4bc7-88b1-2db0cd8f6e35'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4890</Line><Position>32</Position><ShapeID>'6bafd73a-30d8-4d91-b027-8cb61272aadd'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4895</Line><Position>25</Position><ShapeID>'e5496d1e-84b0-423e-96ec-725f8609b83e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope60'</ActionName><IsAtomic>0</IsAtomic><Line>4899</Line><Position>25</Position><ShapeID>'f167b43f-4f35-4861-b466-7fc4bca40ee0'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4904</Line><Position>33</Position><ShapeID>'b753e454-865f-484c-ae2a-b5ce330b9b37'</ShapeID>
<Messages>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4922</Line><Position>33</Position><ShapeID>'b0d41c3b-cc89-4579-bd57-fd632d334092'</ShapeID>
<Messages>
	<MsgInfo><name>CanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>TempCanonicalMsg</name><part>MessagePart</part><schema>SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4933</Line><Position>39</Position><ShapeID>'987a67db-f64d-4fbf-81f7-f8e5b0029f45'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4941</Line><Position>33</Position><ShapeID>'39aab17a-7630-40cd-ad0b-689e778b1338'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4948</Line><Position>33</Position><ShapeID>'da32304a-a783-4f42-ab36-c56724b28685'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4952</Line><Position>45</Position><ShapeID>'30cab463-0479-46f1-b201-5b03d327eed3'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4955</Line><Position>44</Position><ShapeID>'093547c3-b764-4596-8e79-b94af878edc5'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4962</Line><Position>37</Position><ShapeID>'24b7ae04-28c2-4096-bc57-e639b68628a8'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope61'</ActionName><IsAtomic>0</IsAtomic><Line>4972</Line><Position>13</Position><ShapeID>'152c295c-bf84-4923-87ac-6a8ae210421e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope62'</ActionName><IsAtomic>0</IsAtomic><Line>4977</Line><Position>21</Position><ShapeID>'b9750666-c3d8-4729-9a47-79c1156ff4d6'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4982</Line><Position>29</Position><ShapeID>'f68c5698-56a3-459b-b280-d5cbb37ffc07'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4985</Line><Position>33</Position><ShapeID>'444d0cc3-d6a3-418d-bca9-0c7d20bc15e3'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4988</Line><Position>37</Position><ShapeID>'2c4afcef-ae24-458e-83c4-bfee70c40861'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4991</Line><Position>59</Position><ShapeID>'53ab454a-2533-4f36-a914-ac4e5aae0d7a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4993</Line><Position>41</Position><ShapeID>'5b8aeca8-5807-4cec-8d49-72877d50cb01'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>4996</Line><Position>112</Position><ShapeID>'2645248b-f560-4578-bd2e-058fc864f744'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5001</Line><Position>114</Position><ShapeID>'fdf5a2a9-d29b-484e-a619-a470d4b3239d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5007</Line><Position>59</Position><ShapeID>'4bc3cf7b-7053-4551-a2ee-774bf06b49a8'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5017</Line><Position>110</Position><ShapeID>'dfec0ba2-1ce3-44c4-a4f0-2922b3e25d77'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5023</Line><Position>51</Position><ShapeID>'f4ea9e1c-5c66-4282-b345-8b1a464a1c40'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5043</Line><Position>33</Position><ShapeID>'158e1791-4874-4353-950f-b5034a342f18'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5046</Line><Position>51</Position><ShapeID>'7d9780d2-dbaf-4128-ac3a-d73a2098f8d8'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5057</Line><Position>33</Position><ShapeID>'22a359fa-7634-4abc-afe0-b66d46aad936'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5065</Line><Position>29</Position><ShapeID>'f1f69389-ee4b-40dd-9231-7fdec7500787'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5068</Line><Position>47</Position><ShapeID>'daf797d7-5d9a-4fec-b12f-2bd91d8b3eda'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5081</Line><Position>97</Position><ShapeID>'b92652bf-8041-4cb8-8a20-f9525f16d87c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5086</Line><Position>21</Position><ShapeID>'f15fc139-dd14-42f9-8ea4-bf8755cf8572'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5089</Line><Position>32</Position><ShapeID>'52fd919e-1ceb-4ef2-85dc-9eea433fe2d6'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5111</Line><Position>25</Position><ShapeID>'6744c0f4-42fd-4e6b-a3a4-4437ee5546c1'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5115</Line><Position>63</Position><ShapeID>'59ba1990-74cc-4fe1-b652-47b4c45e85e0'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>5117</Line><Position>25</Position><ShapeID>'84fe56d2-8e9a-4318-8b83-b916d7592992'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='e9573fc6-622b-4db5-bfa6-b942b6dff450' LowerBound='1.1' HigherBound='1392.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='SBA.ETRANObligation.Logic' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='ServiceDeclaration' OID='0e8f5bda-0a58-4631-ba0a-d6dfd200b7bd' ParentLink='Module_ServiceDeclaration' LowerBound='86.1' HigherBound='1391.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETRANObligationLogic' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='c0a3c351-a21f-4994-9917-34cbe94f22dc' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='115.1' HigherBound='116.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFBusTypeCurrent' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='231889c1-6240-4a34-a3ee-b11daa0e44d6' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='116.1' HigherBound='117.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='BTAuditMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='dbfcd9e6-d83f-4777-93f1-9cc114aa4f43' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='117.1' HigherBound='118.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='BTAuditStatus' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='c5b767ba-56f0-45c7-b488-05d662688be3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='118.1' HigherBound='119.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='BTAuditId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='a121e0d7-d2f3-4940-947c-7b1021a17253' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='119.1' HigherBound='120.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETranResponseXml' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='cad198af-7cdd-46dc-9cba-5c455d1433b3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='120.1' HigherBound='121.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETranRequestXml' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='bbda10d1-18da-4db5-a60d-ddb77942ece5' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='121.1' HigherBound='122.1'>
                <om:Property Name='InitialValue' Value='&quot;Ready&quot;' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ProcessStatusCode' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='104ceb89-73a0-4264-b88e-56ec17eff964' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='122.1' HigherBound='123.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FEMARegistrationNumber' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='8f191c32-af4d-4453-9f98-baaa06746c79' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='123.1' HigherBound='124.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FEMAEventCode' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='fd60bc6b-12f8-4c6d-a98f-13e2b39846ad' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='124.1' HigherBound='125.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DisasterNumber' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='879aa997-a90a-48e3-aa78-7215044e5133' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='125.1' HigherBound='126.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='AutoDeclineReason' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='43c6873b-cd22-4a35-af74-6ef5f6c83b1c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='126.1' HigherBound='127.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Guid' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='OrchestrationInstanceId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='8af14f43-6d73-4217-9f4e-bae510f4c923' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='127.1' HigherBound='128.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceObjectId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='4af2be3f-8c35-42b8-b4f5-c294965fd8b9' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='128.1' HigherBound='129.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ApplicationNumber' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='0f89dffb-979d-406c-b64e-5de7705b57c9' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='129.1' HigherBound='130.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Status' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='68c057d4-0427-4904-a751-d6e6d341635d' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='130.1' HigherBound='131.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Stage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='34c70c42-38fe-4ed7-b506-5c58fa05f6ed' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='131.1' HigherBound='132.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceObjectName' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='1bd9006f-4a21-42fc-b2dd-95d3c948c492' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='132.1' HigherBound='133.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Message' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='84eb73b5-c284-4bcf-bb2b-d47ee4ee715a' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='133.1' HigherBound='134.1'>
                <om:Property Name='InitialValue' Value='false' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Boolean' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='LoanOriginateSuccess' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='f9e32c39-435f-4ebc-b93c-0e65cb686f33' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='134.1' HigherBound='135.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='XpathStmt' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='65c25c5b-e603-46d8-b889-6fd852ee1a2b' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='135.1' HigherBound='136.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Exception' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Ex' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5caeb810-8218-476c-bf35-80ed6f7dde7a' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='136.1' HigherBound='137.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Exception' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ExInner' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='c59ad2d6-b71d-4032-97f0-385c6cc4cea7' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='137.1' HigherBound='138.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempOrchestrationInstanceId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='c4c4d6ee-073a-48f2-b4d4-2fb4d833a62b' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='138.1' HigherBound='139.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TmpXmlDoc' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='14eabbfa-bdff-4b81-87a1-128841cc623c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='139.1' HigherBound='140.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TmpMsgXml' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='d97be2a9-a38f-4558-ae4a-f8ee0825ff2d' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='140.1' HigherBound='141.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SOQL' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='2a261af8-ee67-42b4-b011-445ff9bdd585' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='141.1' HigherBound='142.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='XpathStmtBase' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='b12b6233-704a-494d-814d-b8c9b614eff0' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='142.1' HigherBound='143.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PropertyId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='4296ba52-94e1-45f3-85d6-1dbde4d6ff6b' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='143.1' HigherBound='144.1'>
                <om:Property Name='InitialValue' Value='0' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Int32' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ApplicantCount' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5e0ff166-11d7-445c-9b4c-53bbe5a34cc2' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='144.1' HigherBound='145.1'>
                <om:Property Name='InitialValue' Value='20000' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Int32' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ErrorMaxLength' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='cb787ff5-2c0d-4309-b9c5-9918ad3145d6' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='145.1' HigherBound='146.1'>
                <om:Property Name='InitialValue' Value='&quot;ETran Obligation&quot;' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='InterfaceType' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='d0a91dd1-da9c-4a0a-ba5a-7c3a01b1cd74' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='146.1' HigherBound='147.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempXmlDoc' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='e188b6b5-acb7-4ac5-a0c3-bf8ad6305421' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='147.1' HigherBound='148.1'>
                <om:Property Name='InitialValue' Value='System.String.Empty' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='BTAuditStepCompleted' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='0428188c-3bf2-4bee-bc5c-26e81966075f' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='148.1' HigherBound='149.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFBusTypesListAll' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='c96c74af-899b-4442-a162-64dc8048cbe3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='149.1' HigherBound='150.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringDictionary' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFBusTypesDict' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='69793323-2311-4b06-af15-344216f3184e' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='150.1' HigherBound='151.1'>
                <om:Property Name='InitialValue' Value='0' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Int32' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFBusTypesListAllIndex' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='17bc791c-a9ef-4795-9406-5d2f99f0b479' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='94.1' HigherBound='95.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETranFaultMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETranFaultMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='09a631d3-87a1-4bb2-86a2-b3230a3a89d7' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='95.1' HigherBound='96.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.Fault1_1MsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Fault1_1Msg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='f1b0841b-feed-4d62-acf6-4bc5572d42f2' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='96.1' HigherBound='97.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETRANOriginateAppType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETRANOriginateAppMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='7c361d73-e1b5-4e99-8d48-df42976df218' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='97.1' HigherBound='98.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETRANOriginateResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETRANOriginateResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='fb663eee-3dec-4467-9cb0-b009d06f02ae' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='98.1' HigherBound='99.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETRANOriginateRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETRANOriginateRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='9de838f4-cf36-4c93-896d-5812f3a281aa' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='99.1' HigherBound='100.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFLoanUpdateRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFLoanUpdateRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='39685c20-f988-477e-9484-3b02bd6c60c1' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='100.1' HigherBound='101.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFLoanUpdateResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFLoanUpdateResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='f816c18c-bdef-440b-ae5f-dd9b41c709bd' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='101.1' HigherBound='102.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETRANActualResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETRANActualResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='7b1f7a35-55d8-43f5-af2d-cf95cfdd46c7' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='102.1' HigherBound='103.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFNotificationSingleMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFNotificationSingleMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='7b5c4512-43a3-4664-a674-e50b6a0aa0f2' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='103.1' HigherBound='104.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.CanonicalMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='CanonicalMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='9363e5df-a213-4f03-a145-b4f741f2694e' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='104.1' HigherBound='105.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.CanonicalMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempCanonicalMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='a601a516-58e7-42ce-a616-b1b070cf5dd0' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='105.1' HigherBound='106.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETRANOriginateAppDefaultsType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETRANOriginateAppDefaultsMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='430ea0f7-bac7-46a9-acb0-7240b863346d' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='106.1' HigherBound='107.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETranCredentialsMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETranCredentials' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='60ef849b-8d15-49b3-b7ce-ff2bb912cadd' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='107.1' HigherBound='108.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETranObligationTransportMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETranObligationTransportMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='bada0c72-e7d7-4864-92d6-00bf19d70690' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='108.1' HigherBound='109.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.Fault1_2MsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Fault1_2Msg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='f9dd9a62-d846-4de8-94eb-0a8c75310cc4' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='109.1' HigherBound='110.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFMultiQueryRequestMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFMultiQueryRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='878a5d08-8116-4b21-bde5-1bc471c2913d' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='110.1' HigherBound='111.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFMultiQueryResultMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFMultiQueryResultMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='c5eb8b89-0516-4774-9526-7a56bff816e4' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='111.1' HigherBound='112.1'>
                <om:Property Name='Type' Value='SBA.BizTalk.Shared.Salesforce.RestApi.Logic.QueryResultMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFRestQueryResultMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='568f050e-3988-48ce-bfb5-7c54a3324dbc' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='112.1' HigherBound='113.1'>
                <om:Property Name='Type' Value='SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveRequestMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFRestSaveRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='6d0e469f-2bdd-4a12-96d4-345e4e51a9d3' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='113.1' HigherBound='114.1'>
                <om:Property Name='Type' Value='SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveResultMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SFRestSaveResultMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='27394cde-3b8b-48f5-9947-b33d7286589f' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='114.1' HigherBound='115.1'>
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.LegalOrgTypeMsgType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='LegalOrgTypeMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='8d461852-8edc-4096-8b1a-5ba0da660b79' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Receive' OID='9d0008fa-a18c-4e0b-8f12-b80439b3a24a' ParentLink='ServiceBody_Statement' LowerBound='153.1' HigherBound='190.1'>
                    <om:Property Name='Activate' Value='True' />
                    <om:Property Name='PortName' Value='SF_Notify_Receive' />
                    <om:Property Name='MessageName' Value='SFNotificationSingleMsg' />
                    <om:Property Name='OperationName' Value='NotifySingle' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Get SF Notify' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableAssignment' OID='0aaf36ae-98b8-4284-8f65-e457a7ff8189' ParentLink='ServiceBody_Statement' LowerBound='190.1' HigherBound='219.1'>
                    <om:Property Name='Expression' Value='&#xD;&#xA;TempOrchestrationInstanceId = System.Convert.ToString(ETRANObligationLogic(Microsoft.XLANGs.BaseTypes.InstanceId)); &#xD;&#xA;OrchestrationInstanceId = System.Guid.Empty;&#xD;&#xA;if (!System.Guid.TryParse(TempOrchestrationInstanceId, out OrchestrationInstanceId)) {&#xD;&#xA;    Ex = new System.Exception(&quot;Unable to get Orchestration Instance GUID!&quot;); &#xD;&#xA;    Ex.Data.Add(&quot;TempOrchestrationInstanceId&quot;, TempOrchestrationInstanceId); &#xD;&#xA;    throw Ex;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Stage = &quot;Loan Obligated&quot;; &#xD;&#xA;&#xD;&#xA;Status = System.String.Empty;  &#xD;&#xA;&#xD;&#xA;Message = System.String.Empty; &#xD;&#xA;&#xD;&#xA;ApplicationNumber = System.String.Empty; &#xD;&#xA;&#xD;&#xA;SalesforceObjectId = System.String.Empty; &#xD;&#xA;&#xD;&#xA;SalesforceObjectName = &quot;Loan__c&quot;; &#xD;&#xA;&#xD;&#xA;DisasterNumber = System.String.Empty; &#xD;&#xA;FEMAEventCode = System.String.Empty; &#xD;&#xA;FEMARegistrationNumber = System.String.Empty; &#xD;&#xA;InterfaceType = &quot;ETran Obligation&quot;; &#xD;&#xA;ProcessStatusCode = &quot;Success&quot;; &#xD;&#xA;&#xD;&#xA; &#xD;&#xA;' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Failsafe Var Init' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Scope' OID='e0237d5f-9e91-432a-b6d3-436fe075004f' ParentLink='ServiceBody_Statement' LowerBound='219.1' HigherBound='271.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Canonical Create Scope' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='Task' OID='840dcd91-eaf0-4fef-b49f-2e63ab6264c4' ParentLink='ComplexStatement_Statement' LowerBound='224.1' HigherBound='235.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Create Canonical' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='f2569e3d-c6ea-4789-ba71-4b5a4dea66c1' ParentLink='ComplexStatement_Statement' LowerBound='224.1' HigherBound='235.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Initial Canonical' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Transform' OID='983c0e23-016f-483f-8eec-6715262fd772' ParentLink='ComplexStatement_Statement' LowerBound='227.1' HigherBound='229.1'>
                                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.Notification.Map_Notification_to_Canonical' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Map Notification to Canonical' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessagePartRef' OID='10e50599-c00c-4244-9a09-3ef1deacbfa5' ParentLink='Transform_InputMessagePartRef' LowerBound='228.134' HigherBound='228.169'>
                                    <om:Property Name='MessageRef' Value='SFNotificationSingleMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_21' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='85363015-61b0-4e07-af36-8ee814b34519' ParentLink='Transform_OutputMessagePartRef' LowerBound='228.36' HigherBound='228.60'>
                                    <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_22' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='0a279e41-69b3-4998-a964-7fe1a0283bac' ParentLink='ComplexStatement_Statement' LowerBound='229.1' HigherBound='234.1'>
                                <om:Property Name='Expression' Value='CanonicalMsg(*) = SFNotificationSingleMsg(*); &#xD;&#xA;&#xD;&#xA;CanonicalMsg.MessagePart.Event_Request__c.GUID__c = OrchestrationInstanceId.ToString(); &#xD;&#xA;&#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Context +' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='7d22b494-0600-44d0-b6d6-0219c37ef98c' ParentLink='Construct_MessageRef' LowerBound='225.31' HigherBound='225.43'>
                                <om:Property Name='Ref' Value='CanonicalMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Catch' OID='b576ad87-e8cb-47c5-b385-e393f8ccd379' ParentLink='Scope_Catch' LowerBound='238.1' HigherBound='269.1'>
                        <om:Property Name='ExceptionName' Value='exCan' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Exception - Canonical' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='0cc5dfb1-3923-4d60-941c-544103c65360' ParentLink='Catch_Statement' LowerBound='241.1' HigherBound='244.1'>
                            <om:Property Name='Expression' Value='Ex = exCan; &#xD;&#xA;Ex.Data.Add(&quot;SF Notify Msg&quot;, SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(SFNotificationSingleMsg)); &#xD;&#xA;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Set TempEx' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='276237f5-fb5c-4124-9d37-363a5c3504f0' ParentLink='Catch_Statement' LowerBound='244.1' HigherBound='248.1'>
                            <om:Property Name='Expression' Value='Message = System.String.Format(&quot;Error creating initial canonical message, ETran Obligation processing cannot continue. \r\n\r\n{0}&quot;, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(Ex)); &#xD;&#xA;Status = &quot;Error&quot;; ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Error Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='c9996409-6886-4ce4-a06c-2db0459029da' ParentLink='Catch_Statement' LowerBound='248.1' HigherBound='251.1'>
                            <om:Property Name='Expression' Value='ApplicationNumber = SFNotificationSingleMsg.MessagePart.sObject.Application_Number__c; &#xD;&#xA;SalesforceObjectId = SFNotificationSingleMsg.MessagePart.sObject.SObject_ID__c; ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='AppNum/LoanId' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='624f488d-f8c9-440a-9546-265b7d0d8d0a' ParentLink='Catch_Statement' LowerBound='251.1' HigherBound='255.1'>
                            <om:Property Name='Expression' Value='if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength); &#xD;&#xA;}' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Truncate Error' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Decision' OID='d62ca653-63c1-4057-8f7e-1bba844bb410' ParentLink='Catch_Statement' LowerBound='255.1' HigherBound='266.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Have App Num? ' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='16f2881d-cb91-4bb7-8739-3e8ace1c31b4' ParentLink='ReallyComplexStatement_Branch' LowerBound='256.25' HigherBound='261.1'>
                                <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(ApplicationNumber)' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Call' OID='8ffcde6b-deab-4727-aa1e-620e510b88f1' ParentLink='ComplexStatement_Statement' LowerBound='258.1' HigherBound='260.1'>
                                    <om:Property Name='Identifier' Value='Event_Request_Canonical' />
                                    <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Event Request' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='Parameter' OID='374f6aff-e66f-455b-886d-2fb70f7382f2' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='OrchestrationInstanceId' />
                                        <om:Property Name='Type' Value='System.Guid' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='18b304bd-8006-4618-94d8-047a236a90a2' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Status' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='9a2d4039-6795-4c95-a2ad-8576739794f7' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Stage' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='641869bb-d574-406c-9abb-6f61df75299f' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='ApplicationNumber' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='52fe0d36-929e-4baa-a535-60ff6f7ea84e' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='SalesforceObjectName' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='16ecc4b9-99c4-4faa-bdeb-8a683e4a3f4c' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='SalesforceObjectId' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='58dfba93-ff0e-4a62-a3b9-40da4d748519' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Message' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='de784b1c-4679-42b8-be40-78200db3cfaf' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='AutoDeclineReason' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='fcfdad9f-1541-4b4f-823c-381802462b4c' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='VariableAssignment' OID='d175d4e3-3238-45f9-ae24-e672e2963e26' ParentLink='ComplexStatement_Statement' LowerBound='263.1' HigherBound='265.1'>
                                    <om:Property Name='Expression' Value='System.Diagnostics.EventLog.WriteEntry(&quot;BizTalk: ETran Obligation&quot;, Message, System.Diagnostics.EventLogEntryType.Error); ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='System Log' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Terminate' OID='57bb9b05-9072-4f5f-8a44-71ae062f3aba' ParentLink='Catch_Statement' LowerBound='266.1' HigherBound='268.1'>
                            <om:Property Name='ErrorMessage' Value='Message; ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='f79bd841-98c3-4431-857b-85e9e0161f9e' ParentLink='ServiceBody_Statement' LowerBound='271.1' HigherBound='346.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ETran Transport Scope' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='Task' OID='60ceafe2-aa08-4f7f-aa71-c2751e3f0c08' ParentLink='ComplexStatement_Statement' LowerBound='276.1' HigherBound='309.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='ETran Obligation Transport' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='43a301d5-3a97-440b-b823-4a72fc0b18b0' ParentLink='ComplexStatement_Statement' LowerBound='276.1' HigherBound='285.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Create ETran Transport' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageAssignment' OID='fb78599a-d734-4d82-9f0c-33766edd9bb2' ParentLink='ComplexStatement_Statement' LowerBound='279.1' HigherBound='284.1'>
                                <om:Property Name='Expression' Value='ETranObligationTransportMsg.MessagePart = null; &#xD;&#xA;ETranObligationTransportMsg.MessagePart = SBA.BizTalk.Shared.MessageHelper.Embedded.EmbeddedMessageLoader.Instance.GetXmlDocument(&#xD;&#xA;                    &quot;SBA.ETRANObligation.Definition.Rules.ETranObligationTransport.xml&quot;,&#xD;&#xA;                    &quot;SBA.ETRANObligation.Definition.Rules, Version=2.0.0.0, Culture=neutral, PublicKeyToken=18227d56be4ceab0&quot;); ' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Make ETran Transport' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='031c655c-13e1-4477-83a0-348cf32f0b56' ParentLink='Construct_MessageRef' LowerBound='277.31' HigherBound='277.58'>
                                <om:Property Name='Ref' Value='ETranObligationTransportMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='CallRules' OID='3b6dc529-7bda-4c5e-aac5-ca18e70b400c' ParentLink='ComplexStatement_Statement' LowerBound='285.1' HigherBound='309.1'>
                            <om:Property Name='PolicyName' Value='ETran Obligation Transport' />
                            <om:Property Name='PolicyVersion' Value='-1' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Transport BRE' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='RulesParameterRef' OID='de52f478-fe0a-4569-9647-96587a42a906' ParentLink='CallRules_RulesParameterRef'>
                                <om:Property Name='Reference' Value='ETranObligationTransportMsg' />
                                <om:Property Name='PartReference' Value='MessagePart' />
                                <om:Property Name='Alias' Value='SBA.ETRANObligation.Definition.Rules.ETranObligationTransport' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='RulesParameterRef_1' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Catch' OID='4a5e5973-9d2d-4255-97d0-27e470257923' ParentLink='Scope_Catch' LowerBound='312.1' HigherBound='344.1'>
                        <om:Property Name='ExceptionName' Value='exETranTransport' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Exception - ETran Transport' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='a3740ab7-3ebe-4f03-bb53-5d0245dbc95c' ParentLink='Catch_Statement' LowerBound='315.1' HigherBound='318.1'>
                            <om:Property Name='Expression' Value='Ex = exETranTransport; &#xD;&#xA;Ex.Data.Add(&quot;SF Notify Msg&quot;, SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(SFNotificationSingleMsg)); &#xD;&#xA;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Set TempEx' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='068ff41a-37dc-415c-93c1-4edba6f2d37d' ParentLink='Catch_Statement' LowerBound='318.1' HigherBound='323.1'>
                            <om:Property Name='Expression' Value='Message = System.String.Format(&quot;Error creating ETran Transport message using embedded xml &amp; BRE Policy. &quot; + &#xD;&#xA;                               &quot;ETran Obligation processing cannot continue. \r\n\r\n{0}&quot;, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(Ex)); &#xD;&#xA;Status = &quot;Error&quot;; ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Error Message' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='6784a7f2-c680-4e88-bbe2-4b5147c2d625' ParentLink='Catch_Statement' LowerBound='323.1' HigherBound='326.1'>
                            <om:Property Name='Expression' Value='ApplicationNumber = SFNotificationSingleMsg.MessagePart.sObject.Application_Number__c; &#xD;&#xA;SalesforceObjectId = SFNotificationSingleMsg.MessagePart.sObject.SObject_ID__c; ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='AppNum/LoanId' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='7c11a6ff-9510-4813-bbef-32f4f3034bf4' ParentLink='Catch_Statement' LowerBound='326.1' HigherBound='330.1'>
                            <om:Property Name='Expression' Value='if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength); &#xD;&#xA;}' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Truncate Error' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Decision' OID='4096ab60-625a-4a28-98b1-094841915eec' ParentLink='Catch_Statement' LowerBound='330.1' HigherBound='341.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Have App Num? ' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='529b4540-6f40-4166-b839-730390e1ac11' ParentLink='ReallyComplexStatement_Branch' LowerBound='331.25' HigherBound='336.1'>
                                <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(ApplicationNumber)' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Call' OID='a4b2cd04-93d4-444b-a5fa-85b4eb02112a' ParentLink='ComplexStatement_Statement' LowerBound='333.1' HigherBound='335.1'>
                                    <om:Property Name='Identifier' Value='CallOrchestration_8' />
                                    <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Event Request' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='Parameter' OID='d5e08f2a-77cb-46c2-91ba-caf19f854f7d' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='OrchestrationInstanceId' />
                                        <om:Property Name='Type' Value='System.Guid' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='d9a996f3-aa43-481a-abeb-3669a48c0e38' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Status' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='f0bd6be9-a712-4f45-9a1d-ee9c2d8378ba' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Stage' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='0f88d453-e5ea-415f-99ea-f31ec467fbc3' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='ApplicationNumber' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='92ee83f3-4553-4e3e-ad4b-568ceabca4df' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='SalesforceObjectName' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='8f1b134e-c71f-4d26-bd3b-fb283d991dc0' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='SalesforceObjectId' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='84bfe990-e8b3-46d0-b1e7-c7364ae8a48a' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='Message' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Parameter' OID='ca6f720b-1927-4404-9f66-f077f9cdd09a' ParentLink='InvokeStatement_Parameter'>
                                        <om:Property Name='Direction' Value='In' />
                                        <om:Property Name='Name' Value='AutoDeclineReason' />
                                        <om:Property Name='Type' Value='System.String' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='10f68846-7b3c-463e-af3e-3251caceea00' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='VariableAssignment' OID='bd73c65e-a7a0-43c5-8520-8ed52091b335' ParentLink='ComplexStatement_Statement' LowerBound='338.1' HigherBound='340.1'>
                                    <om:Property Name='Expression' Value='System.Diagnostics.EventLog.WriteEntry(&quot;BizTalk: ETran Obligation&quot;, Message, System.Diagnostics.EventLogEntryType.Error); ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='System Log' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Terminate' OID='d4a91e07-74db-40db-baa3-81c73e150e76' ParentLink='Catch_Statement' LowerBound='341.1' HigherBound='343.1'>
                            <om:Property Name='ErrorMessage' Value='Message; ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='64b6ac8b-3e7c-43ab-ae82-48f889fc141a' ParentLink='ServiceBody_Statement' LowerBound='346.1' HigherBound='1239.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Single Notification Processing' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='VariableAssignment' OID='3e47ceca-c5a8-4d6b-a803-a598cf34c11d' ParentLink='ComplexStatement_Statement' LowerBound='351.1' HigherBound='360.1'>
                        <om:Property Name='Expression' Value='&#xD;&#xA;// Get ApplicationNumber&#xD;&#xA;ApplicationNumber = CanonicalMsg.MessagePart.Notification.sObject.Application_Number__c; &#xD;&#xA;&#xD;&#xA;// Get SalesforceObjectId (LoanId) &#xD;&#xA;SalesforceObjectId = CanonicalMsg.MessagePart.Notification.sObject.SObject_ID__c; &#xD;&#xA;&#xD;&#xA; ' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Get Loan/App Id' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Task' OID='e2c77bf6-1db4-4dcf-aaae-c3680107e401' ParentLink='ComplexStatement_Statement' LowerBound='360.1' HigherBound='393.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='ETran Credentials' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='3831c9ab-fbd1-4ee1-b592-1d6d12ed84a2' ParentLink='ComplexStatement_Statement' LowerBound='360.1' HigherBound='369.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Create ETran Creds' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageAssignment' OID='d8492f0d-a326-4523-a6fc-97a01b80c499' ParentLink='ComplexStatement_Statement' LowerBound='363.1' HigherBound='368.1'>
                                <om:Property Name='Expression' Value='ETranCredentials.MessagePart = null; &#xD;&#xA;TmpXmlDoc = SBA.BizTalk.Shared.MessageHelper.Embedded.EmbeddedMessageLoader.Instance.GetXmlDocument(&quot;SBA.ETRAN.Shared.Definition.ETranCredentials.xml&quot;,&#xD;&#xA;                                                        &quot;SBA.ETRAN.Shared.Definition, Version=2.0.8.3, Culture=neutral, PublicKeyToken=c9f148e1d16b7a80&quot;); &#xD;&#xA;ETranCredentials.MessagePart = TmpXmlDoc; &#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Get Embedded' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='80c1bb70-0706-4ee8-b8a6-6ab6455c8c33' ParentLink='Construct_MessageRef' LowerBound='361.31' HigherBound='361.47'>
                                <om:Property Name='Ref' Value='ETranCredentials' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='CallRules' OID='bdd6012b-1087-4e44-ba7f-0312abac20a8' ParentLink='ComplexStatement_Statement' LowerBound='369.1' HigherBound='393.1'>
                            <om:Property Name='PolicyName' Value='ETran Credentials' />
                            <om:Property Name='PolicyVersion' Value='-1' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='ETran Creds BRE' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='RulesParameterRef' OID='34ad5630-5285-4831-87aa-01d331114f37' ParentLink='CallRules_RulesParameterRef'>
                                <om:Property Name='Reference' Value='ETranCredentials' />
                                <om:Property Name='PartReference' Value='MessagePart' />
                                <om:Property Name='Alias' Value='SBA.ETRAN.Shared.Definition.ETranCredentials' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='RulesParameterRef_2' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Decision' OID='4b6f1d86-efa3-4eff-adc9-e015a977271c' ParentLink='ComplexStatement_Statement' LowerBound='393.1' HigherBound='420.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='ETran Credentials Missing?' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='a433f13b-663c-498d-a459-ecc13083118d' ParentLink='ReallyComplexStatement_Branch' LowerBound='394.21' HigherBound='420.1'>
                            <om:Property Name='Expression' Value='SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AnyHaveNoValue(ETranCredentials.MessagePart.email,&#xD;&#xA;                                                                                 ETranCredentials.MessagePart.password,&#xD;&#xA;                                                                                 ETranCredentials.MessagePart.softwarevendorname,&#xD;&#xA;                                                                                 ETranCredentials.MessagePart.username)' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Yes' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='VariableAssignment' OID='4920ab8d-83db-4928-b418-b8cfbf860e2d' ParentLink='ComplexStatement_Statement' LowerBound='399.1' HigherBound='411.1'>
                                <om:Property Name='Expression' Value='Message = &quot;The BRE Rule Policy &apos;ETran Credentials&apos; is either not deployed or has incomplete information. \r\n\r\n&quot; + &#xD;&#xA;          &quot;Check in Business Rule Composer for the policy and ensure it is providing values for: \r\n\r\n&quot; + &#xD;&#xA;          &quot;username \r\n&quot; + &#xD;&#xA;          &quot;password \r\n&quot; + &#xD;&#xA;          &quot;email \r\n&quot; + &#xD;&#xA;          &quot;softwarevendorname \r\n\r\n&quot; + &#xD;&#xA;          &quot;Also verify that the policy has been deployed.  Then attempt Disbursement again from Salesforce.&quot;; &#xD;&#xA;&#xD;&#xA;Status = &quot;Error&quot;; &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Get Error' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='VariableAssignment' OID='cebbaaaf-24ac-4e1f-8bf9-8376bc876747' ParentLink='ComplexStatement_Statement' LowerBound='411.1' HigherBound='415.1'>
                                <om:Property Name='Expression' Value='if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength); &#xD;&#xA;}' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Truncate Error' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Call' OID='f5925138-6e24-476f-81c0-0d2db02cf60f' ParentLink='ComplexStatement_Statement' LowerBound='415.1' HigherBound='417.1'>
                                <om:Property Name='Identifier' Value='Event_Request_ETranCredsMissing' />
                                <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Event Request' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Parameter' OID='c8007ea8-6223-49ad-9a5a-ca4a2a5cfbcb' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='OrchestrationInstanceId' />
                                    <om:Property Name='Type' Value='System.Guid' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='2e229c75-f654-4a74-a673-907e75ab8251' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Status' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='40bca1d3-8d50-4322-b783-95040d6ee452' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Stage' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='80c0f13a-3f04-4d18-8d66-959c29b0d096' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='ApplicationNumber' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='090da4e6-b9a5-4e32-b761-7a659b82c728' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='SalesforceObjectName' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='c980fbab-7fcb-43f3-b6be-89657730a5a4' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='SalesforceObjectId' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='47245486-512b-4177-9926-d63f6f2d6696' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Message' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='0475c27f-ed2f-4550-8e4b-bc93e23a10a4' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='AutoDeclineReason' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Terminate' OID='77c0a15d-7bd6-4fd4-b204-1994d509ca28' ParentLink='ComplexStatement_Statement' LowerBound='417.1' HigherBound='419.1'>
                                <om:Property Name='ErrorMessage' Value='Message;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Terminate' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='b0f445bf-e79f-41c3-8993-a35a2fc220e8' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Task' OID='3ae09513-5ee6-474e-b41a-70ec64dd551f' ParentLink='ComplexStatement_Statement' LowerBound='420.1' HigherBound='441.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='ETRAN Originate App Defaults' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='3fee5f1c-3795-4ed1-836e-9915ae0c0344' ParentLink='ComplexStatement_Statement' LowerBound='420.1' HigherBound='426.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Create App Defaults' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Transform' OID='5245f02b-8dca-49e0-90dd-a0f4cd20b6c3' ParentLink='ComplexStatement_Statement' LowerBound='423.1' HigherBound='425.1'>
                                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.ETRANOriginate.Create_ETRAN_Originate_App_Defaults' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Make App Defaults' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessagePartRef' OID='34891d69-5851-4a92-86c4-28e393c540c3' ParentLink='Transform_InputMessagePartRef' LowerBound='424.158' HigherBound='424.182'>
                                    <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_57' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='f07cb818-70f7-4dab-8696-177dde30bed1' ParentLink='Transform_OutputMessagePartRef' LowerBound='424.36' HigherBound='424.76'>
                                    <om:Property Name='MessageRef' Value='ETRANOriginateAppDefaultsMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_58' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageRef' OID='c4509192-96da-4cd4-8da2-56573eb3528e' ParentLink='Construct_MessageRef' LowerBound='421.31' HigherBound='421.59'>
                                <om:Property Name='Ref' Value='ETRANOriginateAppDefaultsMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Construct' OID='d29d8683-8cd1-434c-a6a7-e29432bf6988' ParentLink='ComplexStatement_Statement' LowerBound='426.1' HigherBound='433.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Temp Canonical' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='feeb3126-f927-4162-b232-eeb05f83f1b8' ParentLink='Construct_MessageRef' LowerBound='427.31' HigherBound='427.47'>
                                <om:Property Name='Ref' Value='TempCanonicalMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='27fc3ef8-4a8f-4bf6-bc35-6e8ad58594a8' ParentLink='ComplexStatement_Statement' LowerBound='429.1' HigherBound='432.1'>
                                <om:Property Name='Expression' Value='TempCanonicalMsg = CanonicalMsg;&#xD;&#xA;TempCanonicalMsg(*) = CanonicalMsg(*);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Copy Canonical' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Construct' OID='80db332f-78c8-4678-a81a-d428b3ed3072' ParentLink='ComplexStatement_Statement' LowerBound='433.1' HigherBound='441.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Canonical - ETRAN Originate App Defaults' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Transform' OID='fb52680b-5221-4e54-a6f0-bd0bfbf8a058' ParentLink='ComplexStatement_Statement' LowerBound='436.1' HigherBound='438.1'>
                                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.ETRANOriginate.Map_ETRAN_Originate_App_Defaults_To_Canonical' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Map ETRAN Originate App Defaults' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessagePartRef' OID='7616eb29-5c54-456a-ba0d-f3ddf1a43d93' ParentLink='Transform_InputMessagePartRef' LowerBound='437.152' HigherBound='437.180'>
                                    <om:Property Name='MessageRef' Value='TempCanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_50' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='6e4e251e-a62f-48e6-9e05-79832e9caa00' ParentLink='Transform_InputMessagePartRef' LowerBound='437.182' HigherBound='437.222'>
                                    <om:Property Name='MessageRef' Value='ETRANOriginateAppDefaultsMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_59' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='674e2e83-96b6-4ccd-8b7d-bcb30b53361b' ParentLink='Transform_OutputMessagePartRef' LowerBound='437.36' HigherBound='437.60'>
                                    <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_51' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='f9bdc320-ca7a-4ac6-b001-3fe24491c175' ParentLink='ComplexStatement_Statement' LowerBound='438.1' HigherBound='440.1'>
                                <om:Property Name='Expression' Value='CanonicalMsg(*) = TempCanonicalMsg(*); ' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Context' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='bed895ee-c52d-43e2-bde4-a79bd98e184e' ParentLink='Construct_MessageRef' LowerBound='434.31' HigherBound='434.43'>
                                <om:Property Name='Ref' Value='CanonicalMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Decision' OID='50fbfe01-bccb-47ed-85b9-212cb7f7abea' ParentLink='ComplexStatement_Statement' LowerBound='441.1' HigherBound='493.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Defaults Loaded OK? ' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='d8b107e7-e439-4c9b-8b4d-df443ffd42c9' ParentLink='ReallyComplexStatement_Branch' LowerBound='442.21' HigherBound='473.1'>
                            <om:Property Name='Expression' Value='SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue(&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Borrower.action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Borrower.CreditScorSourcCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Borrower.PhysCountryCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.BorrowerRace.action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.BorrowerRace.RaceCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Interest.action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Interest.BaseRateSourcTypCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Interest.IntrstTypInd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Interest.Phase,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.LoanApplication.action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.LoanApplication.InterestStructureCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.LoanApplication.NetEarningsClause,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.LoanApplication.RevolvingInd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Principal.action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Principal.EthnicCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Principal.ExtrnlCreditScorInd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Principal.GndrCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Principal.GntyInd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.Principal.VetCd, &#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.PrincipalRace.action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.PrincipalRace.RaceCd, &#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.SpecialPurpose."+
@"action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.UseOfProceeds_Physical.action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.UseOfProceeds_Physical.LoanProceedTypCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.UseOfProceeds_Physical.ProceedTypCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.UseOfProceeds_EIDL.action,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.UseOfProceeds_EIDL.LoanProceedTypCd,&#xD;&#xA;CanonicalMsg.MessagePart.ETRAN_Originate_App_Defaults.UseOfProceeds_EIDL.ProceedTypCd)' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Yes' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='db963cc5-2005-4ca0-961c-cb44ceb37ae3' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='VariableAssignment' OID='c9539a2a-6c1e-436e-adce-d54b765a367e' ParentLink='ComplexStatement_Statement' LowerBound='475.1' HigherBound='484.1'>
                                <om:Property Name='Expression' Value='Status = &quot;Error&quot;; &#xD;&#xA;&#xD;&#xA;Message = System.String.Format(&quot;ETran App Defaults did not load or only partially loaded.  Check the map &apos;Create ETRAN Originate App Defaults&apos; &quot; + &#xD;&#xA;                               &quot;ensure that all fields in the ETRAN Originate App Defaults schema are getting properly defaulted to a value. \r\n\r\n&quot; + &#xD;&#xA;                               &quot;ETRAN Originate App Defaults Msg: \r\n{0} \r\n\r\n&quot; +&#xD;&#xA;                               &quot;Canonical Msg: \r\n{1}&quot;, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(ETRANOriginateAppDefaultsMsg), &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CanonicalMsg)); ' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Get Error' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='VariableAssignment' OID='9ce6607c-e910-4a67-88e1-b1bea3fbfd37' ParentLink='ComplexStatement_Statement' LowerBound='484.1' HigherBound='488.1'>
                                <om:Property Name='Expression' Value='if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength); &#xD;&#xA;}' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Truncate Error' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Call' OID='704c4ca9-a261-4845-969a-536ff4c196b4' ParentLink='ComplexStatement_Statement' LowerBound='488.1' HigherBound='490.1'>
                                <om:Property Name='Identifier' Value='Event_Request_ETRANAppDefaultsMissing' />
                                <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Event Request' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Parameter' OID='df7e5b4b-4309-4aa4-8603-7323c9ca930d' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='OrchestrationInstanceId' />
                                    <om:Property Name='Type' Value='System.Guid' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='e7e9eac6-6c6a-455e-974c-bee412a3cfcf' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Status' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='e7ffcd18-0c01-4f11-bc3b-506f22f8ae90' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Stage' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='acd995a5-1d3e-4b79-8a27-f0add48a5324' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='ApplicationNumber' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='e07fc87e-fd0d-41c4-9a6a-58244ada0336' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='SalesforceObjectName' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='353a8254-76eb-42c0-951a-e010b8d7c322' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='SalesforceObjectId' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='127b8e01-5ac8-4c26-b3af-d0dbca987461' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Message' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='aa91f72a-236e-429a-9025-1fbba4fe5241' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='AutoDeclineReason' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Terminate' OID='3fb6c8a2-fb76-424d-b781-f9c6aae9efc5' ParentLink='ComplexStatement_Statement' LowerBound='490.1' HigherBound='492.1'>
                                <om:Property Name='ErrorMessage' Value='Message; ' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Terminate' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Task' OID='f4f2c119-58ac-4b7d-bdb0-e6027b08a512' ParentLink='ComplexStatement_Statement' LowerBound='493.1' HigherBound='591.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Salesforce Multi Query' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Task' OID='cdada8af-e48a-4580-8c6a-5d6721ba9454' ParentLink='ComplexStatement_Statement' LowerBound='493.1' HigherBound='528.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Build &amp; Merge Request' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Construct' OID='efc5efb9-cf2f-44a6-96f2-9dcf98f1f335' ParentLink='ComplexStatement_Statement' LowerBound='493.1' HigherBound='505.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Create SF Multi Request' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Transform' OID='e922adf9-6c15-4b12-8225-2c057bb78fa2' ParentLink='ComplexStatement_Statement' LowerBound='496.1' HigherBound='498.1'>
                                    <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.Multi.Map_Multi_Query_Request' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Map SF Multi Request' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='MessagePartRef' OID='a2ea0759-b3b2-41d2-a146-0ce837bd0708' ParentLink='Transform_InputMessagePartRef' LowerBound='497.131' HigherBound='497.155'>
                                        <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                        <om:Property Name='PartRef' Value='MessagePart' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='MessagePartReference_30' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessagePartRef' OID='75f2c377-a321-4a3c-92c2-1d3f28fca4c8' ParentLink='Transform_OutputMessagePartRef' LowerBound='497.36' HigherBound='497.70'>
                                        <om:Property Name='MessageRef' Value='SFMultiQueryRequestMsg' />
                                        <om:Property Name='PartRef' Value='MessagePart' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='MessagePartReference_31' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='MessageAssignment' OID='8b3d4013-d0fc-4595-b799-edbb74b307a0' ParentLink='ComplexStatement_Statement' LowerBound='498.1' HigherBound='504.1'>
                                    <om:Property Name='Expression' Value='SOQL = SFMultiQueryRequestMsg.MessagePart.q; &#xD;&#xA;SOQL = SOQL.Replace(&quot;@ApplicationNumber&quot;, System.String.Format(&quot;&apos;{0}&apos;&quot;, SFMultiQueryRequestMsg.MessagePart.ApplicationNumber)); &#xD;&#xA;SOQL = SOQL.Replace(&quot;@LoanId&quot;, System.String.Format(&quot;&apos;{0}&apos;&quot;, SFMultiQueryRequestMsg.MessagePart.LoanId)); &#xD;&#xA;&#xD;&#xA;SFMultiQueryRequestMsg.MessagePart.q = SOQL; ' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Get SOQL' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageRef' OID='d18b8240-f761-4fdf-8b20-e6502090420c' ParentLink='Construct_MessageRef' LowerBound='494.31' HigherBound='494.53'>
                                    <om:Property Name='Ref' Value='SFMultiQueryRequestMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Construct' OID='7a7e9d7c-8c9b-472b-8ea8-01696b8dccd2' ParentLink='ComplexStatement_Statement' LowerBound='505.1' HigherBound='512.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Construct Temp Canonical' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageRef' OID='3743c799-5213-4c48-ab1e-b87470f06063' ParentLink='Construct_MessageRef' LowerBound='506.31' HigherBound='506.47'>
                                    <om:Property Name='Ref' Value='TempCanonicalMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageAssignment' OID='b64d860c-8b43-4af2-bd64-75463cbd7232' ParentLink='ComplexStatement_Statement' LowerBound='508.1' HigherBound='511.1'>
                                    <om:Property Name='Expression' Value='TempCanonicalMsg = CanonicalMsg;&#xD;&#xA;TempCanonicalMsg(*) = CanonicalMsg(*);' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Copy Canonical' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Construct' OID='12878e4c-18b6-43d2-9a10-0d15a5b4b268' ParentLink='ComplexStatement_Statement' LowerBound='512.1' HigherBound='518.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Create Canonical - Multi Request' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Transform' OID='42fa2a8a-bbb7-411a-ad48-16c4983ff60d' ParentLink='ComplexStatement_Statement' LowerBound='515.1' HigherBound='517.1'>
                                    <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.Multi.Map_Multi_Request_To_Canonical' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Map SF Multi Request To Canonical' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessagePartRef' OID='924bae85-df9c-402c-9d0b-443f4e5f04b8' ParentLink='Transform_InputMessagePartRef' LowerBound='516.128' HigherBound='516.156'>
                                        <om:Property Name='MessageRef' Value='TempCanonicalMsg' />
                                        <om:Property Name='PartRef' Value='MessagePart' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='MessagePartReference_35' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessagePartRef' OID='6609024a-0776-43e0-b10b-2aff9f308848' ParentLink='Transform_InputMessagePartRef' LowerBound='516.158' HigherBound='516.192'>
                                        <om:Property Name='MessageRef' Value='SFMultiQueryRequestMsg' />
                                        <om:Property Name='PartRef' Value='MessagePart' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='MessagePartReference_36' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessagePartRef' OID='1b897e60-e91c-4a0f-bb68-231e24f62024' ParentLink='Transform_OutputMessagePartRef' LowerBound='516.36' HigherBound='516.60'>
                                        <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                        <om:Property Name='PartRef' Value='MessagePart' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='MessagePartReference_37' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='MessageRef' OID='27074f1a-c3ba-4b60-a934-b537b2d27118' ParentLink='Construct_MessageRef' LowerBound='513.31' HigherBound='513.43'>
                                    <om:Property Name='Ref' Value='CanonicalMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Construct' OID='a92f17e3-4625-40e6-8d6c-8f81b2480390' ParentLink='ComplexStatement_Statement' LowerBound='518.1' HigherBound='528.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Init SF Query Result' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageAssignment' OID='12f346eb-bbea-466a-a515-be4f2b6829f3' ParentLink='ComplexStatement_Statement' LowerBound='521.1' HigherBound='527.1'>
                                    <om:Property Name='Expression' Value='TempXmlDoc = new System.Xml.XmlDocument(); &#xD;&#xA;TempXmlDoc.LoadXml(&quot;&lt;QueryResult xmlns=\&quot;http://SBA.gov/BizTalk/Shared/Salesforce/RestApi/Definition/Query/\&quot; /&gt;&quot;); &#xD;&#xA;&#xD;&#xA;SFRestQueryResultMsg.MessagePart = null; &#xD;&#xA;SFRestQueryResultMsg.MessagePart = TempXmlDoc; ' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Init SF Query Result' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageRef' OID='c293905e-7158-4919-be6f-d478df335d6e' ParentLink='Construct_MessageRef' LowerBound='519.31' HigherBound='519.51'>
                                    <om:Property Name='Ref' Value='SFRestQueryResultMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Scope' OID='2ca367f3-6579-4d2e-aa06-1853ffefc5ba' ParentLink='ComplexStatement_Statement' LowerBound='528.1' HigherBound='551.1'>
                            <om:Property Name='InitializedTransactionType' Value='True' />
                            <om:Property Name='IsSynchronized' Value='False' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='SF Multi Query Scope' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Call' OID='1093c121-d79b-429f-ab8b-bfab411f8558' ParentLink='ComplexStatement_Statement' LowerBound='533.1' HigherBound='535.1'>
                                <om:Property Name='Identifier' Value='Call_SF_Multi_Query' />
                                <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Query_NoParm' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Multi Query' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Parameter' OID='e0e86f3d-2f53-442f-902b-2662b7e6d2b7' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='Ref' />
                                    <om:Property Name='Name' Value='Status' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='a7c96edb-6bf9-43d4-a231-916dade55980' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='Ref' />
                                    <om:Property Name='Name' Value='Message' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='ebc3f83b-3540-4739-9802-c9214e6e9cc5' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='Out' />
                                    <om:Property Name='Name' Value='SFRestQueryResultMsg' />
                                    <om:Property Name='Type' Value='SBA.BizTalk.Shared.Salesforce.RestApi.Logic.QueryResultMsgType' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='cc9149d5-e165-429e-a56c-11e77a313dcf' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='SOQL' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Catch' OID='d4851353-2209-4626-a47a-4703a0bc7113' ParentLink='Scope_Catch' LowerBound='538.1' HigherBound='549.1'>
                                <om:Property Name='ExceptionName' Value='exMulti' />
                                <om:Property Name='ExceptionType' Value='System.Exception' />
                                <om:Property Name='IsFaultMessage' Value='False' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Catch Exception - SF Multi Query' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='VariableAssignment' OID='454342e6-f97a-4b53-8f6f-8727574e2b55' ParentLink='Catch_Statement' LowerBound='541.1' HigherBound='548.1'>
                                    <om:Property Name='Expression' Value='Status = &quot;Error&quot;; &#xD;&#xA;Message = System.String.Format(&quot;ETran Obligation failed querying information from Salesforce. Exception received... \r\n\r\n&quot; + &#xD;&#xA;                               &quot;SOQL: \r\n{0} \r\n\r\n&quot; + &#xD;&#xA;                               &quot;Exception Info: \r\n{1}&quot;, &#xD;&#xA;                               SOQL, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(exMulti)); ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Error Message' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Decision' OID='76bd31f7-6ba7-42cb-b59a-33bc3749fdb2' ParentLink='ComplexStatement_Statement' LowerBound='551.1' HigherBound='591.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Success?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='ca70645f-175c-4d70-af58-6aefeeed4e70' ParentLink='ReallyComplexStatement_Branch' LowerBound='552.21' HigherBound='579.1'>
                                <om:Property Name='Expression' Value='System.String.IsNullOrEmpty(Message) &amp;&amp; Status != &quot;Error&quot;' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Task' OID='e3f207a8-6b58-460e-9c60-1e12c1af64d4' ParentLink='ComplexStatement_Statement' LowerBound='554.1' HigherBound='578.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Merge Results' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Construct' OID='e58caa1f-d73f-416a-8ba5-059f3ba3d5ce' ParentLink='ComplexStatement_Statement' LowerBound='554.1' HigherBound='565.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Create SF Multi Result' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='MessageAssignment' OID='7098b66e-30c2-4018-a045-7764a4e07e05' ParentLink='ComplexStatement_Statement' LowerBound='557.1' HigherBound='564.1'>
                                            <om:Property Name='Expression' Value='TempXmlDoc = SBA.BizTalk.Shared.Salesforce.RestApi.Component.NamespaceFixer.Instance.FixNamespace(SFRestQueryResultMsg.MessagePart, &#xD;&#xA;                &quot;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&quot;); &#xD;&#xA;&#xD;&#xA;SFMultiQueryResultMsg.MessagePart = null; &#xD;&#xA;SFMultiQueryResultMsg.MessagePart = TempXmlDoc; &#xD;&#xA;SFMultiQueryResultMsg(*) = SFRestQueryResultMsg(*); ' />
                                            <om:Property Name='ReportToAnalyst' Value='False' />
                                            <om:Property Name='Name' Value='Make SF Multi Result' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='MessageRef' OID='7dfa5571-5bb9-492e-8e13-5fa677506862' ParentLink='Construct_MessageRef' LowerBound='555.35' HigherBound='555.56'>
                                            <om:Property Name='Ref' Value='SFMultiQueryResultMsg' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Construct' OID='0bcd248a-fedb-4439-aa51-4581bff7751d' ParentLink='ComplexStatement_Statement' LowerBound='565.1' HigherBound='572.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Construct Temp Canonical' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='MessageRef' OID='68d7a3a4-ee03-480d-bb77-019909a539e5' ParentLink='Construct_MessageRef' LowerBound='566.35' HigherBound='566.51'>
                                            <om:Property Name='Ref' Value='TempCanonicalMsg' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='MessageAssignment' OID='25f19671-cbbb-41ab-9f54-3e5bfbc66825' ParentLink='ComplexStatement_Statement' LowerBound='568.1' HigherBound='571.1'>
                                            <om:Property Name='Expression' Value='TempCanonicalMsg = CanonicalMsg;&#xD;&#xA;TempCanonicalMsg(*) = CanonicalMsg(*);' />
                                            <om:Property Name='ReportToAnalyst' Value='False' />
                                            <om:Property Name='Name' Value='Copy Canonical' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Construct' OID='b33d192d-36a2-4d47-b36b-7c7cc9799a38' ParentLink='ComplexStatement_Statement' LowerBound='572.1' HigherBound='578.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Create Canonical - Multi Result' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='Transform' OID='ee1664a1-16c3-4c8a-a549-d00593b52937' ParentLink='ComplexStatement_Statement' LowerBound='575.1' HigherBound='577.1'>
                                            <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.Multi.Map_Multi_Result_To_Canonical' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Map SF Multi Result To Canonical' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='MessagePartRef' OID='b62c0985-d423-42be-9290-f5958c7c96fb' ParentLink='Transform_InputMessagePartRef' LowerBound='576.131' HigherBound='576.159'>
                                                <om:Property Name='MessageRef' Value='TempCanonicalMsg' />
                                                <om:Property Name='PartRef' Value='MessagePart' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='MessagePartReference_32' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='MessagePartRef' OID='ff501738-2cdf-4695-8efa-bfa9226d6e91' ParentLink='Transform_InputMessagePartRef' LowerBound='576.161' HigherBound='576.194'>
                                                <om:Property Name='MessageRef' Value='SFMultiQueryResultMsg' />
                                                <om:Property Name='PartRef' Value='MessagePart' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='MessagePartReference_33' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='MessagePartRef' OID='24a77963-2795-4466-8773-1a944714713a' ParentLink='Transform_OutputMessagePartRef' LowerBound='576.40' HigherBound='576.64'>
                                                <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                                <om:Property Name='PartRef' Value='MessagePart' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='MessagePartReference_34' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='MessageRef' OID='6291d991-f794-4dd2-86cf-0b74c3c81356' ParentLink='Construct_MessageRef' LowerBound='573.35' HigherBound='573.47'>
                                            <om:Property Name='Ref' Value='CanonicalMsg' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='57c73e15-9534-43bf-9843-1de41110150e' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Task' OID='e5a633d9-a082-436c-a7ce-13e561390a86' ParentLink='ComplexStatement_Statement' LowerBound='581.1' HigherBound='590.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Handle Error' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='VariableAssignment' OID='a864eb7c-d233-4f39-9203-f1c1904d6cda' ParentLink='ComplexStatement_Statement' LowerBound='581.1' HigherBound='586.1'>
                                        <om:Property Name='Expression' Value='&#xD;&#xA;if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength);&#xD;&#xA;}' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Truncate Error' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Call' OID='a432802b-c350-4eda-8ab0-4c05ab0efbd6' ParentLink='ComplexStatement_Statement' LowerBound='586.1' HigherBound='588.1'>
                                        <om:Property Name='Identifier' Value='Call_Event_Request_MultiQuery' />
                                        <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Event Request' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='Parameter' OID='6ce20f9a-70c5-4850-bf3e-3476268117b8' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='OrchestrationInstanceId' />
                                            <om:Property Name='Type' Value='System.Guid' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='2a362eab-58e1-4609-8b4a-30a9fc66ed41' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='Status' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='6187d193-febc-46aa-84c4-f2046f714d1e' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='Stage' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='e5e68e03-2609-414a-a799-9827d0b2a338' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='ApplicationNumber' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='08512a1c-f388-41f2-91cc-3348c117a12f' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='SalesforceObjectName' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='757e21bf-7af6-4212-b2d7-d15d24b7b62e' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='SalesforceObjectId' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='b9026335-fa64-4f9e-af07-843b69be66b0' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='Message' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='a95be5de-9185-4d4f-90ce-20a91292571f' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='AutoDeclineReason' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Terminate' OID='2cdb7967-f371-4f6c-bfd7-47aaeeae9669' ParentLink='ComplexStatement_Statement' LowerBound='588.1' HigherBound='590.1'>
                                        <om:Property Name='ErrorMessage' Value='Message;' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Terminate' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Task' OID='f0381a1a-ad78-4b9a-a85a-13bea100c96a' ParentLink='ComplexStatement_Statement' LowerBound='591.1' HigherBound='727.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Validate Salesforce Information' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Task' OID='8ae31e70-1bef-486e-ab64-743b1eafee99' ParentLink='ComplexStatement_Statement' LowerBound='591.1' HigherBound='618.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Application Check' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Decision' OID='9b24f1ea-9f6d-4252-a5ae-ef5f5b8da25c' ParentLink='ComplexStatement_Statement' LowerBound='591.1' HigherBound='618.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Is Application OK?' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='DecisionBranch' OID='e1d66025-9845-476b-a182-0e9298075bc4' ParentLink='ReallyComplexStatement_Branch' LowerBound='592.21' HigherBound='605.1'>
                                    <om:Property Name='Expression' Value='SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue(&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.Id,&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.RecordType.Name,&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.Name)' />
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Yes' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='VariableAssignment' OID='6d80ef3e-768a-4c96-abce-67b3596c3446' ParentLink='ComplexStatement_Statement' LowerBound='597.1' HigherBound='604.1'>
                                        <om:Property Name='Expression' Value='if (!System.String.IsNullOrWhiteSpace(CanonicalMsg.MessagePart.Multi.QueryResult.records.FEMA_Registration_Number__c)) { &#xD;&#xA;    FEMARegistrationNumber = CanonicalMsg.MessagePart.Multi.QueryResult.records.FEMA_Registration_Number__c; &#xD;&#xA;} &#xD;&#xA;else { &#xD;&#xA;    FEMARegistrationNumber = System.String.Empty; &#xD;&#xA;}' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='FEMA Reg Num' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='DecisionBranch' OID='14a2412e-b37b-4368-a628-e824757f8128' ParentLink='ReallyComplexStatement_Branch'>
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Else' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='VariableAssignment' OID='2cf301f0-2c5a-4b29-8f72-11f438e24a2e' ParentLink='ComplexStatement_Statement' LowerBound='607.1' HigherBound='617.1'>
                                        <om:Property Name='Expression' Value='Status = &quot;Error&quot;; &#xD;&#xA;&#xD;&#xA;Message = System.String.Format(&quot;Salesforce Application not found or missing critical information. Fields checked were: \r\n\r\n&quot; + &#xD;&#xA;                               &quot;Application__c.Id \r\n&quot; + &#xD;&#xA;                               &quot;Application__c.RecordType.Name \r\n&quot; + &#xD;&#xA;                               &quot;Application__c.Name \r\n\r\n&quot; +&#xD;&#xA;                               &quot;One or more of these fields were found to be blank after attempting to retrieve the application from Salesforce. \r\n\r\n&quot; + &#xD;&#xA;                               &quot;SOQL: \r\n{0} \r\n\r\n&quot;,&#xD;&#xA;                               SOQL); &#xD;&#xA;' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Error Message' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Decision' OID='b0032d13-3618-4ca2-8ac7-c60557774143' ParentLink='ComplexStatement_Statement' LowerBound='618.1' HigherBound='640.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Success?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='95c4c3f9-da7d-47bb-85b7-2ecada6bd663' ParentLink='ReallyComplexStatement_Branch' LowerBound='619.21' HigherBound='640.1'>
                                <om:Property Name='Expression' Value='System.String.IsNullOrWhiteSpace(Message) &amp;&amp; Status != &quot;Error&quot; ' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Task' OID='a9d03c4c-2f9c-425c-b405-d645e4f09f6c' ParentLink='ComplexStatement_Statement' LowerBound='621.1' HigherBound='639.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Property Check' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='VariableAssignment' OID='8666dd9d-9e1e-414e-8382-2c3e9cec88d1' ParentLink='ComplexStatement_Statement' LowerBound='621.1' HigherBound='626.1'>
                                        <om:Property Name='Expression' Value='XpathStmtBase = &quot;string(/*[local-name()=&apos;Canonical&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Canonical/&apos;]/*[local-name()=&apos;Multi&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Canonical/&apos;]/*[local-name()=&apos;QueryResult&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Canonical/&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&apos;]/*[local-name()=&apos;Property__r&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&apos;]/*[local-name()=&apos;{0}&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&apos;])&quot;; &#xD;&#xA;&#xD;&#xA;XpathStmt = System.String.Format(XpathStmtBase, &quot;Id&quot;); &#xD;&#xA;PropertyId = System.Convert.ToString(xpath(CanonicalMsg.MessagePart, XpathStmt)); &#xD;&#xA;' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Get Prop Id' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Decision' OID='521e77b9-757a-43c7-b376-cd4f6326f647' ParentLink='ComplexStatement_Statement' LowerBound='626.1' HigherBound='639.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Is Property OK?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='73829f77-6eaa-48c8-93e0-c6b09f07128b' ParentLink='ReallyComplexStatement_Branch' LowerBound='627.25' HigherBound='630.1'>
                                            <om:Property Name='Expression' Value='SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue(PropertyId)' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Yes' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='2ff07492-88e8-4722-9d6f-fd024bd35eca' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='5d548c04-68b5-46e3-8e6d-d3bee9418c4d' ParentLink='ComplexStatement_Statement' LowerBound='632.1' HigherBound='638.1'>
                                                <om:Property Name='Expression' Value='Status = &quot;Error&quot;; &#xD;&#xA;&#xD;&#xA;Message = System.String.Format(&quot;The Application in Salesforce is missing a related Property record. \r\n\r\n&quot; +  &#xD;&#xA;                               &quot;SOQL: \r\n{0} \r\n\r\n&quot;,&#xD;&#xA;                               SOQL); &#xD;&#xA;' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Error Message' />
                                                <om:Property Name='Signal' Value='True' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='89a5973e-28e6-431d-bc7b-0868428d9b6b' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Decision' OID='8fb70f73-141c-4fbd-a372-4fb3f1ae9e6d' ParentLink='ComplexStatement_Statement' LowerBound='640.1' HigherBound='661.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Success?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='51a470ce-5aed-4b08-8986-0dc5dbbc17a5' ParentLink='ReallyComplexStatement_Branch' LowerBound='641.21' HigherBound='661.1'>
                                <om:Property Name='Expression' Value='System.String.IsNullOrWhiteSpace(Message) &amp;&amp; Status != &quot;Error&quot; ' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Task' OID='bbe0b095-9dd6-4815-b660-5287a68cd056' ParentLink='ComplexStatement_Statement' LowerBound='643.1' HigherBound='660.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Applicant Check' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='VariableAssignment' OID='75b494ee-b30c-494e-80bf-c139b90e019c' ParentLink='ComplexStatement_Statement' LowerBound='643.1' HigherBound='647.1'>
                                        <om:Property Name='Expression' Value='XpathStmtBase = &quot;/*[local-name()=&apos;Canonical&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Canonical/&apos;]/*[local-name()=&apos;Multi&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Canonical/&apos;]/*[local-name()=&apos;QueryResult&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Canonical/&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&apos;]/*[local-name()=&apos;Applicants__r&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&apos;]/*[local-name()=&apos;{0}&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/&apos;]&quot;; &#xD;&#xA;XpathStmt = System.String.Format(&quot;count(&quot; + XpathStmtBase + &quot;)&quot;, &quot;Id&quot;); &#xD;&#xA;ApplicantCount = System.Convert.ToInt32(xpath(CanonicalMsg.MessagePart, XpathStmt)); ' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Get Apl Count' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Decision' OID='7a92d22b-aadb-445c-a886-0201148360aa' ParentLink='ComplexStatement_Statement' LowerBound='647.1' HigherBound='660.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Is Applicant(s) OK?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='c828878b-4372-4a34-96f0-89bced15c90c' ParentLink='ReallyComplexStatement_Branch' LowerBound='648.25' HigherBound='651.1'>
                                            <om:Property Name='Expression' Value='ApplicantCount&gt;0' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Yes' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='6c7b7219-64c2-4d94-8d55-82367789de02' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='d6e94240-696e-4892-a3e6-bdf1a29c1e71' ParentLink='ComplexStatement_Statement' LowerBound='653.1' HigherBound='659.1'>
                                                <om:Property Name='Expression' Value='Status = &quot;Error&quot;; &#xD;&#xA;&#xD;&#xA;Message = System.String.Format(&quot;Salesforce Applicant(s) not found. \r\n\r\n&quot; +  &#xD;&#xA;                               &quot;SOQL: \r\n{0} \r\n\r\n&quot;,&#xD;&#xA;                               SOQL); ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Error Message' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='84bfc69f-fe9f-4bf7-831c-99e2b83b8e26' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Decision' OID='4ed55e4b-6692-43ca-9b79-4f2bcc5213cc' ParentLink='ComplexStatement_Statement' LowerBound='661.1' HigherBound='689.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Success?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='1ea4992f-1168-421d-b2fe-cef057d420a1' ParentLink='ReallyComplexStatement_Branch' LowerBound='662.21' HigherBound='689.1'>
                                <om:Property Name='Expression' Value='System.String.IsNullOrWhiteSpace(Message) &amp;&amp; Status != &quot;Error&quot; ' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Task' OID='b87191ad-a660-435e-a2cb-a1fb30d03fdd' ParentLink='ComplexStatement_Statement' LowerBound='664.1' HigherBound='688.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Loan Check' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Decision' OID='52e6d3b2-e5f4-4e8d-bc18-a75e82006e2b' ParentLink='ComplexStatement_Statement' LowerBound='664.1' HigherBound='688.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Is Loan OK?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='60fda2cf-89f0-446e-b236-aa7140e11cbb' ParentLink='ReallyComplexStatement_Branch' LowerBound='665.25' HigherBound='673.1'>
                                            <om:Property Name='Expression' Value='SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue(&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.Loans__r.records.Id,&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.Loans__r.records.Interest_Rate__c,&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.Loans__r.records.Loan_Amount__c,&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.Loans__r.records.Payment_Amount__c,&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.Loans__r.records.Total_Term__c)' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Yes' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='7b83d8f9-f6d5-4934-a263-fad8f0da3a6e' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='9e148208-44ef-4cdc-a42c-9e416afcd572' ParentLink='ComplexStatement_Statement' LowerBound='675.1' HigherBound='687.1'>
                                                <om:Property Name='Expression' Value='Status = &quot;Error&quot;; &#xD;&#xA;&#xD;&#xA;Message = System.String.Format(&quot;Salesforce Loan not found or missing critical information. Fields checked were: \r\n\r\n&quot; + &#xD;&#xA;                               &quot;Loan__c.Id, \r\n&quot; + &#xD;&#xA;                               &quot;Loan__c.Interest_Rate__c, \r\n&quot; + &#xD;&#xA;                               &quot;Loan__c.Loan_Amount__c, \r\n&quot; + &#xD;&#xA;                               &quot;Loan__c.Payment_Amount__c, \r\n&quot; + &#xD;&#xA;                               &quot;Loan__c.Total_Term__c \r\n\r\n&quot; +&#xD;&#xA;                               &quot;One or more of these fields were found to be blank after attempting to retrieve the loan from Salesforce. \r\n\r\n&quot; + &#xD;&#xA;                               &quot;SOQL: \r\n{0} \r\n\r\n&quot;,&#xD;&#xA;                               SOQL); ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Error Message' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='d3f891b4-482b-4bc0-ac97-5b7d5604015a' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Decision' OID='13e77923-27b5-4ed5-bc22-24ebe4654e7b' ParentLink='ComplexStatement_Statement' LowerBound='689.1' HigherBound='714.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Success?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='8736cd6a-872b-4872-b37e-7dc97e46773a' ParentLink='ReallyComplexStatement_Branch' LowerBound='690.21' HigherBound='714.1'>
                                <om:Property Name='Expression' Value='System.String.IsNullOrWhiteSpace(Message) &amp;&amp; Status != &quot;Error&quot; ' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Task' OID='bc92e933-fc63-4e99-803d-983b7026a5e0' ParentLink='ComplexStatement_Statement' LowerBound='692.1' HigherBound='713.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Disaster Check' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Decision' OID='6224a92c-8223-442f-8e52-b783fb9eeb2b' ParentLink='ComplexStatement_Statement' LowerBound='692.1' HigherBound='713.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Loan has Disaster? ' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='703051ba-781c-416d-b9d3-3580b288d8ef' ParentLink='ReallyComplexStatement_Branch' LowerBound='693.25' HigherBound='708.1'>
                                            <om:Property Name='Expression' Value='SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue(&#xD;&#xA;            CanonicalMsg.MessagePart.Multi.QueryResult.records.Loans__r.records.Disaster_Declaration__c)' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Yes' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Decision' OID='cfe2bb5e-26dd-45c8-91ae-1de1fe5b497b' ParentLink='ComplexStatement_Statement' LowerBound='696.1' HigherBound='707.1'>
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Have Disaster Number?' />
                                                <om:Property Name='Signal' Value='True' />
                                                <om:Element Type='DecisionBranch' OID='efdf5d6b-cbdf-450b-aebf-6248ebedc327' ParentLink='ReallyComplexStatement_Branch' LowerBound='697.29' HigherBound='702.1'>
                                                    <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(CanonicalMsg.MessagePart.Multi.QueryResult.records.Loans__r.records.Disaster_Declaration__r.Name)' />
                                                    <om:Property Name='IsGhostBranch' Value='True' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Yes' />
                                                    <om:Property Name='Signal' Value='False' />
                                                    <om:Element Type='VariableAssignment' OID='1ac9ad1b-fc47-4b04-bbe9-0ab85a3f387b' ParentLink='ComplexStatement_Statement' LowerBound='699.1' HigherBound='701.1'>
                                                        <om:Property Name='Expression' Value='DisasterNumber = CanonicalMsg.MessagePart.Multi.QueryResult.records.Loans__r.records.Disaster_Declaration__r.Name; ' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Disaster Number' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                </om:Element>
                                                <om:Element Type='DecisionBranch' OID='dd0e3145-78b7-4d91-baa7-b593e44d94cc' ParentLink='ReallyComplexStatement_Branch'>
                                                    <om:Property Name='IsGhostBranch' Value='True' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Else' />
                                                    <om:Property Name='Signal' Value='False' />
                                                    <om:Element Type='VariableAssignment' OID='9b07ae96-effc-4118-80e7-f8b5eac607b0' ParentLink='ComplexStatement_Statement' LowerBound='704.1' HigherBound='706.1'>
                                                        <om:Property Name='Expression' Value='DisasterNumber = System.String.Empty; ' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='BLANK Dis Num' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='1df972f7-33a7-4254-9109-a91fe38dafc6' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='b662e531-c1c7-443a-8683-af26cccfff37' ParentLink='ComplexStatement_Statement' LowerBound='710.1' HigherBound='712.1'>
                                                <om:Property Name='Expression' Value='DisasterNumber = System.String.Empty; ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='BLANK Dis Num' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='f589ad24-9c2f-4209-9e95-05c5cc80c469' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Decision' OID='aa969da3-eed4-48fa-9332-ec444cc95831' ParentLink='ComplexStatement_Statement' LowerBound='714.1' HigherBound='727.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Have Error(s)?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='9cd1656e-f6c0-40cc-9e50-8840d895f6a2' ParentLink='ReallyComplexStatement_Branch' LowerBound='715.21' HigherBound='727.1'>
                                <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(Message) || Status == &quot;Error&quot;' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Task' OID='57c7ea08-f14b-41f8-b7e8-862ca33c2257' ParentLink='ComplexStatement_Statement' LowerBound='717.1' HigherBound='726.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Handle Error' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='VariableAssignment' OID='dcacfe7e-1f73-44f1-a0b9-0a2022c7e7ae' ParentLink='ComplexStatement_Statement' LowerBound='717.1' HigherBound='722.1'>
                                        <om:Property Name='Expression' Value='&#xD;&#xA;if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength);&#xD;&#xA;}' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Truncate Error' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Call' OID='dbb339c2-8150-4c63-8806-b255331757ca' ParentLink='ComplexStatement_Statement' LowerBound='722.1' HigherBound='724.1'>
                                        <om:Property Name='Identifier' Value='Call_Event_Request_SF_Validate' />
                                        <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Event Request' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='Parameter' OID='ba236c1d-f0c5-4a56-8772-718b1e944206' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='OrchestrationInstanceId' />
                                            <om:Property Name='Type' Value='System.Guid' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='262b88ae-9314-409a-960d-0b9fbfd47e83' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='Status' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='71103717-3962-4ac2-9900-9c336d6c1146' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='Stage' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='e1566b79-8577-4b4d-a4c6-a56fd1dc9d73' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='ApplicationNumber' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='03a9931a-1291-499a-85ee-9b767b56c1f8' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='SalesforceObjectName' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='7c32df0f-20c1-4e3d-9327-f6cfb29b8986' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='SalesforceObjectId' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='7015e903-780a-4afb-944d-25f6bcbde88e' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='Message' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='8a5bf182-edc2-4aba-b019-571d34a18a87' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='AutoDeclineReason' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Terminate' OID='28b6d666-93b4-41df-9f8d-602f8ba25659' ParentLink='ComplexStatement_Statement' LowerBound='724.1' HigherBound='726.1'>
                                        <om:Property Name='ErrorMessage' Value='Message;' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Terminate' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='23b2c17c-2a44-4451-b907-be7a18086c21' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Task' OID='0071f020-905a-40f1-bed6-26e8cd631a6e' ParentLink='ComplexStatement_Statement' LowerBound='727.1' HigherBound='816.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Borrower Business Types' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Task' OID='b31ad991-4ba4-4540-8a32-4f4c43824b79' ParentLink='ComplexStatement_Statement' LowerBound='727.1' HigherBound='747.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Gather Applicant Business Types' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Construct' OID='44911854-955d-43bb-bfc6-6722f32d0395' ParentLink='ComplexStatement_Statement' LowerBound='727.1' HigherBound='734.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Construct Temp Canonical' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageRef' OID='9fc63383-f05f-4d76-95c2-7d44bc5e37b0' ParentLink='Construct_MessageRef' LowerBound='728.31' HigherBound='728.47'>
                                    <om:Property Name='Ref' Value='TempCanonicalMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageAssignment' OID='fa68909e-f015-4840-981d-ccdb37827939' ParentLink='ComplexStatement_Statement' LowerBound='730.1' HigherBound='733.1'>
                                    <om:Property Name='Expression' Value='TempCanonicalMsg = CanonicalMsg;&#xD;&#xA;TempCanonicalMsg(*) = CanonicalMsg(*);' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Copy Canonical' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Construct' OID='5290e08f-80c7-436f-803c-b1315c3550e6' ParentLink='ComplexStatement_Statement' LowerBound='734.1' HigherBound='740.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Create Canonical - Business Types' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Transform' OID='335b89f5-45e7-4d84-86dc-2d58e8a30475' ParentLink='ComplexStatement_Statement' LowerBound='737.1' HigherBound='739.1'>
                                    <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.BusinessType.Map_Borrower_Business_Types_Initial' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Map Borrower Business Types to Canonical' />
                                    <om:Property Name='Signal' Value='False' />
                                    <om:Element Type='MessagePartRef' OID='74b6eee4-fe47-4b49-af5c-d82d378ac322' ParentLink='Transform_InputMessagePartRef' LowerBound='738.140' HigherBound='738.168'>
                                        <om:Property Name='MessageRef' Value='TempCanonicalMsg' />
                                        <om:Property Name='PartRef' Value='MessagePart' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='MessagePartReference_17' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessagePartRef' OID='70113d3f-1e43-4b0f-9091-6335dc15d67d' ParentLink='Transform_OutputMessagePartRef' LowerBound='738.36' HigherBound='738.60'>
                                        <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                        <om:Property Name='PartRef' Value='MessagePart' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='MessagePartReference_18' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='MessageRef' OID='dc069f79-824e-4f33-8ba4-5a0837d2ee7f' ParentLink='Construct_MessageRef' LowerBound='735.31' HigherBound='735.43'>
                                    <om:Property Name='Ref' Value='CanonicalMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='VariableAssignment' OID='4826c5b0-3943-4325-9e4e-87f72c12ceb4' ParentLink='ComplexStatement_Statement' LowerBound='740.1' HigherBound='747.1'>
                                <om:Property Name='Expression' Value='&#xD;&#xA;XpathStmt = &quot;/*[local-name()=&apos;Canonical&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Canonical/&apos;]/*[local-name()=&apos;BorrowerBusinessTypes&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Canonical/&apos;]/*[local-name()=&apos;BorrowerBusinessType&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Borrower/BorrowerBusinessTypes/&apos;]/*[local-name()=&apos;LegalOrgTypeMapping&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Rules/LegalOrgTypeMapping/&apos;]/*[local-name()=&apos;SalesforceBusinessType&apos; and namespace-uri()=&apos;http://SBA.gov/ETRANObligation/Definition/Rules/LegalOrgTypeMapping/&apos;]&quot;; &#xD;&#xA;&#xD;&#xA;SFBusTypesListAll = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageValueList(CanonicalMsg, XpathStmt); &#xD;&#xA;&#xD;&#xA;SFBusTypesDict = new SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringDictionary(); ' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Get Bus Types' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Task' OID='3d8828da-78a2-43c8-a377-2e57499bff91' ParentLink='ComplexStatement_Statement' LowerBound='747.1' HigherBound='816.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Loop over Applicant Business Types' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='While' OID='337b1489-81fe-4c81-b643-325f915ce008' ParentLink='ComplexStatement_Statement' LowerBound='747.1' HigherBound='816.1'>
                                <om:Property Name='Expression' Value='SFBusTypesListAllIndex &lt; SFBusTypesListAll.Length' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Dedupe List to Dict' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='VariableAssignment' OID='d65b5928-bbdd-4eb9-8a2a-9de3fcd344b1' ParentLink='ComplexStatement_Statement' LowerBound='750.1' HigherBound='752.1'>
                                    <om:Property Name='Expression' Value='SFBusTypeCurrent = SFBusTypesListAll[SFBusTypesListAllIndex]; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Set Current' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Decision' OID='b0a9fff1-335e-44ca-8de1-7b948f7c9932' ParentLink='ComplexStatement_Statement' LowerBound='752.1' HigherBound='813.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Dict has Value?' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='DecisionBranch' OID='1d3b99b5-0dff-4a6d-ac19-4ae62a14ebca' ParentLink='ReallyComplexStatement_Branch' LowerBound='753.25' HigherBound='756.1'>
                                        <om:Property Name='Expression' Value='SFBusTypesDict.Contains(SFBusTypeCurrent)' />
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Yes' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                    <om:Element Type='DecisionBranch' OID='8cbecb6c-c23d-4599-95a9-b641d07f2351' ParentLink='ReallyComplexStatement_Branch'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Else' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='Task' OID='1d161741-6392-435f-a80e-89245fe63a9c' ParentLink='ComplexStatement_Statement' LowerBound='758.1' HigherBound='799.1'>
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Get ETRAN Code' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='VariableAssignment' OID='e6594a9c-33bc-40dd-a68e-f76d62f4518c' ParentLink='ComplexStatement_Statement' LowerBound='758.1' HigherBound='760.1'>
                                                <om:Property Name='Expression' Value='SFBusTypesDict.Add(SFBusTypeCurrent, null); ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Add to Dict' />
                                                <om:Property Name='Signal' Value='True' />
                                            </om:Element>
                                            <om:Element Type='Construct' OID='8cf8d7b6-59fd-4bef-9c0a-a8ad76673e47' ParentLink='ComplexStatement_Statement' LowerBound='760.1' HigherBound='773.1'>
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Create Legal Org Type Mapping' />
                                                <om:Property Name='Signal' Value='True' />
                                                <om:Element Type='MessageRef' OID='1a32e13b-4930-458d-b397-535e330a75f9' ParentLink='Construct_MessageRef' LowerBound='761.39' HigherBound='761.54'>
                                                    <om:Property Name='Ref' Value='LegalOrgTypeMsg' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                                <om:Element Type='MessageAssignment' OID='34a45bba-d0f6-441b-8390-5e8294683ec1' ParentLink='ComplexStatement_Statement' LowerBound='763.1' HigherBound='770.1'>
                                                    <om:Property Name='Expression' Value='TmpXmlDoc = SBA.BizTalk.Shared.MessageHelper.Embedded.EmbeddedMessageLoader.Instance.GetXmlDocument(&#xD;&#xA;                &quot;SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping.xml&quot;, &#xD;&#xA;                &quot;SBA.ETRANObligation.Definition.Rules, Version=2.0.0.0, Culture=neutral, PublicKeyToken=18227d56be4ceab0&quot;); &#xD;&#xA;&#xD;&#xA;LegalOrgTypeMsg.MessagePart = null; &#xD;&#xA;LegalOrgTypeMsg.MessagePart = TmpXmlDoc; &#xD;&#xA;' />
                                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                                    <om:Property Name='Name' Value='Make Legal Org Type Mapping' />
                                                    <om:Property Name='Signal' Value='True' />
                                                </om:Element>
                                                <om:Element Type='MessageAssignment' OID='12412404-137d-46f0-971b-720cffe24c18' ParentLink='ComplexStatement_Statement' LowerBound='770.1' HigherBound='772.1'>
                                                    <om:Property Name='Expression' Value='LegalOrgTypeMsg.MessagePart.SalesforceBusinessType = SFBusTypeCurrent; ' />
                                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                                    <om:Property Name='Name' Value='Set SF Value' />
                                                    <om:Property Name='Signal' Value='True' />
                                                </om:Element>
                                            </om:Element>
                                            <om:Element Type='CallRules' OID='12c21c0f-1403-44a1-8090-72ef0c71722d' ParentLink='ComplexStatement_Statement' LowerBound='773.1' HigherBound='797.1'>
                                                <om:Property Name='PolicyName' Value='ETran Obligation Legal Org Type' />
                                                <om:Property Name='PolicyVersion' Value='-1' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='BRE: Legal Org Types' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='RulesParameterRef' OID='dff95666-d455-4093-8c0b-ca7ac967c943' ParentLink='CallRules_RulesParameterRef'>
                                                    <om:Property Name='Reference' Value='LegalOrgTypeMsg' />
                                                    <om:Property Name='PartReference' Value='MessagePart' />
                                                    <om:Property Name='Alias' Value='SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='RulesParameterRef_4' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                            <om:Element Type='VariableAssignment' OID='4ce034b6-731f-4da5-bf76-5e7aefe3c650' ParentLink='ComplexStatement_Statement' LowerBound='797.1' HigherBound='799.1'>
                                                <om:Property Name='Expression' Value='SFBusTypesDict.AddOrUpdate(SFBusTypeCurrent, LegalOrgTypeMsg.MessagePart.ETranLegalOrgTypeCode); ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Update Dict' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='Task' OID='77dc5d2b-3f68-42f9-af99-f47a3eade13f' ParentLink='ComplexStatement_Statement' LowerBound='799.1' HigherBound='812.1'>
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Map to Canonical' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='Construct' OID='fdc2d8d0-0948-45a5-b78f-fb6623249aad' ParentLink='ComplexStatement_Statement' LowerBound='799.1' HigherBound='806.1'>
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Construct Temp Canonical' />
                                                <om:Property Name='Signal' Value='True' />
                                                <om:Element Type='MessageAssignment' OID='395e7675-20ee-4b62-a85e-1fcd23db0560' ParentLink='ComplexStatement_Statement' LowerBound='802.1' HigherBound='805.1'>
                                                    <om:Property Name='Expression' Value='TempCanonicalMsg = CanonicalMsg;&#xD;&#xA;TempCanonicalMsg(*) = CanonicalMsg(*);' />
                                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                                    <om:Property Name='Name' Value='Copy Canonical' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                                <om:Element Type='MessageRef' OID='07bd7e02-614d-48da-9f60-8a4f6124525b' ParentLink='Construct_MessageRef' LowerBound='800.39' HigherBound='800.55'>
                                                    <om:Property Name='Ref' Value='TempCanonicalMsg' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                            <om:Element Type='Construct' OID='485be72b-d94c-42b5-9ceb-95af3a201160' ParentLink='ComplexStatement_Statement' LowerBound='806.1' HigherBound='812.1'>
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Create Canonical - ETRAN Org Code' />
                                                <om:Property Name='Signal' Value='True' />
                                                <om:Element Type='Transform' OID='41d93f01-bd49-4b5b-91b4-ffc419a157a8' ParentLink='ComplexStatement_Statement' LowerBound='809.1' HigherBound='811.1'>
                                                    <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.BusinessType.Map_Business_Type_To_Canonical' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Map Business Type To Canonical' />
                                                    <om:Property Name='Signal' Value='True' />
                                                    <om:Element Type='MessagePartRef' OID='0a04373d-bdae-40ad-9a9f-ef4decfb3fbf' ParentLink='Transform_InputMessagePartRef' LowerBound='810.143' HigherBound='810.171'>
                                                        <om:Property Name='MessageRef' Value='TempCanonicalMsg' />
                                                        <om:Property Name='PartRef' Value='MessagePart' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='MessagePartReference_11' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                    <om:Element Type='MessagePartRef' OID='e00eb1de-fb82-46e4-9f3e-ccb4adced2e1' ParentLink='Transform_InputMessagePartRef' LowerBound='810.173' HigherBound='810.200'>
                                                        <om:Property Name='MessageRef' Value='LegalOrgTypeMsg' />
                                                        <om:Property Name='PartRef' Value='MessagePart' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='MessagePartReference_16' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                    <om:Element Type='MessagePartRef' OID='d13682af-9475-4b84-979d-6c40d12d8840' ParentLink='Transform_OutputMessagePartRef' LowerBound='810.44' HigherBound='810.68'>
                                                        <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                                        <om:Property Name='PartRef' Value='MessagePart' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='MessagePartReference_19' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                </om:Element>
                                                <om:Element Type='MessageRef' OID='a9e0b5a7-9503-45d2-82a6-b683a6451cf5' ParentLink='Construct_MessageRef' LowerBound='807.39' HigherBound='807.51'>
                                                    <om:Property Name='Ref' Value='CanonicalMsg' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='cb646f58-a905-46c7-8a84-edfd4161a8bc' ParentLink='ComplexStatement_Statement' LowerBound='813.1' HigherBound='815.1'>
                                    <om:Property Name='Expression' Value='SFBusTypesListAllIndex = SFBusTypesListAllIndex + 1; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Increment' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Task' OID='c944ba07-479f-4621-8706-0160d32a2890' ParentLink='ComplexStatement_Statement' LowerBound='816.1' HigherBound='1059.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='ETRAN Originate' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='aa8a2433-15c4-46f7-9543-53b72600abdd' ParentLink='ComplexStatement_Statement' LowerBound='816.1' HigherBound='822.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Create ETran App Msg' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Transform' OID='80a6a119-7813-4e28-88ab-46a6630512c7' ParentLink='ComplexStatement_Statement' LowerBound='819.1' HigherBound='821.1'>
                                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.ETRANOriginate.MapETRANOriginateApp' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Map ETRAN Originate App' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='MessagePartRef' OID='3ed51e86-4cff-4345-8ee7-b62cf27c0771' ParentLink='Transform_InputMessagePartRef' LowerBound='820.135' HigherBound='820.159'>
                                    <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_3' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='76e8e3b6-9d45-40db-bcf7-4499b0a07f8e' ParentLink='Transform_OutputMessagePartRef' LowerBound='820.36' HigherBound='820.68'>
                                    <om:Property Name='MessageRef' Value='ETRANOriginateAppMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_4' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageRef' OID='202cb12a-a0bb-4da1-861f-44b3da2c6a86' ParentLink='Construct_MessageRef' LowerBound='817.31' HigherBound='817.51'>
                                <om:Property Name='Ref' Value='ETRANOriginateAppMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='200c79c9-76fb-4c38-9226-18d20f7d9594' ParentLink='ComplexStatement_Statement' LowerBound='822.1' HigherBound='824.1'>
                            <om:Property Name='Expression' Value='ETranRequestXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(ETRANOriginateAppMsg); ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Request Xml' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Task' OID='e7a5b3a0-f285-4c8b-8eb2-1a3e8e2d7c3d' ParentLink='ComplexStatement_Statement' LowerBound='824.1' HigherBound='865.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='BT Audit - Initial Create' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Decision' OID='cde6f24c-94fc-4851-b2b8-d8e9dc9b0773' ParentLink='ComplexStatement_Statement' LowerBound='824.1' HigherBound='865.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Do BT Audit?' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='DecisionBranch' OID='9d3efb7e-820f-42dc-bb03-710a0514d95e' ParentLink='ReallyComplexStatement_Branch' LowerBound='825.21' HigherBound='865.1'>
                                    <om:Property Name='Expression' Value='ETranObligationTransportMsg.MessagePart.EnableBTAuditPayloadLog' />
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Yes' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Scope' OID='be1a9e2f-3546-4813-987a-bd850c28f69c' ParentLink='ComplexStatement_Statement' LowerBound='827.1' HigherBound='851.1'>
                                        <om:Property Name='InitializedTransactionType' Value='True' />
                                        <om:Property Name='IsSynchronized' Value='False' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='BT Audit Initial Create Scope' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='VariableAssignment' OID='2495d267-9a74-48ab-9f30-a9989e2bb202' ParentLink='ComplexStatement_Statement' LowerBound='832.1' HigherBound='834.1'>
                                            <om:Property Name='Expression' Value='ProcessStatusCode = &quot;Processing&quot;; ' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Get BT Audit' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Call' OID='04a53283-43f1-4ee1-bfae-2c72db7ecda9' ParentLink='ComplexStatement_Statement' LowerBound='834.1' HigherBound='836.1'>
                                            <om:Property Name='Identifier' Value='Call_BT_Audit_All' />
                                            <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___All' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='BT Audit All' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Parameter' OID='26239c45-485f-4756-b342-840abf3426d3' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='Ref' />
                                                <om:Property Name='Name' Value='BTAuditStatus' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='6aa596fd-e727-4e8c-8869-ca52afbb5d27' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='Stage' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='5f1bfbfa-7cc9-405e-b531-789f0e777634' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='ETranResponseXml' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='6bde3f77-71fe-4f0a-b71f-a5f234f193e0' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='ETranRequestXml' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='285d844b-ddb8-4fb3-a669-2ff5719b19a2' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='ProcessStatusCode' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='b95666bd-6257-435e-a1bf-492b7843dfd4' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='Ref' />
                                                <om:Property Name='Name' Value='BTAuditMessage' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='fe782252-d6aa-4a28-9f24-c88457f8d0f5' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='InterfaceType' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='f9782dec-ce6d-4dce-98c2-04097421c7e2' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='FEMARegistrationNumber' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='40f607b9-40fa-4621-9e3d-5ac303e74803' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='FEMAEventCode' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='3915af25-16e9-4dc3-bf9e-d433e984f00e' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='DisasterNumber' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='390cf243-8eaf-40f0-86fe-042e8801537f' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='Ref' />
                                                <om:Property Name='Name' Value='BTAuditId' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='3e338220-58d1-495a-92a8-0f0d8533113b' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='ApplicationNumber' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='VariableAssignment' OID='e5be2368-7319-4409-9bbc-e0514833f531' ParentLink='ComplexStatement_Statement' LowerBound='836.1' HigherBound='838.1'>
                                            <om:Property Name='Expression' Value='BTAuditStepCompleted = &quot;Initial Create&quot;; ' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='BT Audit Step' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Catch' OID='308dc554-dd96-4643-8e3d-7f75f2a89cb5' ParentLink='Scope_Catch' LowerBound='841.1' HigherBound='849.1'>
                                            <om:Property Name='ExceptionName' Value='exBtAuditInitial' />
                                            <om:Property Name='ExceptionType' Value='System.Exception' />
                                            <om:Property Name='IsFaultMessage' Value='False' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Catch Exception - BT Audit Initial' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='VariableAssignment' OID='0ba01092-39a5-421c-a33c-0df2c6f11375' ParentLink='Catch_Statement' LowerBound='844.1' HigherBound='848.1'>
                                                <om:Property Name='Expression' Value='BTAuditStatus = &quot;Error&quot;; &#xD;&#xA;BTAuditMessage = System.String.Format(&quot;BT Audit Initial Create - exception encountered... \r\n\r\n{0}&quot;, &#xD;&#xA;                                      SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(exBtAuditInitial)); ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='BT Audit Error' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Decision' OID='7f8e5ca0-4ac8-4253-bbdd-e38b3698d140' ParentLink='ComplexStatement_Statement' LowerBound='851.1' HigherBound='864.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Errors?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='c341ac28-1c1f-4de5-8198-7e32a0e768fe' ParentLink='ReallyComplexStatement_Branch' LowerBound='852.25' HigherBound='864.1'>
                                            <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(BTAuditMessage) || BTAuditStatus == &quot;Error&quot; ' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Yes' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='e75d9761-3ecd-4aa6-a5f8-cd61936ca8e3' ParentLink='ComplexStatement_Statement' LowerBound='854.1' HigherBound='863.1'>
                                                <om:Property Name='Expression' Value='BTAuditMessage = System.String.Format(&quot;ETran Obligation was unable to log initial BT Audit create due to exception. \r\n&quot; + &#xD;&#xA;                                      &quot;This will not prevent further ETran Obligation processing... \r\n\r\n{0}&quot;, BTAuditMessage); &#xD;&#xA;&#xD;&#xA;if (BTAuditMessage.Length &gt; ErrorMaxLength) {&#xD;&#xA;    BTAuditMessage = BTAuditMessage.Substring(0, ErrorMaxLength); &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;System.Diagnostics.EventLog.WriteEntry(&quot;BizTalk: ETran Obligation&quot;, BTAuditMessage, System.Diagnostics.EventLogEntryType.Warning); ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Silent Log' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='3fa57d06-8719-4230-bd14-a8874121fecb' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='DecisionBranch' OID='f1476714-5330-404c-a85e-32e27433d71d' ParentLink='ReallyComplexStatement_Branch'>
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Else' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Construct' OID='c38b0c6a-bef9-4f76-bd04-22e4716b2935' ParentLink='ComplexStatement_Statement' LowerBound='865.1' HigherBound='903.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct ETRAN Originate Request' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Transform' OID='1c0f2bde-d4cb-4e35-b957-c7813b3252e2' ParentLink='ComplexStatement_Statement' LowerBound='868.1' HigherBound='870.1'>
                                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.ETRANOriginate.Map_ETRAN_Originate_Request' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Map ETRAN Originate Request' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='MessagePartRef' OID='de3f1841-c4d4-4f5d-b559-7d86768774a4' ParentLink='Transform_InputMessagePartRef' LowerBound='869.146' HigherBound='869.178'>
                                    <om:Property Name='MessageRef' Value='ETRANOriginateAppMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_7' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='4aa35777-8c0d-45e0-b8df-a1969d279b98' ParentLink='Transform_InputMessagePartRef' LowerBound='869.180' HigherBound='869.208'>
                                    <om:Property Name='MessageRef' Value='ETranCredentials' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_49' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='9c6d8f89-1019-4279-9f50-330ba10ab587' ParentLink='Transform_OutputMessagePartRef' LowerBound='869.36' HigherBound='869.72'>
                                    <om:Property Name='MessageRef' Value='ETRANOriginateRequestMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_8' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='ad9521cd-5727-40c6-af6c-f4d936be6881' ParentLink='ComplexStatement_Statement' LowerBound='870.1' HigherBound='902.1'>
                                <om:Property Name='Expression' Value='ETRANOriginateRequestMsg(WCF.Action) = ETranObligationTransportMsg.MessagePart.Message.Action; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.AffiliateApplicationName) = ETranObligationTransportMsg.MessagePart.Message.AffiliateApplicationName; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.AlgorithmSuite) = ETranObligationTransportMsg.MessagePart.Message.AlgorithmSuite; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.ClientCertificate) = ETranObligationTransportMsg.MessagePart.Message.ClientCertificate; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.CloseTimeout) = ETranObligationTransportMsg.MessagePart.Message.CloseTimeout; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.InboundBodyLocation) = ETranObligationTransportMsg.MessagePart.Message.InboundBodyLocation; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.InboundBodyPathExpression) = ETranObligationTransportMsg.MessagePart.Message.InboundBodyPathExpression; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.InboundNodeEncoding) = ETranObligationTransportMsg.MessagePart.Message.InboundNodeEncoding; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.MaxReceivedMessageSize) = System.Convert.ToInt32(ETranObligationTransportMsg.MessagePart.Message.MaxReceivedMessageSize); &#xD;&#xA;ETRANOriginateRequestMsg(WCF.MessageClientCredentialType) = ETranObligationTransportMsg.MessagePart.Message.MessageClientCredentialType; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.MessageEncoding) = ETranObligationTransportMsg.MessagePart.Message.MessageEncoding; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.OpenTimeout) = ETranObligationTransportMsg.MessagePart.Message.OpenTimeout; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.OutboundBodyLocation) = ETranObligationTransportMsg.MessagePart.Message.OutboundBodyLocation; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.OutboundXmlTemplate) = ETranObligationTransportMsg.MessagePart.Message.OutboundXmlTemplate; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.Password) = ETranObligationTransportMsg.MessagePart.Message.Password; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.Prop"+
@"agateFaultMessage) = ETranObligationTransportMsg.MessagePart.Message.PropagateFaultMessage; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.ProxyAddress) = ETranObligationTransportMsg.MessagePart.Message.ProxyAddress; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.ProxyToUse) = ETranObligationTransportMsg.MessagePart.Message.ProxyToUse; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.ProxyUserName) = ETranObligationTransportMsg.MessagePart.Message.ProxyUserName; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.SecurityMode) = ETranObligationTransportMsg.MessagePart.Message.SecurityMode; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.SendTimeout) = ETranObligationTransportMsg.MessagePart.Message.SendTimeout; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.ServiceCertificate) = ETranObligationTransportMsg.MessagePart.Message.ServiceCertificate; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.TextEncoding) = ETranObligationTransportMsg.MessagePart.Message.TextEncoding; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.TransportClientCredentialType) = ETranObligationTransportMsg.MessagePart.Message.TransportClientCredentialType; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.UseAcsAuthentication) = ETranObligationTransportMsg.MessagePart.Message.UseAcsAuthentication; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.UserName) = ETranObligationTransportMsg.MessagePart.Message.UserName; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.UseSasAuthentication) = ETranObligationTransportMsg.MessagePart.Message.UseSasAuthentication; &#xD;&#xA;ETRANOriginateRequestMsg(WCF.UseSSO) = ETranObligationTransportMsg.MessagePart.Message.UseSSO; &#xD;&#xA;&#xD;&#xA;ETran_Originate3_Port(Microsoft.XLANGs.BaseTypes.Address) = ETranObligationTransportMsg.MessagePart.Port.Address; &#xD;&#xA;ETran_Originate3_Port(Microsoft.XLANGs.BaseTypes.TransportType) = ETranObligationTransportMsg.MessagePart.Port.TransportType; ' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Set Transport' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='0a894b21-e17e-4392-9687-3c6d9b26f23c' ParentLink='Construct_MessageRef' LowerBound='866.31' HigherBound='866.55'>
                                <om:Property Name='Ref' Value='ETRANOriginateRequestMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Scope' OID='b4d0474c-bf75-4063-ba60-381037091dd1' ParentLink='ComplexStatement_Statement' LowerBound='903.1' HigherBound='1001.1'>
                            <om:Property Name='InitializedTransactionType' Value='True' />
                            <om:Property Name='IsSynchronized' Value='False' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='ETran Originate3 Scope' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Send' OID='6349357f-3bdb-445b-aff5-bd1df9fe9a96' ParentLink='ComplexStatement_Statement' LowerBound='908.1' HigherBound='910.1'>
                                <om:Property Name='PortName' Value='ETran_Originate3_Port' />
                                <om:Property Name='MessageName' Value='ETRANOriginateRequestMsg' />
                                <om:Property Name='OperationName' Value='Originate3' />
                                <om:Property Name='OperationMessageName' Value='Request' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Send ETRAN Originate Request' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Receive' OID='30ae5582-ae42-4403-ad5d-41fe457cb229' ParentLink='ComplexStatement_Statement' LowerBound='910.1' HigherBound='912.1'>
                                <om:Property Name='Activate' Value='False' />
                                <om:Property Name='PortName' Value='ETran_Originate3_Port' />
                                <om:Property Name='MessageName' Value='ETRANActualResponseMsg' />
                                <om:Property Name='OperationName' Value='Originate3' />
                                <om:Property Name='OperationMessageName' Value='Response' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Get ETRAN Originate Response' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='VariableAssignment' OID='42c9a161-5bdb-4211-b4d8-f5a78abb438d' ParentLink='ComplexStatement_Statement' LowerBound='912.1' HigherBound='915.1'>
                                <om:Property Name='Expression' Value='ETranResponseXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(ETRANActualResponseMsg); &#xD;&#xA;ProcessStatusCode = &quot;Processing&quot;; ' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Response Xml' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Catch' OID='99906019-9683-41de-8764-abc3678057d9' ParentLink='Scope_Catch' LowerBound='918.1' HigherBound='945.1'>
                                <om:Property Name='ExceptionName' Value='exCvcInvocationEx' />
                                <om:Property Name='ExceptionType' Value='ETran_Originate3_Port.Originate3.CVCInvocationException' />
                                <om:Property Name='IsFaultMessage' Value='False' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Catch CVCInvocationException' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Construct' OID='b32dd36a-2ed2-4a9b-b92b-69e11a6d3c2d' ParentLink='Catch_Statement' LowerBound='921.1' HigherBound='929.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create ETran Fault' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageRef' OID='06425e3e-d624-4501-8407-cd2c636ce7f1' ParentLink='Construct_MessageRef' LowerBound='922.43' HigherBound='922.56'>
                                        <om:Property Name='Ref' Value='ETranFaultMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessageAssignment' OID='96090c4c-5e94-497b-b747-1568d9d04b4d' ParentLink='ComplexStatement_Statement' LowerBound='924.1' HigherBound='928.1'>
                                        <om:Property Name='Expression' Value='ETranFaultMsg.MessagePart = null; &#xD;&#xA;ETranFaultMsg.MessagePart = exCvcInvocationEx.MessagePart; &#xD;&#xA;ETranFaultMsg(*) = exCvcInvocationEx(*); ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Make ETran Fault' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='a4bb8223-5e83-4177-92c6-9d04426e684f' ParentLink='Catch_Statement' LowerBound='929.1' HigherBound='932.1'>
                                    <om:Property Name='Expression' Value='ETranResponseXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(ETranFaultMsg); &#xD;&#xA;ProcessStatusCode = &quot;Error&quot;; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Response Xml' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='f446587d-7c3e-4157-aa36-802d7a94c84e' ParentLink='Catch_Statement' LowerBound='932.1' HigherBound='936.1'>
                                    <om:Property Name='Expression' Value='Message = System.String.Format(&quot;ETran Servicing request resulted in fault message. \r\n\r\n{0}&quot;, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(ETranFaultMsg)); &#xD;&#xA;Status = &quot;Error&quot;; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Error Message' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Construct' OID='d604f178-325b-4ee4-8ddc-c07d2e2a1208' ParentLink='Catch_Statement' LowerBound='936.1' HigherBound='944.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create Response' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Transform' OID='eae34c24-eb36-41d5-93f5-5ce40bc41a62' ParentLink='ComplexStatement_Statement' LowerBound='939.1' HigherBound='941.1'>
                                        <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.ETRAN_Originate.Map_CVCInvocationEx_To_Response' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Map Response' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='MessagePartRef' OID='591fad4c-2cdc-41f4-b0f6-fac517796dec' ParentLink='Transform_OutputMessagePartRef' LowerBound='940.48' HigherBound='940.82'>
                                            <om:Property Name='MessageRef' Value='ETRANActualResponseMsg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_24' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='MessagePartRef' OID='2f46d802-d859-4834-b985-09b2a92a4415' ParentLink='Transform_InputMessagePartRef' LowerBound='940.161' HigherBound='940.186'>
                                            <om:Property Name='MessageRef' Value='ETranFaultMsg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_23' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='MessageAssignment' OID='2a50ae98-feaa-4db6-a095-0db7bf13e858' ParentLink='ComplexStatement_Statement' LowerBound='941.1' HigherBound='943.1'>
                                        <om:Property Name='Expression' Value='ETRANActualResponseMsg(*) = ETranFaultMsg(*); ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Context' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='636df783-e611-40b1-a03d-a2481ce1a18b' ParentLink='Construct_MessageRef' LowerBound='937.43' HigherBound='937.65'>
                                        <om:Property Name='Ref' Value='ETRANActualResponseMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Catch' OID='7d2fa022-4f17-4af1-806e-7cf284a6340a' ParentLink='Scope_Catch' LowerBound='945.1' HigherBound='972.1'>
                                <om:Property Name='ExceptionName' Value='exFault1_1' />
                                <om:Property Name='ExceptionType' Value='ETran_Originate3_Port.Originate3.Fault_1_1' />
                                <om:Property Name='IsFaultMessage' Value='False' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Catch Fault_1_1' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Construct' OID='f623fa76-7b97-4f50-b2ff-a56dc9421539' ParentLink='Catch_Statement' LowerBound='948.1' HigherBound='956.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create Fault 1_1' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageAssignment' OID='d17ca2e3-032c-4721-92f3-d2e007c83a24' ParentLink='ComplexStatement_Statement' LowerBound='951.1' HigherBound='955.1'>
                                        <om:Property Name='Expression' Value='Fault1_1Msg.MessagePart = null; &#xD;&#xA;Fault1_1Msg.MessagePart = exFault1_1.MessagePart; &#xD;&#xA;Fault1_1Msg(*) = exFault1_1(*); ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Make Fault 1_1' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='10a4b9ca-a450-4a1a-b5b3-84f5b46e93b6' ParentLink='Construct_MessageRef' LowerBound='949.43' HigherBound='949.54'>
                                        <om:Property Name='Ref' Value='Fault1_1Msg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='480197e8-6c5c-49a2-800c-142b8d28e144' ParentLink='Catch_Statement' LowerBound='956.1' HigherBound='959.1'>
                                    <om:Property Name='Expression' Value='ETranResponseXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(Fault1_1Msg); &#xD;&#xA;ProcessStatusCode = &quot;Error&quot;; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Response Xml' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='03144c18-b59b-466a-892c-184dc6bcfd35' ParentLink='Catch_Statement' LowerBound='959.1' HigherBound='963.1'>
                                    <om:Property Name='Expression' Value='Message = System.String.Format(&quot;ETran Servicing request resulted in fault message. \r\n\r\n{0}&quot;, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(Fault1_1Msg)); &#xD;&#xA;Status = &quot;Error&quot;; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Error Message' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='Construct' OID='18019260-298c-460c-9f58-2ae16cdaa7e4' ParentLink='Catch_Statement' LowerBound='963.1' HigherBound='971.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create Response' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Transform' OID='9bfbf936-d273-4bdb-9974-249b20eef392' ParentLink='ComplexStatement_Statement' LowerBound='966.1' HigherBound='968.1'>
                                        <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.ETRAN_Originate.Map_Fault1_1_To_Response' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Map Response' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='MessagePartRef' OID='55576f5e-3435-45d2-81db-208167cd0618' ParentLink='Transform_OutputMessagePartRef' LowerBound='967.48' HigherBound='967.82'>
                                            <om:Property Name='MessageRef' Value='ETRANActualResponseMsg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_6' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='MessagePartRef' OID='6415a80c-46e1-456b-8711-79c92b6d0714' ParentLink='Transform_InputMessagePartRef' LowerBound='967.154' HigherBound='967.177'>
                                            <om:Property Name='MessageRef' Value='Fault1_1Msg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_5' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='MessageAssignment' OID='7b7f5fba-6ca2-4380-a560-974de1821da5' ParentLink='ComplexStatement_Statement' LowerBound='968.1' HigherBound='970.1'>
                                        <om:Property Name='Expression' Value='ETRANActualResponseMsg(*) = Fault1_1Msg(*); ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Context' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='7afb7198-fe16-448a-993c-55a36e944ccd' ParentLink='Construct_MessageRef' LowerBound='964.43' HigherBound='964.65'>
                                        <om:Property Name='Ref' Value='ETRANActualResponseMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Catch' OID='cc6d81be-86bf-4968-8b73-f409f74af0fe' ParentLink='Scope_Catch' LowerBound='972.1' HigherBound='999.1'>
                                <om:Property Name='ExceptionName' Value='exFault1_2' />
                                <om:Property Name='ExceptionType' Value='ETran_Originate3_Port.Originate3.Fault_1_2' />
                                <om:Property Name='IsFaultMessage' Value='False' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Catch Fault_1_2' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Construct' OID='98f13ef0-a950-4e36-945e-3f7e8bbca6a0' ParentLink='Catch_Statement' LowerBound='975.1' HigherBound='983.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create Fault 1_2' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageRef' OID='765c5eff-d6a8-48da-b69f-2421dc70eec2' ParentLink='Construct_MessageRef' LowerBound='976.43' HigherBound='976.54'>
                                        <om:Property Name='Ref' Value='Fault1_2Msg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessageAssignment' OID='22518c7d-0630-4b29-b738-6fa19d979eb1' ParentLink='ComplexStatement_Statement' LowerBound='978.1' HigherBound='982.1'>
                                        <om:Property Name='Expression' Value='Fault1_2Msg.MessagePart = null; &#xD;&#xA;Fault1_2Msg.MessagePart = exFault1_2.MessagePart; &#xD;&#xA;Fault1_2Msg(*) = exFault1_2(*); ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Make Fault 1_2' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='0186d6ea-328e-46ef-9421-fc726aec3588' ParentLink='Catch_Statement' LowerBound='983.1' HigherBound='986.1'>
                                    <om:Property Name='Expression' Value='ETranResponseXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(Fault1_2Msg); &#xD;&#xA;ProcessStatusCode = &quot;Error&quot;; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Response Xml' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='650e496e-914e-40e7-a2c6-9c545444dc55' ParentLink='Catch_Statement' LowerBound='986.1' HigherBound='990.1'>
                                    <om:Property Name='Expression' Value='Message = System.String.Format(&quot;ETran Servicing request resulted in fault message. \r\n\r\n{0}&quot;, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(Fault1_2Msg)); &#xD;&#xA;Status = &quot;Error&quot;; ' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Error Message' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Construct' OID='b0fa6f71-8dea-45dd-8c08-002803563b39' ParentLink='Catch_Statement' LowerBound='990.1' HigherBound='998.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create Response' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Transform' OID='570e2b2c-a0a5-469b-8867-76f066b4e1de' ParentLink='ComplexStatement_Statement' LowerBound='993.1' HigherBound='995.1'>
                                        <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.ETRAN_Originate.Map_Fault1_2_To_Response' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Map Response' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='MessagePartRef' OID='d9762081-a042-474d-b8a4-d31e776c9e7a' ParentLink='Transform_OutputMessagePartRef' LowerBound='994.48' HigherBound='994.82'>
                                            <om:Property Name='MessageRef' Value='ETRANActualResponseMsg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_15' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='MessagePartRef' OID='5942d182-68ac-4895-8c26-5db297f9e166' ParentLink='Transform_InputMessagePartRef' LowerBound='994.154' HigherBound='994.177'>
                                            <om:Property Name='MessageRef' Value='Fault1_2Msg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_14' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='MessageAssignment' OID='bfc6b945-03ed-436a-b171-020452c98447' ParentLink='ComplexStatement_Statement' LowerBound='995.1' HigherBound='997.1'>
                                        <om:Property Name='Expression' Value='ETRANActualResponseMsg(*) = Fault1_2Msg(*); ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Context' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='0c38a45a-65ef-47c4-baff-5e7f8ce05bad' ParentLink='Construct_MessageRef' LowerBound='991.43' HigherBound='991.65'>
                                        <om:Property Name='Ref' Value='ETRANActualResponseMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Task' OID='c4501d24-e757-4a56-8acd-3eb5eadc0651' ParentLink='ComplexStatement_Statement' LowerBound='1001.1' HigherBound='1044.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='BT Audit - Response Update' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Decision' OID='30dc3b61-7116-469c-8506-ba23b61bf0f1' ParentLink='ComplexStatement_Statement' LowerBound='1001.1' HigherBound='1044.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Do BT Audit &amp; Create Was Success?' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='DecisionBranch' OID='ccbbcdca-cc04-484c-88aa-ee61294f654f' ParentLink='ReallyComplexStatement_Branch' LowerBound='1002.21' HigherBound='1044.1'>
                                    <om:Property Name='Expression' Value='ETranObligationTransportMsg.MessagePart.EnableBTAuditPayloadLog &amp;&amp; !System.String.IsNullOrWhiteSpace(BTAuditId) ' />
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Yes' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Scope' OID='f712dbeb-9d89-4737-8557-1145de70028f' ParentLink='ComplexStatement_Statement' LowerBound='1004.1' HigherBound='1030.1'>
                                        <om:Property Name='InitializedTransactionType' Value='True' />
                                        <om:Property Name='IsSynchronized' Value='False' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='BT Audit Response Update Scope' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='VariableAssignment' OID='5bea8229-b7ea-4637-a557-b5cee6d72def' ParentLink='ComplexStatement_Statement' LowerBound='1009.1' HigherBound='1013.1'>
                                            <om:Property Name='Expression' Value='if (Status == &quot;Error&quot; || Status == &quot;Failure&quot;) {&#xD;&#xA;    ProcessStatusCode = Status; &#xD;&#xA;}' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Get BT Audit' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Call' OID='c3036ad5-ad94-4a0c-ab3a-69311289f7aa' ParentLink='ComplexStatement_Statement' LowerBound='1013.1' HigherBound='1015.1'>
                                            <om:Property Name='Identifier' Value='Call_BT_Audit_Response_Update' />
                                            <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='BT Audit Response Update' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Parameter' OID='02c450aa-8bd7-4361-bdeb-91ef5b3a41df' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='ETranResponseXml' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='4dcfce2f-637b-4d3c-acfb-7c3e4af757a7' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='Ref' />
                                                <om:Property Name='Name' Value='BTAuditMessage' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='e56e071e-fca4-46ca-8140-a76ff83cc7ed' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='Ref' />
                                                <om:Property Name='Name' Value='BTAuditStatus' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='9c31ffa5-5b76-42d8-99ac-f6d2d731c36c' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='Ref' />
                                                <om:Property Name='Name' Value='BTAuditId' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                            <om:Element Type='Parameter' OID='b5cbef6e-43ea-4846-b272-c5cc13d5867d' ParentLink='InvokeStatement_Parameter'>
                                                <om:Property Name='Direction' Value='In' />
                                                <om:Property Name='Name' Value='ProcessStatusCode' />
                                                <om:Property Name='Type' Value='System.String' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='VariableAssignment' OID='745209b1-9002-4917-b07c-424c690a79b3' ParentLink='ComplexStatement_Statement' LowerBound='1015.1' HigherBound='1017.1'>
                                            <om:Property Name='Expression' Value='BTAuditStepCompleted = &quot;Response Update&quot;; ' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='BT Audit Step' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='Catch' OID='61993345-8f02-4c4f-8b7a-7c87996eb345' ParentLink='Scope_Catch' LowerBound='1020.1' HigherBound='1028.1'>
                                            <om:Property Name='ExceptionName' Value='exBtAuditResponse' />
                                            <om:Property Name='ExceptionType' Value='System.Exception' />
                                            <om:Property Name='IsFaultMessage' Value='False' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Catch Exception - BT Audit Response' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='VariableAssignment' OID='8591f6d3-56e0-4723-ac82-69699f3c8e33' ParentLink='Catch_Statement' LowerBound='1023.1' HigherBound='1027.1'>
                                                <om:Property Name='Expression' Value='BTAuditStatus = &quot;Error&quot;; &#xD;&#xA;BTAuditMessage = System.String.Format(&quot;BT Audit Response Update - exception encountered... \r\n\r\n{0}&quot;, &#xD;&#xA;                                      SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(exBtAuditResponse)); ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='BT Audit Error' />
                                                <om:Property Name='Signal' Value='True' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Decision' OID='74e015d6-3b7c-4992-901e-56d287f861c9' ParentLink='ComplexStatement_Statement' LowerBound='1030.1' HigherBound='1043.1'>
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Errors?' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='DecisionBranch' OID='f1c2b435-f60e-404d-a8c3-64ebed9d0557' ParentLink='ReallyComplexStatement_Branch' LowerBound='1031.25' HigherBound='1043.1'>
                                            <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(BTAuditMessage) || BTAuditStatus == &quot;Error&quot; ' />
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Yes' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='VariableAssignment' OID='57297fef-0f33-4f61-b3e6-5f02ac89f13e' ParentLink='ComplexStatement_Statement' LowerBound='1033.1' HigherBound='1042.1'>
                                                <om:Property Name='Expression' Value='BTAuditMessage = System.String.Format(&quot;ETran Obligation was unable to log response update to BT Audit due to exception. \r\n&quot; + &#xD;&#xA;                                      &quot;This will not prevent further ETran Obligation processing... \r\n\r\n{0}&quot;, BTAuditMessage); &#xD;&#xA;&#xD;&#xA;if (BTAuditMessage.Length &gt; ErrorMaxLength) {&#xD;&#xA;    BTAuditMessage = BTAuditMessage.Substring(0, ErrorMaxLength); &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;System.Diagnostics.EventLog.WriteEntry(&quot;BizTalk: ETran Obligation&quot;, BTAuditMessage, System.Diagnostics.EventLogEntryType.Warning); ' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Silent Log' />
                                                <om:Property Name='Signal' Value='True' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='DecisionBranch' OID='514c3fac-2701-4c0a-81a5-20be53dc9280' ParentLink='ReallyComplexStatement_Branch'>
                                            <om:Property Name='IsGhostBranch' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Else' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='DecisionBranch' OID='0ec11361-864b-4850-bd5f-5e85abee775b' ParentLink='ReallyComplexStatement_Branch'>
                                    <om:Property Name='IsGhostBranch' Value='True' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Else' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Construct' OID='59b04336-ea71-4fc6-8858-1abbb269b940' ParentLink='ComplexStatement_Statement' LowerBound='1044.1' HigherBound='1051.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Temp Canonical' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='281afe3d-e653-4c3b-834d-0d1ce27c2168' ParentLink='Construct_MessageRef' LowerBound='1045.31' HigherBound='1045.47'>
                                <om:Property Name='Ref' Value='TempCanonicalMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='47417190-a5a6-42db-a02e-bfba1552fa8f' ParentLink='ComplexStatement_Statement' LowerBound='1047.1' HigherBound='1050.1'>
                                <om:Property Name='Expression' Value='TempCanonicalMsg = CanonicalMsg;&#xD;&#xA;TempCanonicalMsg(*) = CanonicalMsg(*);' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Copy Canonical' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Construct' OID='6fd785fb-4a9c-4524-832c-028bc8d8a7d6' ParentLink='ComplexStatement_Statement' LowerBound='1051.1' HigherBound='1059.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Canonical - ETRAN Originate' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='aa951222-50f1-4b8a-b0cc-3f7ef31bc508' ParentLink='Construct_MessageRef' LowerBound='1052.31' HigherBound='1052.43'>
                                <om:Property Name='Ref' Value='CanonicalMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='Transform' OID='c2a831e3-fb8e-404c-bb10-433a158b372e' ParentLink='ComplexStatement_Statement' LowerBound='1054.1' HigherBound='1056.1'>
                                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.ETRANOriginate.Map_ETRAN_Originate_Response_to_Canonical' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Map ETRAN Originate Response to Canonical' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessagePartRef' OID='80f4b0c5-ec60-4bb6-95a3-c1afe8bd22e5' ParentLink='Transform_InputMessagePartRef' LowerBound='1055.148' HigherBound='1055.176'>
                                    <om:Property Name='MessageRef' Value='TempCanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_45' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='fd3c287c-cc49-4526-83db-58fe4d909d4c' ParentLink='Transform_InputMessagePartRef' LowerBound='1055.178' HigherBound='1055.212'>
                                    <om:Property Name='MessageRef' Value='ETRANActualResponseMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_46' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='04e1ff3e-6a05-41c0-8eef-3bbf12995b00' ParentLink='Transform_OutputMessagePartRef' LowerBound='1055.36' HigherBound='1055.60'>
                                    <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_47' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='5ee431f4-422d-456b-9bea-7da152f086fa' ParentLink='ComplexStatement_Statement' LowerBound='1056.1' HigherBound='1058.1'>
                                <om:Property Name='Expression' Value='CanonicalMsg(*) = TempCanonicalMsg(*); ' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Context' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Task' OID='c1f31b98-9531-457a-b4e1-b587a32a3ddd' ParentLink='ComplexStatement_Statement' LowerBound='1059.1' HigherBound='1076.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Event_Request__c Info' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='9d3c1a15-00f3-4942-95cc-111b1506ef9a' ParentLink='ComplexStatement_Statement' LowerBound='1059.1' HigherBound='1067.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Temp Canonical' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageAssignment' OID='68cd5629-edf7-479e-9335-0767c21a2c57' ParentLink='ComplexStatement_Statement' LowerBound='1062.1' HigherBound='1066.1'>
                                <om:Property Name='Expression' Value='&#xD;&#xA;TempCanonicalMsg = CanonicalMsg; &#xD;&#xA;TempCanonicalMsg(*) = CanonicalMsg(*); ' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Assign Canonical to Temp' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='dfbe59b4-5642-4e6d-bdd4-8745018741fe' ParentLink='Construct_MessageRef' LowerBound='1060.31' HigherBound='1060.47'>
                                <om:Property Name='Ref' Value='TempCanonicalMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Construct' OID='52f4e19b-7488-4125-b79c-f288ecdbd7aa' ParentLink='ComplexStatement_Statement' LowerBound='1067.1' HigherBound='1076.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Final Canonical' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessageRef' OID='48c3c631-fb8f-4cc3-9411-78035d8c41a1' ParentLink='Construct_MessageRef' LowerBound='1068.31' HigherBound='1068.43'>
                                <om:Property Name='Ref' Value='CanonicalMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='Transform' OID='d943fe17-bff7-4240-b9cf-b60c0ab170e0' ParentLink='ComplexStatement_Statement' LowerBound='1070.1' HigherBound='1072.1'>
                                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.Event_Request__c.Map_Event_Request_c' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Map Final Canonical' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessagePartRef' OID='f6a4f1e1-8704-47b6-9f05-332e1c7547dc' ParentLink='Transform_OutputMessagePartRef' LowerBound='1071.36' HigherBound='1071.60'>
                                    <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_13' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='dbbfab3d-ebdf-4f90-86fc-b9c7e9887db9' ParentLink='Transform_InputMessagePartRef' LowerBound='1071.128' HigherBound='1071.156'>
                                    <om:Property Name='MessageRef' Value='TempCanonicalMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_12' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='58ae8d28-bd20-4ca1-93a8-f6673a64dee7' ParentLink='ComplexStatement_Statement' LowerBound='1072.1' HigherBound='1075.1'>
                                <om:Property Name='Expression' Value='CanonicalMsg(*) = TempCanonicalMsg(*); &#xD;&#xA;&#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Context' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='407491ad-8e56-4849-b0a4-a2208446ab24' ParentLink='ComplexStatement_Statement' LowerBound='1076.1' HigherBound='1083.1'>
                        <om:Property Name='Expression' Value='&#xD;&#xA;Message = CanonicalMsg.MessagePart.Event_Request__c.Log_Message__c;&#xD;&#xA;Status = CanonicalMsg.MessagePart.Event_Request__c.Status__c;&#xD;&#xA;&#xD;&#xA;LoanOriginateSuccess = (Status == &quot;Success&quot;); &#xD;&#xA;&#xD;&#xA;' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Eval Success' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Decision' OID='23fe3f13-a120-4f74-9da3-c89630b8d5dd' ParentLink='ComplexStatement_Statement' LowerBound='1083.1' HigherBound='1141.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Loan Obligated Successfully?' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='e00304fa-0328-4f16-b54c-ce4bdfa7159f' ParentLink='ReallyComplexStatement_Branch' LowerBound='1084.21' HigherBound='1141.1'>
                            <om:Property Name='Expression' Value='LoanOriginateSuccess' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Success' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='Task' OID='fad7893d-5970-460e-beff-21385a182ab7' ParentLink='ComplexStatement_Statement' LowerBound='1086.1' HigherBound='1140.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Update Loan__c on Success' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Construct' OID='5632e4b5-8266-4067-9369-94760c8aa9e0' ParentLink='ComplexStatement_Statement' LowerBound='1086.1' HigherBound='1092.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Construct Loan__c Update' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageRef' OID='dd296099-da03-4f97-a433-216bed6e622f' ParentLink='Construct_MessageRef' LowerBound='1087.35' HigherBound='1087.57'>
                                        <om:Property Name='Ref' Value='SFLoanUpdateRequestMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='Transform' OID='861e285b-7bf9-4edd-85e0-0640d0a1493b' ParentLink='ComplexStatement_Statement' LowerBound='1089.1' HigherBound='1091.1'>
                                        <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.Loan__c.Map_Loan__c_Update_Request' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Make Loan__c Update' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='MessagePartRef' OID='168c2e4d-c240-437b-b097-809a3e0b0df6' ParentLink='Transform_OutputMessagePartRef' LowerBound='1090.40' HigherBound='1090.74'>
                                            <om:Property Name='MessageRef' Value='SFLoanUpdateRequestMsg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_10' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='MessagePartRef' OID='2b504df4-57ec-4957-a80b-9003bb74ad61' ParentLink='Transform_InputMessagePartRef' LowerBound='1090.140' HigherBound='1090.164'>
                                            <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_9' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='Construct' OID='422224de-0a06-4a0e-9632-3bb098b5c287' ParentLink='ComplexStatement_Statement' LowerBound='1092.1' HigherBound='1103.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create SF Rest Save' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageAssignment' OID='e84ae361-8d4c-4fc2-88a5-63447777d6eb' ParentLink='ComplexStatement_Statement' LowerBound='1095.1' HigherBound='1102.1'>
                                        <om:Property Name='Expression' Value='TempXmlDoc = SBA.BizTalk.Shared.Salesforce.RestApi.Component.NamespaceFixer.Instance.FixNamespace(SFLoanUpdateRequestMsg.MessagePart, &#xD;&#xA;                &quot;http://SBA.gov/BizTalk/Shared/Salesforce/RestApi/Definition/Save/&quot;); &#xD;&#xA;&#xD;&#xA;SFRestSaveRequestMsg.MessagePart = null; &#xD;&#xA;SFRestSaveRequestMsg.MessagePart = TempXmlDoc; &#xD;&#xA;SFRestSaveRequestMsg(*) = SFLoanUpdateRequestMsg(*); ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Make SF Rest Save' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='23120262-3e16-4e3d-bd96-62258889ca73' ParentLink='Construct_MessageRef' LowerBound='1093.35' HigherBound='1093.55'>
                                        <om:Property Name='Ref' Value='SFRestSaveRequestMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='Construct' OID='0c7d3478-5311-49cf-86ec-ac720091a870' ParentLink='ComplexStatement_Statement' LowerBound='1103.1' HigherBound='1113.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Init SF Save Results' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageAssignment' OID='b718acb3-bc1a-4465-8a30-c14c67dc9212' ParentLink='ComplexStatement_Statement' LowerBound='1106.1' HigherBound='1112.1'>
                                        <om:Property Name='Expression' Value='TempXmlDoc = new System.Xml.XmlDocument(); &#xD;&#xA;TempXmlDoc.LoadXml(&quot;&lt;results xmlns=\&quot;http://SBA.gov/BizTalk/Shared/Salesforce/RestApi/Definition/Save/\&quot; /&gt;&quot;); &#xD;&#xA;&#xD;&#xA;SFRestSaveResultMsg.MessagePart = null; &#xD;&#xA;SFRestSaveResultMsg.MessagePart = TempXmlDoc; ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Init SF Save Results' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='c11a24d2-1e3c-4fcc-95d4-2f5e435cf612' ParentLink='Construct_MessageRef' LowerBound='1104.35' HigherBound='1104.54'>
                                        <om:Property Name='Ref' Value='SFRestSaveResultMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='Scope' OID='8fe62c7e-9afd-4c62-b0b7-e42771c201b4' ParentLink='ComplexStatement_Statement' LowerBound='1113.1' HigherBound='1140.1'>
                                    <om:Property Name='InitializedTransactionType' Value='True' />
                                    <om:Property Name='IsSynchronized' Value='False' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Loan Update Scope' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Call' OID='b335a54e-2838-490d-a584-37dbc63de55c' ParentLink='ComplexStatement_Statement' LowerBound='1118.1' HigherBound='1120.1'>
                                        <om:Property Name='Identifier' Value='Call_SF_Loan_Save' />
                                        <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Save' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Loan Save' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='Parameter' OID='58c60cfe-0472-481c-8aa9-c99e8c47052a' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='Ref' />
                                            <om:Property Name='Name' Value='Status' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='ed6d2e5f-5677-4f8c-aafd-68c310b8c89e' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='In' />
                                            <om:Property Name='Name' Value='SFRestSaveRequestMsg' />
                                            <om:Property Name='Type' Value='SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveRequestMsgType' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='699f68a4-fcf2-4f17-8be1-39441beb7d7c' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='Out' />
                                            <om:Property Name='Name' Value='SFRestSaveResultMsg' />
                                            <om:Property Name='Type' Value='SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveResultMsgType' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='Parameter' OID='fa2a2931-7ece-4686-9d7f-fa06325bd4a6' ParentLink='InvokeStatement_Parameter'>
                                            <om:Property Name='Direction' Value='Ref' />
                                            <om:Property Name='Name' Value='Message' />
                                            <om:Property Name='Type' Value='System.String' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='Catch' OID='00850782-f21a-4da8-b87a-5abd98e80453' ParentLink='Scope_Catch' LowerBound='1123.1' HigherBound='1138.1'>
                                        <om:Property Name='ExceptionName' Value='exLoanUpdate' />
                                        <om:Property Name='ExceptionType' Value='System.Exception' />
                                        <om:Property Name='IsFaultMessage' Value='False' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Catch Exception - Loan Update' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='VariableAssignment' OID='8150612d-c260-416e-9be3-e3df0af996b7' ParentLink='Catch_Statement' LowerBound='1126.1' HigherBound='1137.1'>
                                            <om:Property Name='Expression' Value='Status = &quot;Error&quot;; &#xD;&#xA;Message = System.String.Format(&quot;ETran Obligation failed to update the Loan in Salesforce with the ETran Loan Number &amp; Obligated Date &quot; + &#xD;&#xA;                               &quot;due to an exception encountered. \r\n\r\n&quot; + &#xD;&#xA;                               &quot;ApplicationNumber: &apos;{0}&apos; \r\n&quot; + &#xD;&#xA;                               &quot;LoanId: &apos;{1}&apos; \r\n&quot; + &#xD;&#xA;                               &quot;SaveRequest Msg: \r\n{2} \r\n\r\n{3}&quot;, &#xD;&#xA;                               ApplicationNumber, &#xD;&#xA;                               SalesforceObjectId, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(SFLoanUpdateRequestMsg), &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(exLoanUpdate)); ' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Error Message' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='670bf676-f1fe-46db-990a-51943a3c3165' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Catch' OID='bb4ae145-5705-4976-a112-c43506ebf7cc' ParentLink='Scope_Catch' LowerBound='1144.1' HigherBound='1237.1'>
                        <om:Property Name='ExceptionName' Value='ex' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch SF Receive Notification Exception' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='60dfd91c-c834-4bc7-88b1-2db0cd8f6e35' ParentLink='Catch_Statement' LowerBound='1147.1' HigherBound='1156.1'>
                            <om:Property Name='Expression' Value='&#xD;&#xA;Ex = ex; &#xD;&#xA;&#xD;&#xA;TmpMsgXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(SFNotificationSingleMsg); &#xD;&#xA;Ex.Data.Add(&quot;SF Notify Msg&quot;, TmpMsgXml); &#xD;&#xA;&#xD;&#xA;TmpMsgXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CanonicalMsg); &#xD;&#xA;Ex.Data.Add(&quot;Canonical Msg&quot;, TmpMsgXml); ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Set Ex' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='6bafd73a-30d8-4d91-b027-8cb61272aadd' ParentLink='Catch_Statement' LowerBound='1156.1' HigherBound='1162.1'>
                            <om:Property Name='Expression' Value='&#xD;&#xA;Status = &quot;Error&quot;; &#xD;&#xA;&#xD;&#xA;Message = System.String.Format(&quot;{0}\r\n\r\n{1}&quot;, SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(Ex), Message); &#xD;&#xA;&#xD;&#xA;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Get Error Info' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='e5496d1e-84b0-423e-96ec-725f8609b83e' ParentLink='Catch_Statement' LowerBound='1162.1' HigherBound='1166.1'>
                            <om:Property Name='Expression' Value='if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength); &#xD;&#xA;}' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Truncate Error' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Scope' OID='f167b43f-4f35-4861-b466-7fc4bca40ee0' ParentLink='Catch_Statement' LowerBound='1166.1' HigherBound='1236.1'>
                            <om:Property Name='InitializedTransactionType' Value='True' />
                            <om:Property Name='IsSynchronized' Value='False' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Inner Catch Scope' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='Task' OID='11d9a15e-bce9-4203-8248-c55798d1895a' ParentLink='ComplexStatement_Statement' LowerBound='1171.1' HigherBound='1199.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Remake Canonical from Error' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Construct' OID='b753e454-865f-484c-ae2a-b5ce330b9b37' ParentLink='ComplexStatement_Statement' LowerBound='1171.1' HigherBound='1189.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create Temp Canonical' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageAssignment' OID='5543d446-50c9-4b09-b18a-6c0a66a461c3' ParentLink='ComplexStatement_Statement' LowerBound='1174.1' HigherBound='1180.1'>
                                        <om:Property Name='Expression' Value=' &#xD;&#xA;TempCanonicalMsg.MessagePart = null;&#xD;&#xA;TempCanonicalMsg.MessagePart = CanonicalMsg.MessagePart; &#xD;&#xA;TempCanonicalMsg(*) = CanonicalMsg(*); &#xD;&#xA; &#xD;&#xA;' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Copy Canonical' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                    <om:Element Type='MessageAssignment' OID='8c639c3c-ea4d-4576-a6f9-9ba68b04756c' ParentLink='ComplexStatement_Statement' LowerBound='1180.1' HigherBound='1188.1'>
                                        <om:Property Name='Expression' Value='TempCanonicalMsg.MessagePart.Event_Request__c.GUID__c = OrchestrationInstanceId.ToString();&#xD;&#xA;TempCanonicalMsg.MessagePart.Event_Request__c.Stage__c = Stage;&#xD;&#xA;TempCanonicalMsg.MessagePart.Event_Request__c.Status__c = Status; &#xD;&#xA;TempCanonicalMsg.MessagePart.Event_Request__c.Application_Number__c = ApplicationNumber;&#xD;&#xA;TempCanonicalMsg.MessagePart.Event_Request__c.SObject_ID__c = SalesforceObjectId; &#xD;&#xA;TempCanonicalMsg.MessagePart.Event_Request__c.SObject_Name__c = SalesforceObjectName;&#xD;&#xA;TempCanonicalMsg.MessagePart.Event_Request__c.Log_Message__c = Message; ' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='+ Event Vals' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='7bc69149-4aa1-4b1e-af8d-bc1b98d5793c' ParentLink='Construct_MessageRef' LowerBound='1172.43' HigherBound='1172.59'>
                                        <om:Property Name='Ref' Value='TempCanonicalMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='Construct' OID='b0d41c3b-cc89-4579-bd57-fd632d334092' ParentLink='ComplexStatement_Statement' LowerBound='1189.1' HigherBound='1199.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Create Error Canonical' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='Transform' OID='df389394-3010-467b-94dd-58d90c25fa90' ParentLink='ComplexStatement_Statement' LowerBound='1192.1' HigherBound='1194.1'>
                                        <om:Property Name='ClassName' Value='SBA.ETRANObligation.Logic.Event_Request__c.Map_Event_Request_c_From_Error' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Map Canonical from Error' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='MessagePartRef' OID='edcb0c2d-650e-4f89-8dc1-32e96e34a747' ParentLink='Transform_InputMessagePartRef' LowerBound='1193.151' HigherBound='1193.179'>
                                            <om:Property Name='MessageRef' Value='TempCanonicalMsg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_1' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                        <om:Element Type='MessagePartRef' OID='24cf87a8-5341-47b6-b7c8-c9226815e817' ParentLink='Transform_OutputMessagePartRef' LowerBound='1193.48' HigherBound='1193.72'>
                                            <om:Property Name='MessageRef' Value='CanonicalMsg' />
                                            <om:Property Name='PartRef' Value='MessagePart' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='MessagePartReference_2' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='MessageAssignment' OID='3588fe90-ce32-45f6-a365-234a03ec9fcb' ParentLink='ComplexStatement_Statement' LowerBound='1194.1' HigherBound='1198.1'>
                                        <om:Property Name='Expression' Value='&#xD;&#xA;CanonicalMsg(*) = TempCanonicalMsg(*); &#xD;&#xA;&#xD;&#xA;' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Context' />
                                        <om:Property Name='Signal' Value='True' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='707f6253-f0d2-462e-a66c-20acb9501ee8' ParentLink='Construct_MessageRef' LowerBound='1190.43' HigherBound='1190.55'>
                                        <om:Property Name='Ref' Value='CanonicalMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='VariableAssignment' OID='987a67db-f64d-4fbf-81f7-f8e5b0029f45' ParentLink='ComplexStatement_Statement' LowerBound='1199.1' HigherBound='1208.1'>
                                <om:Property Name='Expression' Value='&#xD;&#xA;Stage = CanonicalMsg.MessagePart.Event_Request__c.Stage__c;&#xD;&#xA;Status = &quot;Error&quot;;&#xD;&#xA;Message = CanonicalMsg.MessagePart.Event_Request__c.Log_Message__c; &#xD;&#xA;ApplicationNumber = CanonicalMsg.MessagePart.Event_Request__c.Application_Number__c;&#xD;&#xA;SalesforceObjectId = CanonicalMsg.MessagePart.Event_Request__c.SObject_ID__c;&#xD;&#xA;SalesforceObjectName = CanonicalMsg.MessagePart.Event_Request__c.SObject_Name__c;&#xD;&#xA;OrchestrationInstanceId = System.Guid.Parse(CanonicalMsg.MessagePart.Event_Request__c.GUID__c); &#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Get Error Info' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='VariableAssignment' OID='39aab17a-7630-40cd-ad0b-689e778b1338' ParentLink='ComplexStatement_Statement' LowerBound='1208.1' HigherBound='1212.1'>
                                <om:Property Name='Expression' Value='if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength); &#xD;&#xA;}' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Truncate Error' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Catch' OID='da32304a-a783-4f42-ab36-c56724b28685' ParentLink='Scope_Catch' LowerBound='1215.1' HigherBound='1234.1'>
                                <om:Property Name='ExceptionName' Value='exInner' />
                                <om:Property Name='ExceptionType' Value='System.Exception' />
                                <om:Property Name='IsFaultMessage' Value='False' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Catch Inner Exception' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='VariableAssignment' OID='30cab463-0479-46f1-b201-5b03d327eed3' ParentLink='Catch_Statement' LowerBound='1218.1' HigherBound='1221.1'>
                                    <om:Property Name='Expression' Value='&#xD;&#xA;ExInner = exInner;' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Set ExInner' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='093547c3-b764-4596-8e79-b94af878edc5' ParentLink='Catch_Statement' LowerBound='1221.1' HigherBound='1229.1'>
                                    <om:Property Name='Expression' Value='&#xD;&#xA;Status = &quot;Error&quot;; &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Message = System.String.Format(&quot;Error from within error handling! \r\n{0} \r\n\r\nOriginal Error Info: \r\n{1}&quot;, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(ExInner), &#xD;&#xA;                               Message); &#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Get Error Info' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='24b7ae04-28c2-4096-bc57-e639b68628a8' ParentLink='Catch_Statement' LowerBound='1229.1' HigherBound='1233.1'>
                                    <om:Property Name='Expression' Value='if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength); &#xD;&#xA;}' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Truncate Error' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                    </om:Element>
                </om:Element>
                <om:Element Type='Scope' OID='152c295c-bf84-4923-87ac-6a8ae210421e' ParentLink='ServiceBody_Statement' LowerBound='1239.1' HigherBound='1389.1'>
                    <om:Property Name='InitializedTransactionType' Value='True' />
                    <om:Property Name='IsSynchronized' Value='False' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Event Logging Scope' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='Scope' OID='b9750666-c3d8-4729-9a47-79c1156ff4d6' ParentLink='ComplexStatement_Statement' LowerBound='1244.1' HigherBound='1348.1'>
                        <om:Property Name='InitializedTransactionType' Value='True' />
                        <om:Property Name='IsSynchronized' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='BT Audit Final Scope' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Decision' OID='f68c5698-56a3-459b-b280-d5cbb37ffc07' ParentLink='ComplexStatement_Statement' LowerBound='1249.1' HigherBound='1329.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Do BT Audit?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='d569ebc1-2d12-48cc-9de8-5bf93777ff93' ParentLink='ReallyComplexStatement_Branch' LowerBound='1250.29' HigherBound='1329.1'>
                                <om:Property Name='Expression' Value='ETranObligationTransportMsg.MessagePart.EnableBTAuditPayloadLog' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Yes' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Decision' OID='444d0cc3-d6a3-418d-bca9-0c7d20bc15e3' ParentLink='ComplexStatement_Statement' LowerBound='1252.1' HigherBound='1310.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Have BT Audit Id?' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='DecisionBranch' OID='c1285929-e04e-4d99-a2c2-59d642bc83c8' ParentLink='ReallyComplexStatement_Branch' LowerBound='1253.33' HigherBound='1288.1'>
                                        <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(BTAuditId)' />
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Yes' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='Decision' OID='2c4afcef-ae24-458e-83c4-bfee70c40861' ParentLink='ComplexStatement_Statement' LowerBound='1255.1' HigherBound='1287.1'>
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='ETran Obligate Success?' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='DecisionBranch' OID='c8dfbc8a-5043-4d9a-8990-e37b6bcd6e26' ParentLink='ReallyComplexStatement_Branch' LowerBound='1256.37' HigherBound='1272.1'>
                                                <om:Property Name='Expression' Value='Status == &quot;Success&quot;' />
                                                <om:Property Name='IsGhostBranch' Value='True' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Yes' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='VariableAssignment' OID='53ab454a-2533-4f36-a914-ac4e5aae0d7a' ParentLink='ComplexStatement_Statement' LowerBound='1258.1' HigherBound='1260.1'>
                                                    <om:Property Name='Expression' Value='ProcessStatusCode = &quot;Success&quot;; ' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Get BT Audit' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                                <om:Element Type='Decision' OID='5b8aeca8-5807-4cec-8d49-72877d50cb01' ParentLink='ComplexStatement_Statement' LowerBound='1260.1' HigherBound='1271.1'>
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Response Already Logged?' />
                                                    <om:Property Name='Signal' Value='True' />
                                                    <om:Element Type='DecisionBranch' OID='732322b9-4456-4ebd-a8e3-bf4c45656341' ParentLink='ReallyComplexStatement_Branch' LowerBound='1261.41' HigherBound='1266.1'>
                                                        <om:Property Name='Expression' Value='BTAuditStepCompleted == &quot;Response Update&quot;' />
                                                        <om:Property Name='IsGhostBranch' Value='True' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Yes' />
                                                        <om:Property Name='Signal' Value='False' />
                                                        <om:Element Type='Call' OID='2645248b-f560-4578-bd2e-058fc864f744' ParentLink='ComplexStatement_Statement' LowerBound='1263.1' HigherBound='1265.1'>
                                                            <om:Property Name='Identifier' Value='Call_BT_Audit_Status_Update' />
                                                            <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___StatusUpdate' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Name' Value='BT Audit Status Update' />
                                                            <om:Property Name='Signal' Value='False' />
                                                            <om:Element Type='Parameter' OID='48d23741-df99-49d4-878e-77840afaf04e' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='Ref' />
                                                                <om:Property Name='Name' Value='BTAuditMessage' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='Parameter' OID='eefa62e5-06ce-4ca3-9a7c-6af96b445194' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='Ref' />
                                                                <om:Property Name='Name' Value='BTAuditStatus' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='Parameter' OID='069d98bb-b27a-498d-ac92-722f92300fa2' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='Ref' />
                                                                <om:Property Name='Name' Value='BTAuditId' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='Parameter' OID='d11ba45d-2e0d-41e9-a0ec-9723888be113' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='In' />
                                                                <om:Property Name='Name' Value='ProcessStatusCode' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                        </om:Element>
                                                    </om:Element>
                                                    <om:Element Type='DecisionBranch' OID='1dde942c-12ae-40dd-9109-59be37ae4c15' ParentLink='ReallyComplexStatement_Branch'>
                                                        <om:Property Name='IsGhostBranch' Value='True' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Else' />
                                                        <om:Property Name='Signal' Value='False' />
                                                        <om:Element Type='Call' OID='fdf5a2a9-d29b-484e-a619-a470d4b3239d' ParentLink='ComplexStatement_Statement' LowerBound='1268.1' HigherBound='1270.1'>
                                                            <om:Property Name='Identifier' Value='Call_BT_Audit_Response_Success' />
                                                            <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Name' Value='BT Audit Response Success' />
                                                            <om:Property Name='Signal' Value='False' />
                                                            <om:Element Type='Parameter' OID='795e4fef-b23b-48f5-bc98-b26d9efc1e34' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='In' />
                                                                <om:Property Name='Name' Value='ETranResponseXml' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='Parameter' OID='afd3f764-3cbc-4b8c-9d9c-d192c8ff322c' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='Ref' />
                                                                <om:Property Name='Name' Value='BTAuditMessage' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='Parameter' OID='77d0f80d-36db-4007-9081-a1025b9810cd' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='Ref' />
                                                                <om:Property Name='Name' Value='BTAuditStatus' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='Parameter' OID='54bf56be-3d05-4b79-bd09-5e42fe5df165' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='Ref' />
                                                                <om:Property Name='Name' Value='BTAuditId' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='Parameter' OID='873f8449-06cf-4e17-960b-31bfd8218364' ParentLink='InvokeStatement_Parameter'>
                                                                <om:Property Name='Direction' Value='In' />
                                                                <om:Property Name='Name' Value='ProcessStatusCode' />
                                                                <om:Property Name='Type' Value='System.String' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                        </om:Element>
                                                    </om:Element>
                                                </om:Element>
                                            </om:Element>
                                            <om:Element Type='DecisionBranch' OID='201a014b-eb98-4060-a340-5f174acec4fe' ParentLink='ReallyComplexStatement_Branch'>
                                                <om:Property Name='IsGhostBranch' Value='True' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Else' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='VariableAssignment' OID='4bc3cf7b-7053-4551-a2ee-774bf06b49a8' ParentLink='ComplexStatement_Statement' LowerBound='1274.1' HigherBound='1284.1'>
                                                    <om:Property Name='Expression' Value='ProcessStatusCode = Status; &#xD;&#xA;&#xD;&#xA;ETranResponseXml = System.String.Format(&quot;ETRAN RESPONSE: (Event Request {0} Below) \r\n\r\n&quot; + &#xD;&#xA;                                &quot; **************************************** \r\n\r\n{1} \r\n\r\n&quot; + &#xD;&#xA;                                &quot;EVENT REQUEST LOG MESSAGE: \r\n\r\n&quot; + &#xD;&#xA;                                &quot; **************************************** \r\n\r\n{2} \r\n\r\n&quot;, &#xD;&#xA;                                Status,&#xD;&#xA;                                ETranResponseXml,&#xD;&#xA;                                Message); &#xD;&#xA;' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Get BT Audit' />
                                                    <om:Property Name='Signal' Value='True' />
                                                </om:Element>
                                                <om:Element Type='Call' OID='dfec0ba2-1ce3-44c4-a4f0-2922b3e25d77' ParentLink='ComplexStatement_Statement' LowerBound='1284.1' HigherBound='1286.1'>
                                                    <om:Property Name='Identifier' Value='Call_BT_Audit_Response_Failure' />
                                                    <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='BT Audit Response Failure' />
                                                    <om:Property Name='Signal' Value='False' />
                                                    <om:Element Type='Parameter' OID='081ca8e1-371a-4d83-a144-d4a9cf604efe' ParentLink='InvokeStatement_Parameter'>
                                                        <om:Property Name='Direction' Value='In' />
                                                        <om:Property Name='Name' Value='ETranResponseXml' />
                                                        <om:Property Name='Type' Value='System.String' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                    <om:Element Type='Parameter' OID='7d6624ab-5c87-4b44-81b5-061a98c557eb' ParentLink='InvokeStatement_Parameter'>
                                                        <om:Property Name='Direction' Value='Ref' />
                                                        <om:Property Name='Name' Value='BTAuditMessage' />
                                                        <om:Property Name='Type' Value='System.String' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                    <om:Element Type='Parameter' OID='52a31272-bf5b-4d6d-b15e-6617a8d3642c' ParentLink='InvokeStatement_Parameter'>
                                                        <om:Property Name='Direction' Value='Ref' />
                                                        <om:Property Name='Name' Value='BTAuditStatus' />
                                                        <om:Property Name='Type' Value='System.String' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                    <om:Element Type='Parameter' OID='dc3c4d4e-dfa7-4de9-83b4-4046599fe1d1' ParentLink='InvokeStatement_Parameter'>
                                                        <om:Property Name='Direction' Value='Ref' />
                                                        <om:Property Name='Name' Value='BTAuditId' />
                                                        <om:Property Name='Type' Value='System.String' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                    <om:Element Type='Parameter' OID='e0e79204-7768-4d58-81b7-259f89a63b3d' ParentLink='InvokeStatement_Parameter'>
                                                        <om:Property Name='Direction' Value='In' />
                                                        <om:Property Name='Name' Value='ProcessStatusCode' />
                                                        <om:Property Name='Type' Value='System.String' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='DecisionBranch' OID='bdf0f799-d64c-4155-9efe-2c29b521111d' ParentLink='ReallyComplexStatement_Branch'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Else' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='VariableAssignment' OID='f4ea9e1c-5c66-4282-b345-8b1a464a1c40' ParentLink='ComplexStatement_Statement' LowerBound='1290.1' HigherBound='1309.1'>
                                            <om:Property Name='Expression' Value='BTAuditStatus = &quot;Failure&quot;; &#xD;&#xA;BTAuditMessage = System.String.Format(&quot;No BT Audit Id found after the initial create succeeded. \r\n\r\n&quot; + &#xD;&#xA;                                      &quot;BTAuditId: &apos;{0}&apos; \r\n&quot; + &#xD;&#xA;                                      &quot;ApplicationNumber: &apos;{1}&apos; \r\n&quot; + &#xD;&#xA;                                      &quot;DisasterNumber: &apos;{2}&apos; \r\n&quot; + &#xD;&#xA;                                      &quot;FEMAEventCode: &apos;{3}&apos; \r\n&quot; + &#xD;&#xA;                                      &quot;FEMARegistrationNumber: &apos;{4}&apos; \r\n&quot; + &#xD;&#xA;                                      &quot;InterfaceType: &apos;{5}&apos; \r\n&quot; + &#xD;&#xA;                                      &quot;ProcessStatusCode: &apos;{6}&apos; \r\n&quot; + &#xD;&#xA;                                      &quot;Stage: &apos;{7}&apos; \r\n&quot;,&#xD;&#xA;                                      BTAuditId,&#xD;&#xA;                                      ApplicationNumber,&#xD;&#xA;                                      DisasterNumber,&#xD;&#xA;                                      FEMAEventCode,&#xD;&#xA;                                      FEMARegistrationNumber,&#xD;&#xA;                                      InterfaceType, &#xD;&#xA;                                      ProcessStatusCode, &#xD;&#xA;                                      Stage); ' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Error Message' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='Decision' OID='158e1791-4874-4353-950f-b5034a342f18' ParentLink='ComplexStatement_Statement' LowerBound='1310.1' HigherBound='1324.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Errors?' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='DecisionBranch' OID='6e525c1f-f52d-42dc-848e-baa480eae189' ParentLink='ReallyComplexStatement_Branch' LowerBound='1311.33' HigherBound='1324.1'>
                                        <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(BTAuditMessage) || BTAuditStatus == &quot;Error&quot; ' />
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Yes' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='VariableAssignment' OID='7d9780d2-dbaf-4128-ac3a-d73a2098f8d8' ParentLink='ComplexStatement_Statement' LowerBound='1313.1' HigherBound='1323.1'>
                                            <om:Property Name='Expression' Value='BTAuditStatus = &quot;Error&quot;; &#xD;&#xA;BTAuditMessage = System.String.Format(&quot;ETran Obligation failed logging final update to BT Audit. \r\n&quot; + &#xD;&#xA;                                      &quot;This did not prevent ETran Obligation from finishing. \r\n\r\n{0}&quot;, BTAuditMessage); &#xD;&#xA;&#xD;&#xA;if (BTAuditMessage.Length &gt; ErrorMaxLength) {&#xD;&#xA;    BTAuditMessage = BTAuditMessage.Substring(0, ErrorMaxLength);&#xD;&#xA;} &#xD;&#xA;&#xD;&#xA;System.Diagnostics.EventLog.WriteEntry(&quot;BizTalk: ETran Obligation&quot;, BTAuditMessage, System.Diagnostics.EventLogEntryType.Warning); ' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Silent Log' />
                                            <om:Property Name='Signal' Value='False' />
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='DecisionBranch' OID='29c664a9-e50b-4a75-bb11-2cdb6e39c28d' ParentLink='ReallyComplexStatement_Branch'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Else' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='Decision' OID='22a359fa-7634-4abc-afe0-b66d46aad936' ParentLink='ComplexStatement_Statement' LowerBound='1324.1' HigherBound='1328.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='BT Audit Success?' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='DecisionBranch' OID='8b62d806-ad4a-4cd0-9718-598f1a67c2d1' ParentLink='ReallyComplexStatement_Branch' LowerBound='1325.33' HigherBound='1328.1'>
                                        <om:Property Name='Expression' Value='System.String.IsNullOrWhiteSpace(BTAuditMessage) &amp;&amp; BTAuditStatus == &quot;Success&quot;' />
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Yes' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='DecisionBranch' OID='edd45601-45a3-4a67-a85d-74a0284ef2da' ParentLink='ReallyComplexStatement_Branch'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Else' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='6d9a00c5-a436-4b4a-991f-0b895824c082' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Catch' OID='f1f69389-ee4b-40dd-9231-7fdec7500787' ParentLink='Scope_Catch' LowerBound='1332.1' HigherBound='1346.1'>
                            <om:Property Name='ExceptionName' Value='exBtAuditFinal' />
                            <om:Property Name='ExceptionType' Value='System.Exception' />
                            <om:Property Name='IsFaultMessage' Value='False' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Catch Exception - BT Audit Final' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='daf797d7-5d9a-4fec-b12f-2bd91d8b3eda' ParentLink='Catch_Statement' LowerBound='1335.1' HigherBound='1345.1'>
                                <om:Property Name='Expression' Value='BTAuditStatus = &quot;Error&quot;; &#xD;&#xA;BTAuditMessage = System.String.Format(&quot;ETran Obligation failed logging final update to BT Audit. \r\n&quot; + &#xD;&#xA;                                      &quot;This did not prevent ETran Obligation from finishing. \r\n\r\n{0}&quot;, exBtAuditFinal); &#xD;&#xA;&#xD;&#xA;if (BTAuditMessage.Length &gt; ErrorMaxLength) {&#xD;&#xA;    BTAuditMessage = BTAuditMessage.Substring(0, ErrorMaxLength);&#xD;&#xA;} &#xD;&#xA;&#xD;&#xA;System.Diagnostics.EventLog.WriteEntry(&quot;BizTalk: ETran Obligation&quot;, BTAuditMessage, System.Diagnostics.EventLogEntryType.Warning); ' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Silent Log' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Call' OID='b92652bf-8041-4cb8-8a20-f9525f16d87c' ParentLink='ComplexStatement_Statement' LowerBound='1348.1' HigherBound='1350.1'>
                        <om:Property Name='Identifier' Value='Event_Request_Main' />
                        <om:Property Name='Invokee' Value='SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Event Request' />
                        <om:Property Name='Signal' Value='False' />
                        <om:Element Type='Parameter' OID='c555e89e-a5fc-4587-86ea-4ff11b12e0d4' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='OrchestrationInstanceId' />
                            <om:Property Name='Type' Value='System.Guid' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='c5521243-3f5e-4434-ae71-51aba51782d2' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='Status' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='453e0fec-9a93-4554-9f1f-8892ed47d388' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='Stage' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='09f1f6b2-0418-4e9b-92f8-e837775cf686' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='ApplicationNumber' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='08ead32f-0ff3-4013-835e-d540bb41518d' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='SalesforceObjectName' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='f21562dc-d163-4863-9299-66de45bcb741' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='SalesforceObjectId' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='d9a6be28-f173-4ea5-a5b5-42327fc4cbc7' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='Message' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='99badebc-cbc2-4328-9cbd-1963857fea46' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='AutoDeclineReason' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Catch' OID='f15fc139-dd14-42f9-8ea4-bf8755cf8572' ParentLink='Scope_Catch' LowerBound='1353.1' HigherBound='1387.1'>
                        <om:Property Name='ExceptionName' Value='exEventLogging' />
                        <om:Property Name='ExceptionType' Value='System.Exception' />
                        <om:Property Name='IsFaultMessage' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Catch Exception - Event Logging' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='52fd919e-1ceb-4ef2-85dc-9eea433fe2d6' ParentLink='Catch_Statement' LowerBound='1356.1' HigherBound='1378.1'>
                            <om:Property Name='Expression' Value='Status = &quot;Error&quot;; &#xD;&#xA;Message = System.String.Format(&quot;ETran Obligation failed to send {0} results to Salesforce Event Request &quot; + &#xD;&#xA;                               &quot;due to an exception encountered. \r\n\r\n&quot; + &#xD;&#xA;                               &quot;Event Request values attempted are below. The exception occurring from the &quot; + &#xD;&#xA;                               &quot;Event Request attempt is further below. \r\n&quot; + &#xD;&#xA;                               &quot;GUID: &apos;{1}&apos; \r\n&quot; + &#xD;&#xA;                               &quot;ApplicationNumber: &apos;{2}&apos; \r\n&quot; + &#xD;&#xA;                               &quot;Stage: &apos;{3}&apos; \r\n&quot; + &#xD;&#xA;                               &quot;Status: &apos;{0}&apos; \r\n&quot; + &#xD;&#xA;                               &quot;SObject ID: &apos;{4}&apos; \r\n&quot; + &#xD;&#xA;                               &quot;SObject Name: &apos;{5}&apos; \r\n&quot; + &#xD;&#xA;                               &quot;Log Message: &apos;{6}&apos; \r\n\r\n&quot; + &#xD;&#xA;                               &quot;Event Request Save Attempt Exception: \r\n{7}&quot;,&#xD;&#xA;                               Status,&#xD;&#xA;                               OrchestrationInstanceId.ToString(), &#xD;&#xA;                               ApplicationNumber, &#xD;&#xA;                               Stage,                               &#xD;&#xA;                               SalesforceObjectId, &#xD;&#xA;                               SalesforceObjectName, &#xD;&#xA;                               Message, &#xD;&#xA;                               SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(exEventLogging)); ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Error Message' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='6744c0f4-42fd-4e6b-a3a4-4437ee5546c1' ParentLink='Catch_Statement' LowerBound='1378.1' HigherBound='1382.1'>
                            <om:Property Name='Expression' Value='if (Message.Length &gt; ErrorMaxLength) { &#xD;&#xA;    Message = Message.Substring(0, ErrorMaxLength); &#xD;&#xA;}' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Truncate Error' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='59ba1990-74cc-4fe1-b652-47b4c45e85e0' ParentLink='Catch_Statement' LowerBound='1382.1' HigherBound='1384.1'>
                            <om:Property Name='Expression' Value='System.Diagnostics.EventLog.WriteEntry(&quot;BizTalk: ETran Obligation&quot;, Message, System.Diagnostics.EventLogEntryType.Error); ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='System Log' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Terminate' OID='84fe56d2-8e9a-4318-8b83-b916d7592992' ParentLink='Catch_Statement' LowerBound='1384.1' HigherBound='1386.1'>
                            <om:Property Name='ErrorMessage' Value='Message; ' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Terminate' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='9c2d0090-3a4d-4893-9c96-13e9ddf97f93' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='89.1' HigherBound='91.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='0' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.SFNotificationSinglePortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SF_Notify_Receive' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='DirectBindingAttribute' OID='f9924658-bfba-4d2d-9813-ea063e1023b5' ParentLink='PortDeclaration_CLRAttribute' LowerBound='89.1' HigherBound='90.1'>
                    <om:Property Name='DirectBindingType' Value='MessageBox' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='7ffd5e9c-f8fc-4da2-8aa2-1f7b9a50bfa2' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='91.1' HigherBound='94.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='943' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='Transmitted' />
                <om:Property Name='Type' Value='SBA.ETRANObligation.Logic.ETRANOriginatePortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ETran_Originate3_Port' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='PhysicalBindingAttribute' OID='735045d6-fa84-406d-bc86-8f43504d45ae' ParentLink='PortDeclaration_CLRAttribute' LowerBound='91.1' HigherBound='92.1'>
                    <om:Property Name='InPipeline' Value='SBA.BizTalk.Shared.Pipelines.General.SimpleNamespaceChangeDecoderReceive' />
                    <om:Property Name='OutPipeline' Value='SBA.BizTalk.Shared.Pipelines.General.SimpleNamespaceChangeEncoderSend' />
                    <om:Property Name='TransportType' Value='HTTP' />
                    <om:Property Name='URI' Value='http://tempURI' />
                    <om:Property Name='IsDynamic' Value='True' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='fb942902-8fcb-4610-8f35-03dbf4851c7e' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETranFaultMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='3f237aea-6081-4d3a-95f7-9f42526b4774' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3CFCInvocationException' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='e42454a3-6acf-4173-8d08-3851f8a7deed' ParentLink='Module_MessageType' LowerBound='8.1' HigherBound='12.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='Fault1_2MsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='5a49c720-f44a-4361-a8d1-6d78674e0d58' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='10.1' HigherBound='11.1'>
                <om:Property Name='ClassName' Value='BTS.soap_envelope_1__2.Fault' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='b9e21b08-4dc9-487f-8141-cfc89ca1c09d' ParentLink='Module_MessageType' LowerBound='12.1' HigherBound='16.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='Fault1_1MsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='814d7ef6-f6f1-40a9-aa13-f59d14a23e7c' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='14.1' HigherBound='15.1'>
                <om:Property Name='ClassName' Value='BTS.soap_envelope_1__1.Fault' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='b4f17bc1-82e6-4039-a7c7-3a32327c375d' ParentLink='Module_MessageType' LowerBound='16.1' HigherBound='20.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETRANOriginateRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='1143fce1-0a46-4640-ab9f-850f949c0dd4' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='18.1' HigherBound='19.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='e830b70e-c664-4913-aaec-e0267731c7bd' ParentLink='Module_MessageType' LowerBound='20.1' HigherBound='24.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETRANOriginateAppType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='9915544d-5af2-4ca5-bb23-526a4e3ee221' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='22.1' HigherBound='23.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_5_0_orig' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='bc460c20-b4c6-40d1-a1bd-552cf0962aef' ParentLink='Module_MessageType' LowerBound='24.1' HigherBound='28.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETRANOriginateResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='6637249f-d057-43d0-a754-abd32badfbf7' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='26.1' HigherBound='27.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.ETRAN.SBAETranOriginate3Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='a4af6f48-e155-47a9-958e-01be01dfc7f3' ParentLink='Module_MessageType' LowerBound='28.1' HigherBound='32.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFLoanUpdateRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='b01054c8-3bf0-4b5b-9520-10554521befe' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='30.1' HigherBound='31.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save.SaveRequest' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='f6bdba09-f6ea-49c5-8f59-67d8c69d4380' ParentLink='Module_MessageType' LowerBound='32.1' HigherBound='36.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFLoanUpdateResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='842c8281-6902-4535-8445-031fb4059cf8' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='34.1' HigherBound='35.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Salesforce.Loan__c.Loan__c_Save.results' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='5ac9ee7a-e5a8-48d7-80d6-51aee1ca9ca2' ParentLink='Module_MessageType' LowerBound='36.1' HigherBound='40.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETRANActualResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='01ad5e30-a0e7-45d0-a3c1-d8bf54cea89b' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='38.1' HigherBound='39.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.ETRAN.SBA_ETran_Response_orig' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='8c87bb1e-7aaa-46dd-8dfc-d8207fc19f4f' ParentLink='Module_MessageType' LowerBound='40.1' HigherBound='44.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFNotificationSingleMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='19baeea2-bd13-48f4-a199-a2164d31a678' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='42.1' HigherBound='43.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Salesforce.Notification.NotificationSingle' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='8f907667-adce-43b6-9ab4-a29e37fa854d' ParentLink='Module_MessageType' LowerBound='44.1' HigherBound='48.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='CanonicalMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='f0975c4f-39fe-41f6-91c6-2f6af41eeafb' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='46.1' HigherBound='47.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Canonical.ETRANObligationCanonical' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='2fb458ae-66a1-4103-80dc-1527ea3cfc0f' ParentLink='Module_MessageType' LowerBound='48.1' HigherBound='52.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETRANOriginateAppDefaultsType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='3fa4245b-68b9-4ac4-b730-8fcb6499402e' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='50.1' HigherBound='51.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.ETRAN_Originate.ETRANOriginateAppDefaults' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='25769904-b0ec-44be-922a-c248accc58fb' ParentLink='Module_MessageType' LowerBound='52.1' HigherBound='56.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETranCredentialsMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='4c176eef-5150-4d18-bb62-82d64e87f017' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='54.1' HigherBound='55.1'>
                <om:Property Name='ClassName' Value='SBA.ETRAN.Shared.Definition.ETranCredentials' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='c39dd4be-7f8a-4341-a22f-a8cf47c4db4b' ParentLink='Module_MessageType' LowerBound='56.1' HigherBound='60.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETranObligationTransportMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='6062203b-dd12-42c1-bc39-fdaabf424f74' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='58.1' HigherBound='59.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Rules.ETranObligationTransport' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='e93973fb-8095-4703-a9db-28185c0727fe' ParentLink='Module_MessageType' LowerBound='60.1' HigherBound='64.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFMultiQueryRequestMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='ed25c39d-0940-47a7-a665-57c9123d5e88' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='62.1' HigherBound='63.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='f4a8d499-78dc-46ac-9c59-e08938fc632c' ParentLink='Module_MessageType' LowerBound='64.1' HigherBound='68.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFMultiQueryResultMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='33f94960-0128-42da-83b2-341f42dd7684' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='66.1' HigherBound='67.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Salesforce.Multi.Salesforce_Multi_Query.QueryResult' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='b5fdd3e5-9c44-40ca-9096-3102de1fd34c' ParentLink='Module_MessageType' LowerBound='68.1' HigherBound='72.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='LegalOrgTypeMsgType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='0419771a-3808-4af7-a054-29d937dad856' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='70.1' HigherBound='71.1'>
                <om:Property Name='ClassName' Value='SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='0ee2be8c-61df-457c-96ac-152e2519c243' ParentLink='Module_PortType' LowerBound='72.1' HigherBound='79.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ETRANOriginatePortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='7fa3c661-a6d6-4f90-b54f-4d93559e9649' ParentLink='PortType_OperationDeclaration' LowerBound='74.1' HigherBound='78.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Originate3' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='887df52f-afa3-4ec5-9c6a-9c055debb24b' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='76.13' HigherBound='76.38'>
                    <om:Property Name='Ref' Value='SBA.ETRANObligation.Logic.ETRANOriginateRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='9f955e48-144d-4106-95f2-2a24ff1ea4f1' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='76.40' HigherBound='76.63'>
                    <om:Property Name='Ref' Value='SBA.ETRANObligation.Logic.ETRANActualResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='2bf6db33-ccb9-45d7-b4eb-b0fe160fed94' ParentLink='OperationDeclaration_FaultMessageRef' LowerBound='76.65' HigherBound='76.107'>
                    <om:Property Name='Ref' Value='SBA.ETRANObligation.Logic.ETranFaultMsgType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='CVCInvocationException' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='32080ec6-d100-4701-a108-2475c16b344f' ParentLink='OperationDeclaration_FaultMessageRef' LowerBound='76.109' HigherBound='76.136'>
                    <om:Property Name='Ref' Value='SBA.ETRANObligation.Logic.Fault1_1MsgType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Fault_1_1' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='b5b45fa1-90ef-4cd6-84c9-61fd887ec646' ParentLink='OperationDeclaration_FaultMessageRef' LowerBound='76.138' HigherBound='76.165'>
                    <om:Property Name='Ref' Value='SBA.ETRANObligation.Logic.Fault1_2MsgType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Fault_1_2' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='1ebb6906-2d37-4e90-98f4-2b927f7c59f5' ParentLink='Module_PortType' LowerBound='79.1' HigherBound='86.1'>
            <om:Property Name='Synchronous' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SFNotificationSinglePortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='d32d97da-383d-4e7d-815c-236d4599ffd5' ParentLink='PortType_OperationDeclaration' LowerBound='81.1' HigherBound='85.1'>
                <om:Property Name='OperationType' Value='OneWay' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='NotifySingle' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='a9765440-e686-495d-a7c1-a0648a410e20' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='83.13' HigherBound='83.40'>
                    <om:Property Name='Ref' Value='SBA.ETRANObligation.Logic.SFNotificationSingleMsgType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __ETRANObligationLogic_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __ETRANObligationLogic_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ETRANObligationLogic")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                __ETRANObligationLogic_root_0 __ctx0__ = (__ETRANObligationLogic_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.SF_Notify_Receive != null)
                {
                    __svc__.SF_Notify_Receive.Close(this, null);
                    __svc__.SF_Notify_Receive = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper1;
        }


        [System.SerializableAttribute]
        public class __ETRANObligationLogic_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __ETRANObligationLogic_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "ETRANObligationLogic")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)(__svc__._stateMgrs[1]);
                __ETRANObligationLogic_root_0 __ctx0__ = (__ETRANObligationLogic_root_0)(__svc__._stateMgrs[0]);

                if (__ctx1__ != null && __ctx1__.__TempCanonicalMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFNotificationSingleMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationSingleMsg);
                    __ctx1__.__SFNotificationSingleMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__BTAuditMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__BTAuditStatus = null;
                if (__ctx1__ != null && __ctx1__.__CanonicalMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__ETranObligationTransportMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETranObligationTransportMsg);
                    __ctx1__.__ETranObligationTransportMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__SFBusTypeCurrent = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesforceObjectName = null;
                if (__ctx1__ != null)
                    __ctx1__.__Message = null;
                if (__ctx1__ != null)
                    __ctx1__.__TmpXmlDoc = null;
                if (__ctx1__ != null)
                    __ctx1__.__ETranRequestXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__AutoDeclineReason = null;
                if (__ctx1__ != null)
                    __ctx1__.__XpathStmt = null;
                if (__ctx1__ != null)
                    __ctx1__.__BTAuditStepCompleted = null;
                if (__ctx1__ != null)
                    __ctx1__.__FEMAEventCode = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempOrchestrationInstanceId = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesforceObjectId = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__ProcessStatusCode = null;
                if (__ctx1__ != null)
                    __ctx1__.__Status = null;
                if (__ctx1__ != null)
                    __ctx1__.__TmpMsgXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__DisasterNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__Ex = null;
                if (__ctx1__ != null)
                    __ctx1__.__ETranResponseXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__BTAuditId = null;
                if (__ctx1__ != null)
                    __ctx1__.__XpathStmtBase = null;
                if (__ctx1__ != null)
                    __ctx1__.__PropertyId = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL = null;
                if (__ctx1__ != null)
                    __ctx1__.__InterfaceType = null;
                if (__ctx1__ != null)
                    __ctx1__.__ExInner = null;
                if (__ctx1__ != null)
                    __ctx1__.__FEMARegistrationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__Stage = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempXmlDoc = null;
                if (__ctx1__ != null)
                    __ctx1__.__SFBusTypesListAll = null;
                if (__ctx1__ != null)
                    __ctx1__.__SFBusTypesDict = null;
                if (__svc__.ETran_Originate3_Port != null)
                {
                    __svc__.ETran_Originate3_Port.Close(this, null);
                    __svc__.ETran_Originate3_Port = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("ETranFaultMsg")]
            internal ETranFaultMsgType __ETranFaultMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Fault1_1Msg")]
            internal Fault1_1MsgType __Fault1_1Msg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ETRANOriginateAppMsg")]
            internal ETRANOriginateAppType __ETRANOriginateAppMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ETRANOriginateRequestMsg")]
            internal ETRANOriginateRequestType __ETRANOriginateRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFLoanUpdateRequestMsg")]
            internal SFLoanUpdateRequestType __SFLoanUpdateRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ETRANActualResponseMsg")]
            internal ETRANActualResponseType __ETRANActualResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFNotificationSingleMsg")]
            internal SFNotificationSingleMsgType __SFNotificationSingleMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("CanonicalMsg")]
            internal CanonicalMsgType __CanonicalMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempCanonicalMsg")]
            internal CanonicalMsgType __TempCanonicalMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ETRANOriginateAppDefaultsMsg")]
            internal ETRANOriginateAppDefaultsType __ETRANOriginateAppDefaultsMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ETranCredentials")]
            internal ETranCredentialsMsgType __ETranCredentials;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ETranObligationTransportMsg")]
            internal ETranObligationTransportMsgType __ETranObligationTransportMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Fault1_2Msg")]
            internal Fault1_2MsgType __Fault1_2Msg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFMultiQueryRequestMsg")]
            internal SFMultiQueryRequestMsgType __SFMultiQueryRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFMultiQueryResultMsg")]
            internal SFMultiQueryResultMsgType __SFMultiQueryResultMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFRestQueryResultMsg")]
            internal SBA.BizTalk.Shared.Salesforce.RestApi.Logic.QueryResultMsgType __SFRestQueryResultMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFRestSaveRequestMsg")]
            internal SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveRequestMsgType __SFRestSaveRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFRestSaveResultMsg")]
            internal SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveResultMsgType __SFRestSaveResultMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("LegalOrgTypeMsg")]
            internal LegalOrgTypeMsgType __LegalOrgTypeMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFBusTypeCurrent")]
            internal System.String __SFBusTypeCurrent;
            [Microsoft.XLANGs.Core.UserVariableAttribute("BTAuditMessage")]
            internal System.String __BTAuditMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("BTAuditStatus")]
            internal System.String __BTAuditStatus;
            [Microsoft.XLANGs.Core.UserVariableAttribute("BTAuditId")]
            internal System.String __BTAuditId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ETranResponseXml")]
            internal System.String __ETranResponseXml;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ETranRequestXml")]
            internal System.String __ETranRequestXml;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ProcessStatusCode")]
            internal System.String __ProcessStatusCode;
            [Microsoft.XLANGs.Core.UserVariableAttribute("FEMARegistrationNumber")]
            internal System.String __FEMARegistrationNumber;
            [Microsoft.XLANGs.Core.UserVariableAttribute("FEMAEventCode")]
            internal System.String __FEMAEventCode;
            [Microsoft.XLANGs.Core.UserVariableAttribute("DisasterNumber")]
            internal System.String __DisasterNumber;
            [Microsoft.XLANGs.Core.UserVariableAttribute("AutoDeclineReason")]
            internal System.String __AutoDeclineReason;
            [Microsoft.XLANGs.Core.UserVariableAttribute("OrchestrationInstanceId")]
            internal System.Guid __OrchestrationInstanceId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SalesforceObjectId")]
            internal System.String __SalesforceObjectId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ApplicationNumber")]
            internal System.String __ApplicationNumber;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Status")]
            internal System.String __Status;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Stage")]
            internal System.String __Stage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SalesforceObjectName")]
            internal System.String __SalesforceObjectName;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Message")]
            internal System.String __Message;
            [Microsoft.XLANGs.Core.UserVariableAttribute("LoanOriginateSuccess")]
            internal System.Boolean __LoanOriginateSuccess;
            [Microsoft.XLANGs.Core.UserVariableAttribute("XpathStmt")]
            internal System.String __XpathStmt;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Ex")]
            internal System.Exception __Ex;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ExInner")]
            internal System.Exception __ExInner;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempOrchestrationInstanceId")]
            internal System.String __TempOrchestrationInstanceId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TmpXmlDoc")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __TmpXmlDoc;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TmpMsgXml")]
            internal System.String __TmpMsgXml;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SOQL")]
            internal System.String __SOQL;
            [Microsoft.XLANGs.Core.UserVariableAttribute("XpathStmtBase")]
            internal System.String __XpathStmtBase;
            [Microsoft.XLANGs.Core.UserVariableAttribute("PropertyId")]
            internal System.String __PropertyId;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ApplicantCount")]
            internal System.Int32 __ApplicantCount;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ErrorMaxLength")]
            internal System.Int32 __ErrorMaxLength;
            [Microsoft.XLANGs.Core.UserVariableAttribute("InterfaceType")]
            internal System.String __InterfaceType;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempXmlDoc")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __TempXmlDoc;
            [Microsoft.XLANGs.Core.UserVariableAttribute("BTAuditStepCompleted")]
            internal System.String __BTAuditStepCompleted;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFBusTypesListAll")]
            internal SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList __SFBusTypesListAll;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFBusTypesDict")]
            internal SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringDictionary __SFBusTypesDict;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SFBusTypesListAllIndex")]
            internal System.Int32 __SFBusTypesListAllIndex;
        }


        [System.SerializableAttribute]
        public class ____scope49_2 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope49_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope49")
            {
            }

            public override int Index { get { return 2; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[3];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope49_2 __ctx2__ = (____scope49_2)(__svc__._stateMgrs[2]);

                if (__ctx2__ != null)
                    __ctx2__.__exCan_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exCan_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope50_3 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope50_3(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope50")
            {
            }

            public override int Index { get { return 3; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[4]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[4]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[6];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope50_3 __ctx3__ = (____scope50_3)(__svc__._stateMgrs[3]);

                if (__ctx3__ != null)
                    __ctx3__.__exETranTransport_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exETranTransport_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope51_4 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope51_4(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope51")
            {
            }

            public override int Index { get { return 4; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[5]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[5]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope51_4 __ctx4__ = (____scope51_4)(__svc__._stateMgrs[4]);

                if (__ctx4__ != null)
                    __ctx4__.__policy_3__ = null;
                if (__ctx4__ != null)
                    __ctx4__.__policyParamAsTXD_3_3__ = null;
                if (__ctx4__ != null)
                    __ctx4__.__policyParam_3_3__ = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("policy_3__")]
            internal Microsoft.RuleEngine.Policy __policy_3__;
            [Microsoft.XLANGs.Core.UserVariableAttribute("policyParam_3_3__")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __policyParam_3_3__;
            [Microsoft.XLANGs.Core.UserVariableAttribute("policyParamAsTXD_3_3__")]
            internal Microsoft.RuleEngine.TypedXmlDocument __policyParamAsTXD_3_3__;
        }


        [System.SerializableAttribute]
        public class ____scope52_5 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope52_5(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope52")
            {
            }

            public override int Index { get { return 5; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[7]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[7]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[22];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)(__svc__._stateMgrs[1]);
                ____scope52_5 __ctx5__ = (____scope52_5)(__svc__._stateMgrs[5]);

                if (__ctx5__ != null)
                    __ctx5__.__ex_0 = null;
                if (__ctx1__ != null && __ctx1__.__ETRANActualResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANActualResponseMsg);
                    __ctx1__.__ETRANActualResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__ETranCredentials != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETranCredentials);
                    __ctx1__.__ETranCredentials = null;
                }
                if (__ctx1__ != null && __ctx1__.__ETRANOriginateAppDefaultsMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateAppDefaultsMsg);
                    __ctx1__.__ETRANOriginateAppDefaultsMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFMultiQueryResultMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFMultiQueryResultMsg);
                    __ctx1__.__SFMultiQueryResultMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFRestSaveResultMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFRestSaveResultMsg);
                    __ctx1__.__SFRestSaveResultMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFRestSaveRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFRestSaveRequestMsg);
                    __ctx1__.__SFRestSaveRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__LegalOrgTypeMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__LegalOrgTypeMsg);
                    __ctx1__.__LegalOrgTypeMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__ETRANOriginateRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateRequestMsg);
                    __ctx1__.__ETRANOriginateRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFLoanUpdateRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFLoanUpdateRequestMsg);
                    __ctx1__.__SFLoanUpdateRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFRestQueryResultMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFRestQueryResultMsg);
                    __ctx1__.__SFRestQueryResultMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFMultiQueryRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFMultiQueryRequestMsg);
                    __ctx1__.__SFMultiQueryRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__ETRANOriginateAppMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateAppMsg);
                    __ctx1__.__ETRANOriginateAppMsg = null;
                }
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __ex_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope53_6 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope53_6(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope53")
            {
            }

            public override int Index { get { return 6; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[8]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[8]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope53_6 __ctx6__ = (____scope53_6)(__svc__._stateMgrs[6]);

                if (__ctx6__ != null)
                    __ctx6__.__policyParamAsTXD_4_4__ = null;
                if (__ctx6__ != null)
                    __ctx6__.__policy_4__ = null;
                if (__ctx6__ != null)
                    __ctx6__.__policyParam_4_4__ = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("policy_4__")]
            internal Microsoft.RuleEngine.Policy __policy_4__;
            [Microsoft.XLANGs.Core.UserVariableAttribute("policyParam_4_4__")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __policyParam_4_4__;
            [Microsoft.XLANGs.Core.UserVariableAttribute("policyParamAsTXD_4_4__")]
            internal Microsoft.RuleEngine.TypedXmlDocument __policyParamAsTXD_4_4__;
        }


        [System.SerializableAttribute]
        public class ____scope54_7 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope54_7(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope54")
            {
            }

            public override int Index { get { return 7; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[9]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[9]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[10];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope54_7 __ctx7__ = (____scope54_7)(__svc__._stateMgrs[7]);

                if (__ctx7__ != null)
                    __ctx7__.__exMulti_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exMulti_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope55_8 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope55_8(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope55")
            {
            }

            public override int Index { get { return 8; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[11]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[11]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope55_8 __ctx8__ = (____scope55_8)(__svc__._stateMgrs[8]);

                if (__ctx8__ != null)
                    __ctx8__.__policyParam_5_5__ = null;
                if (__ctx8__ != null)
                    __ctx8__.__policy_5__ = null;
                if (__ctx8__ != null)
                    __ctx8__.__policyParamAsTXD_5_5__ = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("policy_5__")]
            internal Microsoft.RuleEngine.Policy __policy_5__;
            [Microsoft.XLANGs.Core.UserVariableAttribute("policyParam_5_5__")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __policyParam_5_5__;
            [Microsoft.XLANGs.Core.UserVariableAttribute("policyParamAsTXD_5_5__")]
            internal Microsoft.RuleEngine.TypedXmlDocument __policyParamAsTXD_5_5__;
        }


        [System.SerializableAttribute]
        public class ____scope56_9 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope56_9(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope56")
            {
            }

            public override int Index { get { return 9; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[12]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[12]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[13];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope56_9 __ctx9__ = (____scope56_9)(__svc__._stateMgrs[9]);

                if (__ctx9__ != null)
                    __ctx9__.__exBtAuditInitial_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exBtAuditInitial_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope57_10 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope57_10(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope57")
            {
            }

            public override int Index { get { return 10; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[14]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[14]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if (__fault__ != null && __fault__.Match("ETran_Originate3_Port", 0, 0))
                    {
                        ETranFaultMsgType __msg__ = new ETranFaultMsgType("exCvcInvocationEx", this);
                        RefMessage(__msg__);
                        ETRANOriginatePortType.ReceiveFault(__fault__.Env, __msg__, this);
                        __exv__ = __msg__;
                        __seg__ = _service._segments[15];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if (__fault__ != null && __fault__.Match("ETran_Originate3_Port", 0, 1))
                    {
                        Fault1_1MsgType __msg__ = new Fault1_1MsgType("exFault1_1", this);
                        RefMessage(__msg__);
                        ETRANOriginatePortType.ReceiveFault(__fault__.Env, __msg__, this);
                        __exv__ = __msg__;
                        __seg__ = _service._segments[16];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if (__fault__ != null && __fault__.Match("ETran_Originate3_Port", 0, 2))
                    {
                        Fault1_2MsgType __msg__ = new Fault1_2MsgType("exFault1_2", this);
                        RefMessage(__msg__);
                        ETRANOriginatePortType.ReceiveFault(__fault__.Env, __msg__, this);
                        __exv__ = __msg__;
                        __seg__ = _service._segments[17];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)(__svc__._stateMgrs[1]);
                __ETRANObligationLogic_root_0 __ctx0__ = (__ETRANObligationLogic_root_0)(__svc__._stateMgrs[0]);

                if (__ctx1__ != null && __ctx1__.__ETranFaultMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETranFaultMsg);
                    __ctx1__.__ETranFaultMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__Fault1_1Msg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__Fault1_1Msg);
                    __ctx1__.__Fault1_1Msg = null;
                }
                if (__ctx1__ != null && __ctx1__.__Fault1_2Msg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__Fault1_2Msg);
                    __ctx1__.__Fault1_2Msg = null;
                }
                if (__ctx0__ != null && __ctx0__.__subWrapper1 != null)
                {
                    __ctx0__.__subWrapper1.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper1 = null;
                }
                base.Finally();
            }

            internal object __exv__;
            internal ETranFaultMsgType __exCvcInvocationEx_0
            {
                get { return (ETranFaultMsgType)__exv__; }
                set { __exv__ = value; }
            }
            internal Fault1_1MsgType __exFault1_1_1
            {
                get { return (Fault1_1MsgType)__exv__; }
                set { __exv__ = value; }
            }
            internal Fault1_2MsgType __exFault1_2_2
            {
                get { return (Fault1_2MsgType)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope58_11 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope58_11(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope58")
            {
            }

            public override int Index { get { return 11; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[18]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[18]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[19];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope58_11 __ctx11__ = (____scope58_11)(__svc__._stateMgrs[11]);

                if (__ctx11__ != null)
                    __ctx11__.__exBtAuditResponse_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exBtAuditResponse_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope59_12 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope59_12(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope59")
            {
            }

            public override int Index { get { return 12; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[20]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[20]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[21];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope59_12 __ctx12__ = (____scope59_12)(__svc__._stateMgrs[12]);

                if (__ctx12__ != null)
                    __ctx12__.__exLoanUpdate_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exLoanUpdate_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope60_13 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope60_13(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope60")
            {
            }

            public override int Index { get { return 13; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[23]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[23]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[24];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope60_13 __ctx13__ = (____scope60_13)(__svc__._stateMgrs[13]);

                if (__ctx13__ != null)
                    __ctx13__.__exInner_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exInner_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope61_14 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope61_14(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope61")
            {
            }

            public override int Index { get { return 14; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[25]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[25]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[28];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope61_14 __ctx14__ = (____scope61_14)(__svc__._stateMgrs[14]);

                if (__ctx14__ != null)
                    __ctx14__.__exEventLogging_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exEventLogging_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope62_15 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope62_15(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope62")
            {
            }

            public override int Index { get { return 15; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[26]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[26]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[27];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                ETRANObligationLogic __svc__ = (ETRANObligationLogic)_service;
                ____scope62_15 __ctx15__ = (____scope62_15)(__svc__._stateMgrs[15]);

                if (__ctx15__ != null)
                    __ctx15__.__exBtAuditFinal_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __exBtAuditFinal_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.DirectBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("SF_Notify_Receive")]
        internal SFNotificationSinglePortType SF_Notify_Receive;
        [Microsoft.XLANGs.BaseTypes.PhysicalBindingAttribute(typeof(SBA.BizTalk.Shared.Pipelines.General.SimpleNamespaceChangeDecoderReceive), typeof(SBA.BizTalk.Shared.Pipelines.General.SimpleNamespaceChangeEncoderSend))]
        [Microsoft.XLANGs.BaseTypes.DeliveryNotificationAttribute(Microsoft.XLANGs.BaseTypes.DeliveryNotificationAttribute.NotificationLevel.Transmitted)]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eDynamic
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("ETran_Originate3_Port")]
        internal ETRANOriginatePortType ETran_Originate3_Port;  // lock index = 0

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {SFNotificationSinglePortType.NotifySingle},
                                               typeof(ETRANObligationLogic).GetField("SF_Notify_Receive", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ETRANObligationLogic), "SF_Notify_Receive"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {ETRANOriginatePortType.Originate3},
                                               typeof(ETRANObligationLogic).GetField("ETran_Originate3_Port", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               true,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(ETRANObligationLogic), "ETran_Originate3_Port"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___All),
                    typeof(SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___StatusUpdate),
                    typeof(SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate),
                    typeof(SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce),
                    typeof(SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Query_NoParm),
                    typeof(SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Save)                    
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[1]{
                     new object[5] { _portInfo[0], 0, null , -1, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "9d0008fa-a18c-4e0b-8f12-b80439b3a24a", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "9d0008fa-a18c-4e0b-8f12-b80439b3a24a", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "0aaf36ae-98b8-4284-8f65-e457a7ff8189", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "0aaf36ae-98b8-4284-8f65-e457a7ff8189", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "e0237d5f-9e91-432a-b6d3-436fe075004f", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "f2569e3d-c6ea-4789-ba71-4b5a4dea66c1", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "f2569e3d-c6ea-4789-ba71-4b5a4dea66c1", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "b576ad87-e8cb-47c5-b385-e393f8ccd379", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "0cc5dfb1-3923-4d60-941c-544103c65360", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "0cc5dfb1-3923-4d60-941c-544103c65360", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "00000000-0000-0000-0000-000000000000", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "00000000-0000-0000-0000-000000000000", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "276237f5-fb5c-4124-9d37-363a5c3504f0", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "276237f5-fb5c-4124-9d37-363a5c3504f0", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "c9996409-6886-4ce4-a06c-2db0459029da", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "c9996409-6886-4ce4-a06c-2db0459029da", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "624f488d-f8c9-440a-9546-265b7d0d8d0a", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "624f488d-f8c9-440a-9546-265b7d0d8d0a", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "d62ca653-63c1-4057-8f7e-1bba844bb410", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "8ffcde6b-deab-4727-aa1e-620e510b88f1", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "8ffcde6b-deab-4727-aa1e-620e510b88f1", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "d175d4e3-3238-45f9-ae24-e672e2963e26", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "d175d4e3-3238-45f9-ae24-e672e2963e26", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(26, "d62ca653-63c1-4057-8f7e-1bba844bb410", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(27, "57bb9b05-9072-4f5f-8a44-71ae062f3aba", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(28, "b576ad87-e8cb-47c5-b385-e393f8ccd379", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(29, "e0237d5f-9e91-432a-b6d3-436fe075004f", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(30, "f79bd841-98c3-4431-857b-85e9e0161f9e", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(31, "00000000-0000-0000-0000-000000000000", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(32, "43a301d5-3a97-440b-b823-4a72fc0b18b0", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(33, "43a301d5-3a97-440b-b823-4a72fc0b18b0", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(34, "3b6dc529-7bda-4c5e-aac5-ca18e70b400c", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(35, "00000000-0000-0000-0000-000000000000", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(36, "00000000-0000-0000-0000-000000000000", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(37, "3b6dc529-7bda-4c5e-aac5-ca18e70b400c", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(38, "4a5e5973-9d2d-4255-97d0-27e470257923", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(39, "a3740ab7-3ebe-4f03-bb53-5d0245dbc95c", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(40, "a3740ab7-3ebe-4f03-bb53-5d0245dbc95c", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(41, "00000000-0000-0000-0000-000000000000", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(42, "00000000-0000-0000-0000-000000000000", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(43, "068ff41a-37dc-415c-93c1-4edba6f2d37d", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(44, "068ff41a-37dc-415c-93c1-4edba6f2d37d", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(45, "6784a7f2-c680-4e88-bbe2-4b5147c2d625", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(46, "6784a7f2-c680-4e88-bbe2-4b5147c2d625", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(47, "7c11a6ff-9510-4813-bbef-32f4f3034bf4", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(48, "7c11a6ff-9510-4813-bbef-32f4f3034bf4", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(49, "4096ab60-625a-4a28-98b1-094841915eec", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(50, "a4b2cd04-93d4-444b-a5fa-85b4eb02112a", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(51, "a4b2cd04-93d4-444b-a5fa-85b4eb02112a", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(52, "bd73c65e-a7a0-43c5-8520-8ed52091b335", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(53, "bd73c65e-a7a0-43c5-8520-8ed52091b335", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(54, "4096ab60-625a-4a28-98b1-094841915eec", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(55, "d4a91e07-74db-40db-baa3-81c73e150e76", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(56, "4a5e5973-9d2d-4255-97d0-27e470257923", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(57, "f79bd841-98c3-4431-857b-85e9e0161f9e", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(58, "64b6ac8b-3e7c-43ab-ae82-48f889fc141a", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(59, "00000000-0000-0000-0000-000000000000", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(60, "3e47ceca-c5a8-4d6b-a803-a598cf34c11d", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(61, "3e47ceca-c5a8-4d6b-a803-a598cf34c11d", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(62, "00000000-0000-0000-0000-000000000000", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(63, "3831c9ab-fbd1-4ee1-b592-1d6d12ed84a2", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(64, "3831c9ab-fbd1-4ee1-b592-1d6d12ed84a2", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(65, "bdd6012b-1087-4e44-ba7f-0312abac20a8", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(66, "00000000-0000-0000-0000-000000000000", 8, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(67, "00000000-0000-0000-0000-000000000000", 8, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(68, "bdd6012b-1087-4e44-ba7f-0312abac20a8", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(69, "4b6f1d86-efa3-4eff-adc9-e015a977271c", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(70, "4920ab8d-83db-4928-b418-b8cfbf860e2d", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(71, "4920ab8d-83db-4928-b418-b8cfbf860e2d", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(72, "cebbaaaf-24ac-4e1f-8bf9-8376bc876747", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(73, "cebbaaaf-24ac-4e1f-8bf9-8376bc876747", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(74, "f5925138-6e24-476f-81c0-0d2db02cf60f", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(75, "f5925138-6e24-476f-81c0-0d2db02cf60f", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(76, "77c0a15d-7bd6-4fd4-b204-1994d509ca28", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(77, "4b6f1d86-efa3-4eff-adc9-e015a977271c", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(78, "3fee5f1c-3795-4ed1-836e-9915ae0c0344", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(79, "3fee5f1c-3795-4ed1-836e-9915ae0c0344", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(80, "d29d8683-8cd1-434c-a6a7-e29432bf6988", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(81, "d29d8683-8cd1-434c-a6a7-e29432bf6988", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(82, "80db332f-78c8-4678-a81a-d428b3ed3072", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(83, "80db332f-78c8-4678-a81a-d428b3ed3072", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(84, "50fbfe01-bccb-47ed-85b9-212cb7f7abea", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(85, "c9539a2a-6c1e-436e-adce-d54b765a367e", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(86, "c9539a2a-6c1e-436e-adce-d54b765a367e", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(87, "9ce6607c-e910-4a67-88e1-b1bea3fbfd37", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(88, "9ce6607c-e910-4a67-88e1-b1bea3fbfd37", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(89, "704c4ca9-a261-4845-969a-536ff4c196b4", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(90, "704c4ca9-a261-4845-969a-536ff4c196b4", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(91, "3fb6c8a2-fb76-424d-b781-f9c6aae9efc5", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(92, "50fbfe01-bccb-47ed-85b9-212cb7f7abea", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(93, "efc5efb9-cf2f-44a6-96f2-9dcf98f1f335", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(94, "efc5efb9-cf2f-44a6-96f2-9dcf98f1f335", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(95, "7a7e9d7c-8c9b-472b-8ea8-01696b8dccd2", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(96, "7a7e9d7c-8c9b-472b-8ea8-01696b8dccd2", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(97, "12878e4c-18b6-43d2-9a10-0d15a5b4b268", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(98, "12878e4c-18b6-43d2-9a10-0d15a5b4b268", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(99, "a92f17e3-4625-40e6-8d6c-8f81b2480390", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(100, "a92f17e3-4625-40e6-8d6c-8f81b2480390", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(101, "2ca367f3-6579-4d2e-aa06-1853ffefc5ba", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(102, "00000000-0000-0000-0000-000000000000", 9, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(103, "1093c121-d79b-429f-ab8b-bfab411f8558", 9, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(104, "1093c121-d79b-429f-ab8b-bfab411f8558", 9, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(105, "d4851353-2209-4626-a47a-4703a0bc7113", 10, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(106, "454342e6-f97a-4b53-8f6f-8727574e2b55", 10, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(107, "454342e6-f97a-4b53-8f6f-8727574e2b55", 10, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(108, "00000000-0000-0000-0000-000000000000", 10, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(109, "00000000-0000-0000-0000-000000000000", 10, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(110, "d4851353-2209-4626-a47a-4703a0bc7113", 10, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(111, "2ca367f3-6579-4d2e-aa06-1853ffefc5ba", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(112, "76bd31f7-6ba7-42cb-b59a-33bc3749fdb2", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(113, "e58caa1f-d73f-416a-8ba5-059f3ba3d5ce", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(114, "e58caa1f-d73f-416a-8ba5-059f3ba3d5ce", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(115, "0bcd248a-fedb-4439-aa51-4581bff7751d", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(116, "0bcd248a-fedb-4439-aa51-4581bff7751d", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(117, "b33d192d-36a2-4d47-b36b-7c7cc9799a38", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(118, "b33d192d-36a2-4d47-b36b-7c7cc9799a38", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(119, "a864eb7c-d233-4f39-9203-f1c1904d6cda", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(120, "a864eb7c-d233-4f39-9203-f1c1904d6cda", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(121, "a432802b-c350-4eda-8ab0-4c05ab0efbd6", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(122, "a432802b-c350-4eda-8ab0-4c05ab0efbd6", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(123, "2cdb7967-f371-4f6c-bfd7-47aaeeae9669", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(124, "76bd31f7-6ba7-42cb-b59a-33bc3749fdb2", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(125, "9b24f1ea-9f6d-4252-a5ae-ef5f5b8da25c", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(126, "6d80ef3e-768a-4c96-abce-67b3596c3446", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(127, "6d80ef3e-768a-4c96-abce-67b3596c3446", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(128, "2cf301f0-2c5a-4b29-8f72-11f438e24a2e", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(129, "2cf301f0-2c5a-4b29-8f72-11f438e24a2e", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(130, "9b24f1ea-9f6d-4252-a5ae-ef5f5b8da25c", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(131, "b0032d13-3618-4ca2-8ac7-c60557774143", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(132, "8666dd9d-9e1e-414e-8382-2c3e9cec88d1", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(133, "8666dd9d-9e1e-414e-8382-2c3e9cec88d1", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(134, "521e77b9-757a-43c7-b376-cd4f6326f647", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(135, "5d548c04-68b5-46e3-8e6d-d3bee9418c4d", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(136, "5d548c04-68b5-46e3-8e6d-d3bee9418c4d", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(137, "521e77b9-757a-43c7-b376-cd4f6326f647", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(138, "b0032d13-3618-4ca2-8ac7-c60557774143", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(139, "8fb70f73-141c-4fbd-a372-4fb3f1ae9e6d", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(140, "75b494ee-b30c-494e-80bf-c139b90e019c", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(141, "75b494ee-b30c-494e-80bf-c139b90e019c", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(142, "7a92d22b-aadb-445c-a886-0201148360aa", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(143, "d6e94240-696e-4892-a3e6-bdf1a29c1e71", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(144, "d6e94240-696e-4892-a3e6-bdf1a29c1e71", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(145, "7a92d22b-aadb-445c-a886-0201148360aa", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(146, "8fb70f73-141c-4fbd-a372-4fb3f1ae9e6d", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(147, "4ed55e4b-6692-43ca-9b79-4f2bcc5213cc", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(148, "52e6d3b2-e5f4-4e8d-bc18-a75e82006e2b", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(149, "9e148208-44ef-4cdc-a42c-9e416afcd572", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(150, "9e148208-44ef-4cdc-a42c-9e416afcd572", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(151, "52e6d3b2-e5f4-4e8d-bc18-a75e82006e2b", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(152, "4ed55e4b-6692-43ca-9b79-4f2bcc5213cc", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(153, "13e77923-27b5-4ed5-bc22-24ebe4654e7b", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(154, "6224a92c-8223-442f-8e52-b783fb9eeb2b", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(155, "cfe2bb5e-26dd-45c8-91ae-1de1fe5b497b", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(156, "1ac9ad1b-fc47-4b04-bbe9-0ab85a3f387b", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(157, "1ac9ad1b-fc47-4b04-bbe9-0ab85a3f387b", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(158, "9b07ae96-effc-4118-80e7-f8b5eac607b0", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(159, "9b07ae96-effc-4118-80e7-f8b5eac607b0", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(160, "cfe2bb5e-26dd-45c8-91ae-1de1fe5b497b", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(161, "b662e531-c1c7-443a-8683-af26cccfff37", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(162, "b662e531-c1c7-443a-8683-af26cccfff37", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(163, "6224a92c-8223-442f-8e52-b783fb9eeb2b", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(164, "13e77923-27b5-4ed5-bc22-24ebe4654e7b", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(165, "aa969da3-eed4-48fa-9332-ec444cc95831", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(166, "dcacfe7e-1f73-44f1-a0b9-0a2022c7e7ae", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(167, "dcacfe7e-1f73-44f1-a0b9-0a2022c7e7ae", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(168, "dbb339c2-8150-4c63-8806-b255331757ca", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(169, "dbb339c2-8150-4c63-8806-b255331757ca", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(170, "28b6d666-93b4-41df-9f8d-602f8ba25659", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(171, "aa969da3-eed4-48fa-9332-ec444cc95831", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(172, "44911854-955d-43bb-bfc6-6722f32d0395", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(173, "44911854-955d-43bb-bfc6-6722f32d0395", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(174, "5290e08f-80c7-436f-803c-b1315c3550e6", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(175, "5290e08f-80c7-436f-803c-b1315c3550e6", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(176, "4826c5b0-3943-4325-9e4e-87f72c12ceb4", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(177, "4826c5b0-3943-4325-9e4e-87f72c12ceb4", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(178, "337b1489-81fe-4c81-b643-325f915ce008", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(179, "d65b5928-bbdd-4eb9-8a2a-9de3fcd344b1", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(180, "d65b5928-bbdd-4eb9-8a2a-9de3fcd344b1", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(181, "b0a9fff1-335e-44ca-8de1-7b948f7c9932", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(182, "e6594a9c-33bc-40dd-a68e-f76d62f4518c", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(183, "e6594a9c-33bc-40dd-a68e-f76d62f4518c", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(184, "8cf8d7b6-59fd-4bef-9c0a-a8ad76673e47", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(185, "8cf8d7b6-59fd-4bef-9c0a-a8ad76673e47", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(186, "12c21c0f-1403-44a1-8090-72ef0c71722d", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(187, "00000000-0000-0000-0000-000000000000", 11, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(188, "00000000-0000-0000-0000-000000000000", 11, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(189, "12c21c0f-1403-44a1-8090-72ef0c71722d", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(190, "4ce034b6-731f-4da5-bf76-5e7aefe3c650", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(191, "4ce034b6-731f-4da5-bf76-5e7aefe3c650", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(192, "fdc2d8d0-0948-45a5-b78f-fb6623249aad", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(193, "fdc2d8d0-0948-45a5-b78f-fb6623249aad", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(194, "485be72b-d94c-42b5-9ceb-95af3a201160", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(195, "485be72b-d94c-42b5-9ceb-95af3a201160", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(196, "b0a9fff1-335e-44ca-8de1-7b948f7c9932", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(197, "cb646f58-a905-46c7-8a84-edfd4161a8bc", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(198, "cb646f58-a905-46c7-8a84-edfd4161a8bc", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(199, "337b1489-81fe-4c81-b643-325f915ce008", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(200, "aa8a2433-15c4-46f7-9543-53b72600abdd", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(201, "aa8a2433-15c4-46f7-9543-53b72600abdd", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(202, "200c79c9-76fb-4c38-9226-18d20f7d9594", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(203, "200c79c9-76fb-4c38-9226-18d20f7d9594", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(204, "cde6f24c-94fc-4851-b2b8-d8e9dc9b0773", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(205, "be1a9e2f-3546-4813-987a-bd850c28f69c", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(206, "00000000-0000-0000-0000-000000000000", 12, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(207, "2495d267-9a74-48ab-9f30-a9989e2bb202", 12, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(208, "2495d267-9a74-48ab-9f30-a9989e2bb202", 12, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(209, "04a53283-43f1-4ee1-bfae-2c72db7ecda9", 12, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(210, "04a53283-43f1-4ee1-bfae-2c72db7ecda9", 12, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(211, "e5be2368-7319-4409-9bbc-e0514833f531", 12, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(212, "e5be2368-7319-4409-9bbc-e0514833f531", 12, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(213, "308dc554-dd96-4643-8e3d-7f75f2a89cb5", 13, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(214, "0ba01092-39a5-421c-a33c-0df2c6f11375", 13, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(215, "0ba01092-39a5-421c-a33c-0df2c6f11375", 13, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(216, "00000000-0000-0000-0000-000000000000", 13, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(217, "00000000-0000-0000-0000-000000000000", 13, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(218, "308dc554-dd96-4643-8e3d-7f75f2a89cb5", 13, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(219, "be1a9e2f-3546-4813-987a-bd850c28f69c", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(220, "7f8e5ca0-4ac8-4253-bbdd-e38b3698d140", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(221, "e75d9761-3ecd-4aa6-a5f8-cd61936ca8e3", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(222, "e75d9761-3ecd-4aa6-a5f8-cd61936ca8e3", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(223, "7f8e5ca0-4ac8-4253-bbdd-e38b3698d140", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(224, "cde6f24c-94fc-4851-b2b8-d8e9dc9b0773", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(225, "c38b0c6a-bef9-4f76-bd04-22e4716b2935", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(226, "c38b0c6a-bef9-4f76-bd04-22e4716b2935", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(227, "b4d0474c-bf75-4063-ba60-381037091dd1", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(228, "00000000-0000-0000-0000-000000000000", 14, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(229, "6349357f-3bdb-445b-aff5-bd1df9fe9a96", 14, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(230, "6349357f-3bdb-445b-aff5-bd1df9fe9a96", 14, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(231, "30ae5582-ae42-4403-ad5d-41fe457cb229", 14, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(232, "30ae5582-ae42-4403-ad5d-41fe457cb229", 14, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(233, "42c9a161-5bdb-4211-b4d8-f5a78abb438d", 14, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(234, "42c9a161-5bdb-4211-b4d8-f5a78abb438d", 14, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(235, "00000000-0000-0000-0000-000000000000", 14, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(236, "99906019-9683-41de-8764-abc3678057d9", 15, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(237, "b32dd36a-2ed2-4a9b-b92b-69e11a6d3c2d", 15, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(238, "b32dd36a-2ed2-4a9b-b92b-69e11a6d3c2d", 15, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(239, "a4bb8223-5e83-4177-92c6-9d04426e684f", 15, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(240, "a4bb8223-5e83-4177-92c6-9d04426e684f", 15, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(241, "00000000-0000-0000-0000-000000000000", 15, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(242, "00000000-0000-0000-0000-000000000000", 15, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(243, "f446587d-7c3e-4157-aa36-802d7a94c84e", 15, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(244, "f446587d-7c3e-4157-aa36-802d7a94c84e", 15, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(245, "d604f178-325b-4ee4-8ddc-c07d2e2a1208", 15, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(246, "d604f178-325b-4ee4-8ddc-c07d2e2a1208", 15, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(247, "99906019-9683-41de-8764-abc3678057d9", 15, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(248, "7d2fa022-4f17-4af1-806e-7cf284a6340a", 16, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(249, "f623fa76-7b97-4f50-b2ff-a56dc9421539", 16, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(250, "f623fa76-7b97-4f50-b2ff-a56dc9421539", 16, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(251, "480197e8-6c5c-49a2-800c-142b8d28e144", 16, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(252, "480197e8-6c5c-49a2-800c-142b8d28e144", 16, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(253, "00000000-0000-0000-0000-000000000000", 16, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(254, "00000000-0000-0000-0000-000000000000", 16, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(255, "03144c18-b59b-466a-892c-184dc6bcfd35", 16, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(256, "03144c18-b59b-466a-892c-184dc6bcfd35", 16, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(257, "18019260-298c-460c-9f58-2ae16cdaa7e4", 16, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(258, "18019260-298c-460c-9f58-2ae16cdaa7e4", 16, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(259, "7d2fa022-4f17-4af1-806e-7cf284a6340a", 16, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(260, "cc6d81be-86bf-4968-8b73-f409f74af0fe", 17, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(261, "98f13ef0-a950-4e36-945e-3f7e8bbca6a0", 17, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(262, "98f13ef0-a950-4e36-945e-3f7e8bbca6a0", 17, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(263, "0186d6ea-328e-46ef-9421-fc726aec3588", 17, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(264, "0186d6ea-328e-46ef-9421-fc726aec3588", 17, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(265, "00000000-0000-0000-0000-000000000000", 17, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(266, "00000000-0000-0000-0000-000000000000", 17, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(267, "650e496e-914e-40e7-a2c6-9c545444dc55", 17, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(268, "650e496e-914e-40e7-a2c6-9c545444dc55", 17, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(269, "b0fa6f71-8dea-45dd-8c08-002803563b39", 17, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(270, "b0fa6f71-8dea-45dd-8c08-002803563b39", 17, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(271, "cc6d81be-86bf-4968-8b73-f409f74af0fe", 17, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(272, "b4d0474c-bf75-4063-ba60-381037091dd1", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(273, "30dc3b61-7116-469c-8506-ba23b61bf0f1", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(274, "f712dbeb-9d89-4737-8557-1145de70028f", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(275, "00000000-0000-0000-0000-000000000000", 18, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(276, "5bea8229-b7ea-4637-a557-b5cee6d72def", 18, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(277, "00000000-0000-0000-0000-000000000000", 18, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(278, "5bea8229-b7ea-4637-a557-b5cee6d72def", 18, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(279, "c3036ad5-ad94-4a0c-ab3a-69311289f7aa", 18, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(280, "c3036ad5-ad94-4a0c-ab3a-69311289f7aa", 18, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(281, "745209b1-9002-4917-b07c-424c690a79b3", 18, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(282, "745209b1-9002-4917-b07c-424c690a79b3", 18, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(283, "61993345-8f02-4c4f-8b7a-7c87996eb345", 19, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(284, "8591f6d3-56e0-4723-ac82-69699f3c8e33", 19, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(285, "8591f6d3-56e0-4723-ac82-69699f3c8e33", 19, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(286, "00000000-0000-0000-0000-000000000000", 19, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(287, "00000000-0000-0000-0000-000000000000", 19, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(288, "61993345-8f02-4c4f-8b7a-7c87996eb345", 19, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(289, "f712dbeb-9d89-4737-8557-1145de70028f", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(290, "74e015d6-3b7c-4992-901e-56d287f861c9", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(291, "57297fef-0f33-4f61-b3e6-5f02ac89f13e", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(292, "57297fef-0f33-4f61-b3e6-5f02ac89f13e", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(293, "74e015d6-3b7c-4992-901e-56d287f861c9", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(294, "30dc3b61-7116-469c-8506-ba23b61bf0f1", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(295, "59b04336-ea71-4fc6-8858-1abbb269b940", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(296, "59b04336-ea71-4fc6-8858-1abbb269b940", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(297, "6fd785fb-4a9c-4524-832c-028bc8d8a7d6", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(298, "6fd785fb-4a9c-4524-832c-028bc8d8a7d6", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(299, "9d3c1a15-00f3-4942-95cc-111b1506ef9a", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(300, "9d3c1a15-00f3-4942-95cc-111b1506ef9a", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(301, "52f4e19b-7488-4125-b79c-f288ecdbd7aa", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(302, "52f4e19b-7488-4125-b79c-f288ecdbd7aa", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(303, "407491ad-8e56-4849-b0a4-a2208446ab24", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(304, "407491ad-8e56-4849-b0a4-a2208446ab24", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(305, "23fe3f13-a120-4f74-9da3-c89630b8d5dd", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(306, "5632e4b5-8266-4067-9369-94760c8aa9e0", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(307, "5632e4b5-8266-4067-9369-94760c8aa9e0", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(308, "422224de-0a06-4a0e-9632-3bb098b5c287", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(309, "422224de-0a06-4a0e-9632-3bb098b5c287", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(310, "0c7d3478-5311-49cf-86ec-ac720091a870", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(311, "0c7d3478-5311-49cf-86ec-ac720091a870", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(312, "8fe62c7e-9afd-4c62-b0b7-e42771c201b4", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(313, "00000000-0000-0000-0000-000000000000", 20, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(314, "b335a54e-2838-490d-a584-37dbc63de55c", 20, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(315, "b335a54e-2838-490d-a584-37dbc63de55c", 20, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(316, "00850782-f21a-4da8-b87a-5abd98e80453", 21, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(317, "8150612d-c260-416e-9be3-e3df0af996b7", 21, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(318, "8150612d-c260-416e-9be3-e3df0af996b7", 21, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(319, "00000000-0000-0000-0000-000000000000", 21, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(320, "00000000-0000-0000-0000-000000000000", 21, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(321, "00850782-f21a-4da8-b87a-5abd98e80453", 21, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(322, "8fe62c7e-9afd-4c62-b0b7-e42771c201b4", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(323, "23fe3f13-a120-4f74-9da3-c89630b8d5dd", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(324, "bb4ae145-5705-4976-a112-c43506ebf7cc", 22, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(325, "60dfd91c-c834-4bc7-88b1-2db0cd8f6e35", 22, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(326, "60dfd91c-c834-4bc7-88b1-2db0cd8f6e35", 22, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(327, "00000000-0000-0000-0000-000000000000", 22, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(328, "00000000-0000-0000-0000-000000000000", 22, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(329, "6bafd73a-30d8-4d91-b027-8cb61272aadd", 22, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(330, "6bafd73a-30d8-4d91-b027-8cb61272aadd", 22, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(331, "e5496d1e-84b0-423e-96ec-725f8609b83e", 22, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(332, "e5496d1e-84b0-423e-96ec-725f8609b83e", 22, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(333, "f167b43f-4f35-4861-b466-7fc4bca40ee0", 22, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(334, "00000000-0000-0000-0000-000000000000", 23, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(335, "b753e454-865f-484c-ae2a-b5ce330b9b37", 23, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(336, "b753e454-865f-484c-ae2a-b5ce330b9b37", 23, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(337, "b0d41c3b-cc89-4579-bd57-fd632d334092", 23, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(338, "b0d41c3b-cc89-4579-bd57-fd632d334092", 23, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(339, "987a67db-f64d-4fbf-81f7-f8e5b0029f45", 23, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(340, "987a67db-f64d-4fbf-81f7-f8e5b0029f45", 23, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(341, "00000000-0000-0000-0000-000000000000", 23, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(342, "39aab17a-7630-40cd-ad0b-689e778b1338", 23, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(343, "39aab17a-7630-40cd-ad0b-689e778b1338", 23, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(344, "da32304a-a783-4f42-ab36-c56724b28685", 24, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(345, "30cab463-0479-46f1-b201-5b03d327eed3", 24, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(346, "30cab463-0479-46f1-b201-5b03d327eed3", 24, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(347, "093547c3-b764-4596-8e79-b94af878edc5", 24, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(348, "093547c3-b764-4596-8e79-b94af878edc5", 24, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(349, "00000000-0000-0000-0000-000000000000", 24, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(350, "00000000-0000-0000-0000-000000000000", 24, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(351, "24b7ae04-28c2-4096-bc57-e639b68628a8", 24, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(352, "24b7ae04-28c2-4096-bc57-e639b68628a8", 24, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(353, "da32304a-a783-4f42-ab36-c56724b28685", 24, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(354, "f167b43f-4f35-4861-b466-7fc4bca40ee0", 22, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(355, "bb4ae145-5705-4976-a112-c43506ebf7cc", 22, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(356, "64b6ac8b-3e7c-43ab-ae82-48f889fc141a", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(357, "152c295c-bf84-4923-87ac-6a8ae210421e", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(358, "00000000-0000-0000-0000-000000000000", 25, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(359, "b9750666-c3d8-4729-9a47-79c1156ff4d6", 25, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(360, "00000000-0000-0000-0000-000000000000", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(361, "f68c5698-56a3-459b-b280-d5cbb37ffc07", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(362, "444d0cc3-d6a3-418d-bca9-0c7d20bc15e3", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(363, "2c4afcef-ae24-458e-83c4-bfee70c40861", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(364, "53ab454a-2533-4f36-a914-ac4e5aae0d7a", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(365, "53ab454a-2533-4f36-a914-ac4e5aae0d7a", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(366, "5b8aeca8-5807-4cec-8d49-72877d50cb01", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(367, "2645248b-f560-4578-bd2e-058fc864f744", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(368, "2645248b-f560-4578-bd2e-058fc864f744", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(369, "fdf5a2a9-d29b-484e-a619-a470d4b3239d", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(370, "fdf5a2a9-d29b-484e-a619-a470d4b3239d", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(371, "5b8aeca8-5807-4cec-8d49-72877d50cb01", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(372, "4bc3cf7b-7053-4551-a2ee-774bf06b49a8", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(373, "4bc3cf7b-7053-4551-a2ee-774bf06b49a8", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(374, "00000000-0000-0000-0000-000000000000", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(375, "dfec0ba2-1ce3-44c4-a4f0-2922b3e25d77", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(376, "dfec0ba2-1ce3-44c4-a4f0-2922b3e25d77", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(377, "2c4afcef-ae24-458e-83c4-bfee70c40861", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(378, "f4ea9e1c-5c66-4282-b345-8b1a464a1c40", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(379, "f4ea9e1c-5c66-4282-b345-8b1a464a1c40", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(380, "444d0cc3-d6a3-418d-bca9-0c7d20bc15e3", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(381, "158e1791-4874-4353-950f-b5034a342f18", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(382, "7d9780d2-dbaf-4128-ac3a-d73a2098f8d8", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(383, "7d9780d2-dbaf-4128-ac3a-d73a2098f8d8", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(384, "158e1791-4874-4353-950f-b5034a342f18", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(385, "22a359fa-7634-4abc-afe0-b66d46aad936", 26, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(386, "22a359fa-7634-4abc-afe0-b66d46aad936", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(387, "f68c5698-56a3-459b-b280-d5cbb37ffc07", 26, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(388, "f1f69389-ee4b-40dd-9231-7fdec7500787", 27, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(389, "daf797d7-5d9a-4fec-b12f-2bd91d8b3eda", 27, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(390, "daf797d7-5d9a-4fec-b12f-2bd91d8b3eda", 27, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(391, "00000000-0000-0000-0000-000000000000", 27, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(392, "00000000-0000-0000-0000-000000000000", 27, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(393, "f1f69389-ee4b-40dd-9231-7fdec7500787", 27, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(394, "b9750666-c3d8-4729-9a47-79c1156ff4d6", 25, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(395, "b92652bf-8041-4cb8-8a20-f9525f16d87c", 25, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(396, "b92652bf-8041-4cb8-8a20-f9525f16d87c", 25, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(397, "f15fc139-dd14-42f9-8ea4-bf8755cf8572", 28, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(398, "52fd919e-1ceb-4ef2-85dc-9eea433fe2d6", 28, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(399, "52fd919e-1ceb-4ef2-85dc-9eea433fe2d6", 28, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(400, "00000000-0000-0000-0000-000000000000", 28, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(401, "00000000-0000-0000-0000-000000000000", 28, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(402, "6744c0f4-42fd-4e6b-a3a4-4437ee5546c1", 28, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(403, "6744c0f4-42fd-4e6b-a3a4-4437ee5546c1", 28, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(404, "59ba1990-74cc-4fe1-b652-47b4c45e85e0", 28, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(405, "59ba1990-74cc-4fe1-b652-47b4c45e85e0", 28, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(406, "84fe56d2-8e9a-4318-8b83-b916d7592992", 28, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(407, "f15fc139-dd14-42f9-8ea4-bf8755cf8572", 28, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(408, "152c295c-bf84-4923-87ac-6a8ae210421e", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Call),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.While),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.WhileBody),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,3,3,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,29,30,30,30,57,58,58,58,356,357,357,357,408,3,3,3,3,};
        public static int[] __progressLocation2 = new int[] { 8,8,8,9,9,9,9,};
        public static int[] __progressLocation3 = new int[] { 10,10,11,11,12,12,15,15,16,16,17,17,18,18,19,19,19,20,21,21,22,22,23,21,24,24,25,26,27,27,28,28,};
        public static int[] __progressLocation4 = new int[] { 32,32,32,33,34,34,34,37,37,37,37,};
        public static int[] __progressLocation5 = new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,};
        public static int[] __progressLocation6 = new int[] { 38,38,39,39,40,40,43,43,44,44,45,45,46,46,47,47,47,48,49,49,50,50,51,49,52,52,53,54,55,55,56,56,};
        public static int[] __progressLocation7 = new int[] { 60,60,60,61,61,63,63,64,65,65,65,68,69,69,70,70,71,71,72,72,72,73,74,74,75,76,76,77,78,78,79,80,80,81,82,82,83,84,84,84,85,85,86,86,87,87,87,88,89,89,90,91,91,92,93,93,94,95,95,96,97,97,98,99,99,100,101,101,101,111,112,112,113,113,114,115,115,116,117,117,118,112,119,119,119,120,121,121,122,123,123,124,125,125,126,126,126,126,126,127,125,128,128,129,129,130,131,131,132,132,133,133,133,134,134,134,135,135,136,136,137,138,139,139,140,140,141,141,141,142,142,142,143,143,144,144,145,146,147,147,148,148,148,149,149,150,150,151,152,153,153,154,154,155,155,156,156,157,155,158,158,159,160,154,161,161,162,163,164,165,165,166,166,166,167,168,168,169,170,170,171,172,172,173,174,174,175,176,176,177,177,177,178,178,178,179,179,180,181,181,181,182,182,183,184,184,185,186,186,186,189,190,190,191,192,192,193,194,194,195,196,197,197,198,199,199,199,200,200,201,202,202,203,204,204,205,205,205,219,220,220,221,221,222,222,222,222,222,222,223,224,225,225,226,227,227,227,272,273,273,274,274,274,289,290,290,291,291,292,292,292,292,292,292,293,294,295,295,296,297,297,298,299,299,300,301,301,302,303,303,304,304,304,305,305,306,306,307,308,308,309,310,310,311,312,312,312,322,323,323,323,323,};
        public static int[] __progressLocation8 = new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,};
        public static int[] __progressLocation9 = new int[] { 103,103,103,104,104,104,104,};
        public static int[] __progressLocation10 = new int[] { 105,105,106,106,107,107,110,110,};
        public static int[] __progressLocation11 = new int[] { 0,0,0,0,0,0,0,0,0,0,0,0,};
        public static int[] __progressLocation12 = new int[] { 207,207,207,208,209,209,210,211,211,212,212,212,212,};
        public static int[] __progressLocation13 = new int[] { 213,213,214,214,215,215,218,218,};
        public static int[] __progressLocation14 = new int[] { 229,229,229,229,230,231,231,232,233,233,234,234,234,234,234,};
        public static int[] __progressLocation15 = new int[] { 236,236,237,237,238,239,239,240,240,243,243,244,244,245,245,246,247,247,};
        public static int[] __progressLocation16 = new int[] { 248,248,249,249,250,251,251,252,252,255,255,256,256,257,257,258,259,259,};
        public static int[] __progressLocation17 = new int[] { 260,260,261,261,262,263,263,264,264,267,267,268,268,269,269,270,271,271,};
        public static int[] __progressLocation18 = new int[] { 276,276,276,276,278,279,279,280,281,281,282,282,282,282,};
        public static int[] __progressLocation19 = new int[] { 283,283,284,284,285,285,288,288,};
        public static int[] __progressLocation20 = new int[] { 314,314,314,315,315,315,315,};
        public static int[] __progressLocation21 = new int[] { 316,316,317,317,318,318,321,321,};
        public static int[] __progressLocation22 = new int[] { 324,324,325,325,326,326,326,326,326,329,329,330,330,331,331,331,332,333,333,333,354,355,355,};
        public static int[] __progressLocation23 = new int[] { 335,335,335,336,337,337,338,339,339,340,340,340,340,340,340,340,342,342,342,343,343,343,343,};
        public static int[] __progressLocation24 = new int[] { 344,344,345,345,346,347,347,348,348,351,351,351,352,353,353,};
        public static int[] __progressLocation25 = new int[] { 359,359,359,359,394,395,395,396,396,396,396,};
        public static int[] __progressLocation26 = new int[] { 361,361,361,362,362,363,363,364,364,365,366,366,367,367,368,366,369,369,370,371,363,372,372,373,373,375,375,376,377,362,378,378,379,379,380,381,381,382,382,383,383,383,383,383,383,383,384,385,385,386,387,387,387,387,};
        public static int[] __progressLocation27 = new int[] { 388,388,389,389,390,390,390,390,390,390,390,393,393,};
        public static int[] __progressLocation28 = new int[] { 397,397,398,398,399,399,402,402,402,403,404,404,405,406,406,407,407,};

        public static int[][] __progressLocations = new int[29] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3,__progressLocation4,__progressLocation5,__progressLocation6,__progressLocation7,__progressLocation8,__progressLocation9,__progressLocation10,__progressLocation11,__progressLocation12,__progressLocation13,__progressLocation14,__progressLocation15,__progressLocation16,__progressLocation17,__progressLocation18,__progressLocation19,__progressLocation20,__progressLocation21,__progressLocation22,__progressLocation23,__progressLocation24,__progressLocation25,__progressLocation26,__progressLocation27,__progressLocation28};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            __ETRANObligationLogic_root_0 __ctx0__ = (__ETRANObligationLogic_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                SF_Notify_Receive = new SFNotificationSinglePortType(0, this);
                ETran_Originate3_Port = new ETRANOriginatePortType(1, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], SF_Notify_Receive, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __ETRANObligationLogic_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            ____scope61_14 __ctx14__ = (____scope61_14)_stateMgrs[14];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            __ETRANObligationLogic_root_0 __ctx0__ = (__ETRANObligationLogic_root_0)_stateMgrs[0];
            ____scope50_3 __ctx3__ = (____scope50_3)_stateMgrs[3];
            ____scope49_2 __ctx2__ = (____scope49_2)_stateMgrs[2];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__SFBusTypeCurrent = default(System.String);
                __ctx1__.__BTAuditMessage = default(System.String);
                __ctx1__.__BTAuditStatus = default(System.String);
                __ctx1__.__BTAuditId = default(System.String);
                __ctx1__.__ETranResponseXml = default(System.String);
                __ctx1__.__ETranRequestXml = default(System.String);
                __ctx1__.__ProcessStatusCode = default(System.String);
                __ctx1__.__FEMARegistrationNumber = default(System.String);
                __ctx1__.__FEMAEventCode = default(System.String);
                __ctx1__.__DisasterNumber = default(System.String);
                __ctx1__.__AutoDeclineReason = default(System.String);
                __ctx1__.__OrchestrationInstanceId = default(System.Guid);
                __ctx1__.__SalesforceObjectId = default(System.String);
                __ctx1__.__ApplicationNumber = default(System.String);
                __ctx1__.__Status = default(System.String);
                __ctx1__.__Stage = default(System.String);
                __ctx1__.__SalesforceObjectName = default(System.String);
                __ctx1__.__Message = default(System.String);
                __ctx1__.__LoanOriginateSuccess = default(System.Boolean);
                __ctx1__.__XpathStmt = default(System.String);
                __ctx1__.__Ex = default(System.Exception);
                __ctx1__.__ExInner = default(System.Exception);
                __ctx1__.__TempOrchestrationInstanceId = default(System.String);
                __ctx1__.__TmpXmlDoc = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx1__.__TmpMsgXml = default(System.String);
                __ctx1__.__SOQL = default(System.String);
                __ctx1__.__XpathStmtBase = default(System.String);
                __ctx1__.__PropertyId = default(System.String);
                __ctx1__.__ApplicantCount = default(System.Int32);
                __ctx1__.__ErrorMaxLength = default(System.Int32);
                __ctx1__.__InterfaceType = default(System.String);
                __ctx1__.__TempXmlDoc = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx1__.__BTAuditStepCompleted = default(System.String);
                __ctx1__.__SFBusTypesListAll = default(SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList);
                __ctx1__.__SFBusTypesDict = default(SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringDictionary);
                __ctx1__.__SFBusTypesListAllIndex = default(System.Int32);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!SF_Notify_Receive.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__SFNotificationSingleMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationSingleMsg);
                __ctx1__.__SFNotificationSingleMsg = new SFNotificationSingleMsgType("SFNotificationSingleMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__SFNotificationSingleMsg);
                SF_Notify_Receive.ReceiveMessage(0, __msgEnv__, __ctx1__.__SFNotificationSingleMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (SF_Notify_Receive != null)
                {
                    SF_Notify_Receive.Close(__ctx1__, __seg__);
                    SF_Notify_Receive = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__SFNotificationSingleMsg);
                    __edata.PortName = @"SF_Notify_Receive";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__SFBusTypeCurrent = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx1__.__BTAuditMessage = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.__BTAuditStatus = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__BTAuditId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                __ctx1__.__ETranResponseXml = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                __ctx1__.__ETranRequestXml = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                __ctx1__.__ProcessStatusCode = "Ready";
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                __ctx1__.__FEMARegistrationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                __ctx1__.__FEMAEventCode = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                __ctx1__.__DisasterNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                __ctx1__.__AutoDeclineReason = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                __ctx1__.__SalesforceObjectId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                __ctx1__.__ApplicationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                __ctx1__.__Status = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                __ctx1__.__Stage = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                __ctx1__.__SalesforceObjectName = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                __ctx1__.__Message = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                __ctx1__.__LoanOriginateSuccess = false;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                __ctx1__.__XpathStmt = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                __ctx1__.__Ex = new System.Exception();
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                __ctx1__.__ExInner = new System.Exception();
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                __ctx1__.__TempOrchestrationInstanceId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                __ctx1__.__TmpXmlDoc.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                __ctx1__.__TmpMsgXml = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 29;
            case 29:
                __ctx1__.__SOQL = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 30;
            case 30:
                __ctx1__.__XpathStmtBase = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                __ctx1__.__PropertyId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 32:
                __ctx1__.__ApplicantCount = 0;
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 33;
            case 33:
                __ctx1__.__ErrorMaxLength = 20000;
                if ( !PostProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 34;
            case 34:
                __ctx1__.__InterfaceType = "ETran Obligation";
                if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 35;
            case 35:
                __ctx1__.__TempXmlDoc.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if ( !PostProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 36;
            case 36:
                __ctx1__.__BTAuditStepCompleted = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                __ctx1__.__SFBusTypesListAll = new SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringList();
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 38:
                __ctx1__.__SFBusTypesDict = new SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringDictionary();
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 39:
                __ctx1__.__SFBusTypesListAllIndex = 0;
                if ( !PostProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 40;
            case 40:
                if ( !PreProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 41;
            case 41:
                __ctx1__.__TempOrchestrationInstanceId = System.Convert.ToString((System.String)GetPropertyValueThrows(typeof(Microsoft.XLANGs.BaseTypes.InstanceId)));
                if ( !PostProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 42;
            case 42:
                if ( !PreProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[5],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 43;
            case 43:
                __ctx1__.__OrchestrationInstanceId = System.Guid.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 44;
            case 44:
                if ( !PreProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 45;
            case 45:
                __condition__ = !System.Guid.TryParse(__ctx1__.__TempOrchestrationInstanceId, out __ctx1__.__OrchestrationInstanceId);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 50 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 50;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 46;
            case 46:
                __ctx1__.__Ex = new System.Exception("Unable to get Orchestration Instance GUID!");
                if ( !PostProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 47;
            case 47:
                __ctx1__.__Ex.Data.Add("TempOrchestrationInstanceId", __ctx1__.__TempOrchestrationInstanceId);
                if ( !PostProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 48;
            case 48:
                if ( !PreProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 49;
            case 49:
                throw __ctx1__.__Ex;
            case 50:
                if ( !PreProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__TempOrchestrationInstanceId = null;
                Tracker.FireEvent(__eventLocations[3],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 51;
            case 51:
                __ctx1__.__Stage = "Loan Obligated";
                if ( !PostProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 52;
            case 52:
                __ctx1__.__Status = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 53;
            case 53:
                __ctx1__.__Message = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 54;
            case 54:
                __ctx1__.__ApplicationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 55:
                __ctx1__.__SalesforceObjectId = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 56;
            case 56:
                __ctx1__.__SalesforceObjectName = "Loan__c";
                if ( !PostProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 57;
            case 57:
                __ctx1__.__DisasterNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 58;
            case 58:
                __ctx1__.__FEMAEventCode = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 59;
            case 59:
                __ctx1__.__FEMARegistrationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 60 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 60;
            case 60:
                __ctx1__.__InterfaceType = "ETran Obligation";
                if ( !PostProgressInc( __seg__, __ctx__, 61 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 61;
            case 61:
                __ctx1__.__ProcessStatusCode = "Success";
                if ( !PostProgressInc( __seg__, __ctx__, 62 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 62;
            case 62:
                if ( !PreProgressInc( __seg__, __ctx__, 63 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 63;
            case 63:
                __ctx2__ = new ____scope49_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 64 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 64;
            case 64:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 65 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 65:
                if ( !PreProgressInc( __seg__, __ctx__, 66 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[29],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 66;
            case 66:
                if ( !PreProgressInc( __seg__, __ctx__, 67 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[30],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 67;
            case 67:
                __ctx3__ = new ____scope50_3(this);
                _stateMgrs[3] = __ctx3__;
                if ( !PostProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 68;
            case 68:
                __ctx1__.StartContext(__seg__, __ctx3__);
                if ( !PostProgressInc( __seg__, __ctx__, 69 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 69:
                if ( !PreProgressInc( __seg__, __ctx__, 70 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[57],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx3__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 70;
            case 70:
                if ( !PreProgressInc( __seg__, __ctx__, 71 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[58],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 71;
            case 71:
                __ctx5__ = new ____scope52_5(this);
                _stateMgrs[5] = __ctx5__;
                if ( !PostProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 72;
            case 72:
                __ctx1__.StartContext(__seg__, __ctx5__);
                if ( !PostProgressInc( __seg__, __ctx__, 73 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 73:
                if ( !PreProgressInc( __seg__, __ctx__, 74 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__SFBusTypesDict = null;
                if (__ctx1__ != null)
                    __ctx1__.__SFBusTypesListAll = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempXmlDoc = null;
                if (__ctx1__ != null)
                    __ctx1__.__PropertyId = null;
                if (__ctx1__ != null)
                    __ctx1__.__XpathStmtBase = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL = null;
                if (__ctx1__ != null)
                    __ctx1__.__TmpMsgXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__TmpXmlDoc = null;
                if (__ctx1__ != null)
                    __ctx1__.__ExInner = null;
                if (__ctx1__ != null)
                    __ctx1__.__Ex = null;
                if (__ctx1__ != null)
                    __ctx1__.__XpathStmt = null;
                if (__ctx1__ != null)
                    __ctx1__.__ETranRequestXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__SFBusTypeCurrent = null;
                if (__ctx1__ != null && __ctx1__.__TempCanonicalMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__CanonicalMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFNotificationSingleMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFNotificationSingleMsg);
                    __ctx1__.__SFNotificationSingleMsg = null;
                }
                if (ETran_Originate3_Port != null)
                {
                    ETran_Originate3_Port.Close(__ctx1__, __seg__);
                    ETran_Originate3_Port = null;
                }
                Tracker.FireEvent(__eventLocations[356],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx5__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 74;
            case 74:
                if ( !PreProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[357],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 75;
            case 75:
                __ctx14__ = new ____scope61_14(this);
                _stateMgrs[14] = __ctx14__;
                if ( !PostProgressInc( __seg__, __ctx__, 76 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 76;
            case 76:
                __ctx1__.StartContext(__seg__, __ctx14__);
                if ( !PostProgressInc( __seg__, __ctx__, 77 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 77:
                if ( !PreProgressInc( __seg__, __ctx__, 78 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__BTAuditStepCompleted = null;
                if (__ctx1__ != null)
                    __ctx1__.__InterfaceType = null;
                if (__ctx1__ != null)
                    __ctx1__.__Message = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesforceObjectName = null;
                if (__ctx1__ != null)
                    __ctx1__.__Stage = null;
                if (__ctx1__ != null)
                    __ctx1__.__Status = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesforceObjectId = null;
                if (__ctx1__ != null)
                    __ctx1__.__AutoDeclineReason = null;
                if (__ctx1__ != null)
                    __ctx1__.__DisasterNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__FEMAEventCode = null;
                if (__ctx1__ != null)
                    __ctx1__.__FEMARegistrationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__ProcessStatusCode = null;
                if (__ctx1__ != null)
                    __ctx1__.__ETranResponseXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__BTAuditId = null;
                if (__ctx1__ != null)
                    __ctx1__.__BTAuditStatus = null;
                if (__ctx1__ != null)
                    __ctx1__.__BTAuditMessage = null;
                if (__ctx1__ != null && __ctx1__.__ETranObligationTransportMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETranObligationTransportMsg);
                    __ctx1__.__ETranObligationTransportMsg = null;
                }
                Tracker.FireEvent(__eventLocations[408],__eventData[14],_stateMgrs[1].TrackDataStream );
                __ctx14__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 78;
            case 78:
                if ( !PreProgressInc( __seg__, __ctx__, 79 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[20],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 79;
            case 79:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 80 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 80;
            case 80:
                if ( !PreProgressInc( __seg__, __ctx__, 81 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 81;
            case 81:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope49_2 __ctx2__ = (____scope49_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.Notification.Map_Notification_to_Canonical), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__SFNotificationSingleMsg.MessagePart});
                    __CanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__SFNotificationSingleMsg);
                    __CanonicalMsg.MessagePart.SetDistinguishedField("Event_Request__c.GUID__c", __ctx1__.__OrchestrationInstanceId.ToString());

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__SFNotificationSingleMsg);
                    Tracker.FireEvent(__eventLocations[9],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 6;
            case 6:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope49_2 __ctx2__ = (____scope49_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__Ex = __ctx2__.__exCan_0;
                if (__ctx2__ != null)
                    __ctx2__.__exCan_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__Ex.Data.Add("SF Notify Msg", SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__SFNotificationSingleMsg)));
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx1__.__Message = System.String.Format("Error creating initial canonical message, ETran Obligation processing cannot continue. \r\n\r\n{0}", SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx1__.__Ex));
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                __ctx1__.__ApplicationNumber = (System.String)__ctx1__.__SFNotificationSingleMsg.MessagePart.GetDistinguishedField("sObject.Application_Number__c");
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                __ctx1__.__SalesforceObjectId = (System.String)__ctx1__.__SFNotificationSingleMsg.MessagePart.GetDistinguishedField("sObject.SObject_ID__c");
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 17;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__ApplicationNumber);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 24;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce(16, InstanceId, this);
                    _stateMgrs[16] = svc;
                    __ctx2__.StartCall(__seg__, svc, __eventLocations[22],new object[] {__ctx1__.__OrchestrationInstanceId, __ctx1__.__Status, __ctx1__.__Stage, __ctx1__.__ApplicationNumber, __ctx1__.__SalesforceObjectName, __ctx1__.__SalesforceObjectId, __ctx1__.__Message, __ctx1__.__AutoDeclineReason});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[16]).Args;
                }
                Tracker.FireEvent(__eventLocations[23],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[24],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                System.Diagnostics.EventLog.WriteEntry("BizTalk: ETran Obligation", __ctx1__.__Message, System.Diagnostics.EventLogEntryType.Error);
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                Tracker.FireEvent(__eventLocations[25],__eventData[3],_stateMgrs[2].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[26],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[27],__eventData[12],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                RequestTerminate(__ctx2__,__ctx1__.__Message);
                __seg__.SegmentDone();
                break;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[28],__eventData[13],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment4(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[4];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope50_3 __ctx3__ = (____scope50_3)_stateMgrs[3];
            ____scope51_4 __ctx4__ = (____scope51_4)_stateMgrs[4];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[32],__eventData[8],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                {
                    ETranObligationTransportMsgType __ETranObligationTransportMsg = new ETranObligationTransportMsgType("ETranObligationTransportMsg", __ctx1__);

                    __ETranObligationTransportMsg.MessagePart.LoadFrom(null);
                    __ETranObligationTransportMsg.MessagePart.LoadFrom(SBA.BizTalk.Shared.MessageHelper.Embedded.EmbeddedMessageLoader.Instance.GetXmlDocument("SBA.ETRANObligation.Definition.Rules.ETranObligationTransport.xml", "SBA.ETRANObligation.Definition.Rules, Version=2.0.0.0, Culture=neutral, PublicKeyToken=18227d56be4ceab0"));

                    if (__ctx1__.__ETranObligationTransportMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETranObligationTransportMsg);
                    __ctx1__.__ETranObligationTransportMsg = __ETranObligationTransportMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETranObligationTransportMsg);
                }
                __ctx1__.__ETranObligationTransportMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETranObligationTransportMsg);
                    Tracker.FireEvent(__eventLocations[33],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[34],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx4__ = new ____scope51_4(this);
                _stateMgrs[4] = __ctx4__;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx3__.StartContext(__seg__, __ctx4__);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[37],__eventData[14],_stateMgrs[3].TrackDataStream );
                __ctx4__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                if (!__ctx3__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx3__.OnCommit();
                goto case 10;
            case 10:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment5(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[5];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[4];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope50_3 __ctx3__ = (____scope50_3)_stateMgrs[3];
            ____scope51_4 __ctx4__ = (____scope51_4)_stateMgrs[4];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx4__.__policy_3__ = default(Microsoft.RuleEngine.Policy);
                __ctx4__.__policyParam_3_3__ = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx4__.__policyParamAsTXD_3_3__ = default(Microsoft.RuleEngine.TypedXmlDocument);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx4__.__policyParam_3_3__.UnderlyingXmlDocument = __ctx1__.__ETranObligationTransportMsg.MessagePart.TypedValue;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx4__.__policyParamAsTXD_3_3__ = new Microsoft.RuleEngine.TypedXmlDocument("SBA.ETRANObligation.Definition.Rules.ETranObligationTransport", (System.Xml.XmlDocument)__ctx4__.__policyParam_3_3__.UnderlyingXmlDocument);
                if (__ctx4__ != null)
                    __ctx4__.__policyParam_3_3__ = null;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx4__.__policy_3__ = new Microsoft.RuleEngine.Policy("ETran Obligation Transport");
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx4__.__policy_3__.Execute(__ctx4__.__policyParamAsTXD_3_3__);
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[35],__eventData[8],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                {
                    ETranObligationTransportMsgType __ETranObligationTransportMsg = new ETranObligationTransportMsgType("ETranObligationTransportMsg", __ctx1__);

                    __ETranObligationTransportMsg.MessagePart.LoadFrom(__ctx4__.__policyParamAsTXD_3_3__.Document);
                    if (__ctx4__ != null)
                        __ctx4__.__policyParamAsTXD_3_3__ = null;

                    if (__ctx1__.__ETranObligationTransportMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETranObligationTransportMsg);
                    __ctx1__.__ETranObligationTransportMsg = __ETranObligationTransportMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETranObligationTransportMsg);
                }
                __ctx1__.__ETranObligationTransportMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETranObligationTransportMsg);
                    Tracker.FireEvent(__eventLocations[36],__edata,_stateMgrs[4].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx4__.__policy_3__.Dispose();
                if (__ctx4__ != null)
                    __ctx4__.__policy_3__ = null;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if (!__ctx4__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx4__.OnCommit();
                goto case 11;
            case 11:
                __seg__.SegmentDone();
                _segments[4].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment6(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[6];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope50_3 __ctx3__ = (____scope50_3)_stateMgrs[3];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(3);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[38],__eventData[9],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[39],__eventData[2],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__Ex = __ctx3__.__exETranTransport_0;
                if (__ctx3__ != null)
                    __ctx3__.__exETranTransport_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[40],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__Ex.Data.Add("SF Notify Msg", SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__SFNotificationSingleMsg)));
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[43],__eventData[2],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx1__.__Message = System.String.Format("Error creating ETran Transport message using embedded xml & BRE Policy. " + "ETran Obligation processing cannot continue. \r\n\r\n{0}", SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx1__.__Ex));
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[44],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[45],__eventData[2],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                __ctx1__.__ApplicationNumber = (System.String)__ctx1__.__SFNotificationSingleMsg.MessagePart.GetDistinguishedField("sObject.Application_Number__c");
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[46],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                __ctx1__.__SalesforceObjectId = (System.String)__ctx1__.__SFNotificationSingleMsg.MessagePart.GetDistinguishedField("sObject.SObject_ID__c");
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[47],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 17;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[48],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[49],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__ApplicationNumber);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 24;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[50],__eventData[10],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce(17, InstanceId, this);
                    _stateMgrs[17] = svc;
                    __ctx3__.StartCall(__seg__, svc, __eventLocations[50],new object[] {__ctx1__.__OrchestrationInstanceId, __ctx1__.__Status, __ctx1__.__Stage, __ctx1__.__ApplicationNumber, __ctx1__.__SalesforceObjectName, __ctx1__.__SalesforceObjectId, __ctx1__.__Message, __ctx1__.__AutoDeclineReason});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[17]).Args;
                }
                Tracker.FireEvent(__eventLocations[51],__eventData[11],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[52],__eventData[2],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                System.Diagnostics.EventLog.WriteEntry("BizTalk: ETran Obligation", __ctx1__.__Message, System.Diagnostics.EventLogEntryType.Error);
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                Tracker.FireEvent(__eventLocations[53],__eventData[3],_stateMgrs[3].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[54],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[55],__eventData[12],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                RequestTerminate(__ctx3__,__ctx1__.__Message);
                __seg__.SegmentDone();
                break;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[56],__eventData[13],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                __ctx3__.__exv__ = null;
                OnEndCatchHandler(3, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment7(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[7];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[5];
            ____scope58_11 __ctx11__ = (____scope58_11)_stateMgrs[11];
            ____scope59_12 __ctx12__ = (____scope59_12)_stateMgrs[12];
            ____scope56_9 __ctx9__ = (____scope56_9)_stateMgrs[9];
            ____scope57_10 __ctx10__ = (____scope57_10)_stateMgrs[10];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope54_7 __ctx7__ = (____scope54_7)_stateMgrs[7];
            __ETRANObligationLogic_root_0 __ctx0__ = (__ETRANObligationLogic_root_0)_stateMgrs[0];
            ____scope55_8 __ctx8__ = (____scope55_8)_stateMgrs[8];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];
            ____scope53_6 __ctx6__ = (____scope53_6)_stateMgrs[6];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[60],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                __ctx1__.__ApplicationNumber = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Notification.sObject.Application_Number__c");
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[61],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                __ctx1__.__SalesforceObjectId = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Notification.sObject.SObject_ID__c");
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[63],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                {
                    ETranCredentialsMsgType __ETranCredentials = new ETranCredentialsMsgType("ETranCredentials", __ctx1__);

                    __ETranCredentials.MessagePart.LoadFrom(null);
                    __ctx1__.__TmpXmlDoc.UnderlyingXmlDocument = SBA.BizTalk.Shared.MessageHelper.Embedded.EmbeddedMessageLoader.Instance.GetXmlDocument("SBA.ETRAN.Shared.Definition.ETranCredentials.xml", "SBA.ETRAN.Shared.Definition, Version=2.0.8.3, Culture=neutral, PublicKeyToken=c9f148e1d16b7a80");
                    __ETranCredentials.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TmpXmlDoc.UnderlyingXmlDocument);

                    if (__ctx1__.__ETranCredentials != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETranCredentials);
                    __ctx1__.__ETranCredentials = __ETranCredentials;
                    __ctx1__.RefMessage(__ctx1__.__ETranCredentials);
                }
                __ctx1__.__ETranCredentials.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETranCredentials);
                    Tracker.FireEvent(__eventLocations[64],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[65],__eventData[7],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx6__ = new ____scope53_6(this);
                _stateMgrs[6] = __ctx6__;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                __ctx5__.StartContext(__seg__, __ctx6__);
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[68],__eventData[14],_stateMgrs[5].TrackDataStream );
                __ctx6__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[69],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                __condition__ = SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AnyHaveNoValue((System.String)__ctx1__.__ETranCredentials.MessagePart.GetDistinguishedField("email"), (System.String)__ctx1__.__ETranCredentials.MessagePart.GetDistinguishedField("password"), (System.String)__ctx1__.__ETranCredentials.MessagePart.GetDistinguishedField("softwarevendorname"), (System.String)__ctx1__.__ETranCredentials.MessagePart.GetDistinguishedField("username"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 27;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[70],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                __ctx1__.__Message = "The BRE Rule Policy 'ETran Credentials' is either not deployed or has incomplete information. \r\n\r\n" + "Check in Business Rule Composer for the policy and ensure it is providing values for: \r\n\r\n" + "username \r\n" + "password \r\n" + "email \r\n" + "softwarevendorname \r\n\r\n" + "Also verify that the policy has been deployed.  Then attempt Disbursement again from Salesforce.";
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[71],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[72],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 21;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[73],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[74],__eventData[10],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce(18, InstanceId, this);
                    _stateMgrs[18] = svc;
                    __ctx5__.StartCall(__seg__, svc, __eventLocations[74],new object[] {__ctx1__.__OrchestrationInstanceId, __ctx1__.__Status, __ctx1__.__Stage, __ctx1__.__ApplicationNumber, __ctx1__.__SalesforceObjectName, __ctx1__.__SalesforceObjectId, __ctx1__.__Message, __ctx1__.__AutoDeclineReason});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[18]).Args;
                }
                Tracker.FireEvent(__eventLocations[75],__eventData[11],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[76],__eventData[12],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                RequestTerminate(__ctx5__,__ctx1__.__Message);
                __seg__.SegmentDone();
                break;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[77],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[78],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                {
                    ETRANOriginateAppDefaultsType __ETRANOriginateAppDefaultsMsg = new ETRANOriginateAppDefaultsType("ETRANOriginateAppDefaultsMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.ETRANOriginate.Create_ETRAN_Originate_App_Defaults), new object[] {__ETRANOriginateAppDefaultsMsg.MessagePart}, new object[] {__ctx1__.__CanonicalMsg.MessagePart});

                    if (__ctx1__.__ETRANOriginateAppDefaultsMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateAppDefaultsMsg);
                    __ctx1__.__ETRANOriginateAppDefaultsMsg = __ETRANOriginateAppDefaultsMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETRANOriginateAppDefaultsMsg);
                }
                __ctx1__.__ETRANOriginateAppDefaultsMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 30;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETRANOriginateAppDefaultsMsg);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    Tracker.FireEvent(__eventLocations[79],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                if ( !PreProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[80],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 32;
            case 32:
                {
                    CanonicalMsgType __TempCanonicalMsg = new CanonicalMsgType("TempCanonicalMsg", __ctx1__);

                    __TempCanonicalMsg.CopyFrom(__ctx1__.__CanonicalMsg);
                    __TempCanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__CanonicalMsg);

                    if (__ctx1__.__TempCanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = __TempCanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__TempCanonicalMsg);
                }
                __ctx1__.__TempCanonicalMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 33;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[81],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                if ( !PreProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[82],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 35;
            case 35:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.ETRANOriginate.Map_ETRAN_Originate_App_Defaults_To_Canonical), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__TempCanonicalMsg.MessagePart, __ctx1__.__ETRANOriginateAppDefaultsMsg.MessagePart});
                    __CanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__TempCanonicalMsg);

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 36;
            case 36:
                if ( !PreProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__ETRANOriginateAppDefaultsMsg);
                    Tracker.FireEvent(__eventLocations[83],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 37;
            case 37:
                if ( !PreProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[84],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 38;
            case 38:
                __condition__ = SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue((System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Borrower.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Borrower.CreditScorSourcCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Borrower.PhysCountryCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.BorrowerRace.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.BorrowerRace.RaceCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Interest.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Interest.BaseRateSourcTypCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Interest.IntrstTypInd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Interest.Phase"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.LoanApplication.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.LoanApplication.InterestStructureCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.LoanApplication.NetEarningsClause"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.LoanApplication.RevolvingInd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Principal.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Principal.Ethn"+
"icCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Principal.ExtrnlCreditScorInd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Principal.GndrCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Principal.GntyInd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.Principal.VetCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.PrincipalRace.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.PrincipalRace.RaceCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.SpecialPurpose.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.UseOfProceeds_Physical.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.UseOfProceeds_Physical.LoanProceedTypCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.UseOfProceeds_Physical.ProceedTypCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.UseOfProceeds_EIDL.action"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.UseOfProceeds_EIDL.LoanProceedTypCd"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("ETRAN_Originate_App_Defaults.UseOfProceeds_EIDL.ProceedTypCd"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 40 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 40;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 39:
                if ( !PostProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 53;
            case 40:
                if ( !PreProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[85],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 41;
            case 41:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 42;
            case 42:
                if ( !PreProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[86],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 43;
            case 43:
                __ctx1__.__Message = System.String.Format("ETran App Defaults did not load or only partially loaded.  Check the map 'Create ETRAN Originate App Defaults' " + "ensure that all fields in the ETRAN Originate App Defaults schema are getting properly defaulted to a value. \r\n\r\n" + "ETRAN Originate App Defaults Msg: \r\n{0} \r\n\r\n" + "Canonical Msg: \r\n{1}", SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__ETRANOriginateAppDefaultsMsg)), SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__CanonicalMsg)));
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 44;
            case 44:
                if ( !PreProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[87],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 45;
            case 45:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 47 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 47;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 46;
            case 46:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 47;
            case 47:
                if ( !PreProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[88],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 48;
            case 48:
                if ( !PreProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[89],__eventData[10],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 49;
            case 49:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce(19, InstanceId, this);
                    _stateMgrs[19] = svc;
                    __ctx5__.StartCall(__seg__, svc, __eventLocations[89],new object[] {__ctx1__.__OrchestrationInstanceId, __ctx1__.__Status, __ctx1__.__Stage, __ctx1__.__ApplicationNumber, __ctx1__.__SalesforceObjectName, __ctx1__.__SalesforceObjectId, __ctx1__.__Message, __ctx1__.__AutoDeclineReason});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 50:
                if ( !PreProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[19]).Args;
                }
                Tracker.FireEvent(__eventLocations[90],__eventData[11],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 51;
            case 51:
                if ( !PreProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[91],__eventData[12],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 52;
            case 52:
                RequestTerminate(__ctx5__,__ctx1__.__Message);
                __seg__.SegmentDone();
                break;
            case 53:
                if ( !PreProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__ETRANOriginateAppDefaultsMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateAppDefaultsMsg);
                    __ctx1__.__ETRANOriginateAppDefaultsMsg = null;
                }
                Tracker.FireEvent(__eventLocations[92],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 54;
            case 54:
                if ( !PreProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[93],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 55;
            case 55:
                {
                    SFMultiQueryRequestMsgType __SFMultiQueryRequestMsg = new SFMultiQueryRequestMsgType("SFMultiQueryRequestMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.Multi.Map_Multi_Query_Request), new object[] {__SFMultiQueryRequestMsg.MessagePart}, new object[] {__ctx1__.__CanonicalMsg.MessagePart});
                    __ctx1__.__SOQL = (System.String)__SFMultiQueryRequestMsg.MessagePart.GetDistinguishedField("q");
                    __ctx1__.__SOQL = __ctx1__.__SOQL.Replace("@ApplicationNumber", System.String.Format("'{0}'", (System.String)__SFMultiQueryRequestMsg.MessagePart.GetDistinguishedField("ApplicationNumber")));
                    __ctx1__.__SOQL = __ctx1__.__SOQL.Replace("@LoanId", System.String.Format("'{0}'", (System.String)__SFMultiQueryRequestMsg.MessagePart.GetDistinguishedField("LoanId")));
                    __SFMultiQueryRequestMsg.MessagePart.SetDistinguishedField("q", __ctx1__.__SOQL);

                    if (__ctx1__.__SFMultiQueryRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__SFMultiQueryRequestMsg);
                    __ctx1__.__SFMultiQueryRequestMsg = __SFMultiQueryRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__SFMultiQueryRequestMsg);
                }
                __ctx1__.__SFMultiQueryRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 56;
            case 56:
                if ( !PreProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__SFMultiQueryRequestMsg);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    Tracker.FireEvent(__eventLocations[94],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 57;
            case 57:
                if ( !PreProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[95],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 58;
            case 58:
                {
                    CanonicalMsgType __TempCanonicalMsg = new CanonicalMsgType("TempCanonicalMsg", __ctx1__);

                    __TempCanonicalMsg.CopyFrom(__ctx1__.__CanonicalMsg);
                    __TempCanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__CanonicalMsg);

                    if (__ctx1__.__TempCanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = __TempCanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__TempCanonicalMsg);
                }
                __ctx1__.__TempCanonicalMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 59;
            case 59:
                if ( !PreProgressInc( __seg__, __ctx__, 60 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[96],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 60;
            case 60:
                if ( !PreProgressInc( __seg__, __ctx__, 61 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[97],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 61;
            case 61:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.Multi.Map_Multi_Request_To_Canonical), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__TempCanonicalMsg.MessagePart, __ctx1__.__SFMultiQueryRequestMsg.MessagePart});

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 62 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 62;
            case 62:
                if ( !PreProgressInc( __seg__, __ctx__, 63 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__SFMultiQueryRequestMsg);
                    Tracker.FireEvent(__eventLocations[98],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__SFMultiQueryRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFMultiQueryRequestMsg);
                    __ctx1__.__SFMultiQueryRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 63;
            case 63:
                if ( !PreProgressInc( __seg__, __ctx__, 64 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[99],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 64;
            case 64:
                {
                    SBA.BizTalk.Shared.Salesforce.RestApi.Logic.QueryResultMsgType __SFRestQueryResultMsg = new SBA.BizTalk.Shared.Salesforce.RestApi.Logic.QueryResultMsgType("SFRestQueryResultMsg", __ctx1__);

                    __ctx1__.__TempXmlDoc.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__TempXmlDoc.UnderlyingXmlDocument.LoadXml("<QueryResult xmlns=\"http://SBA.gov/BizTalk/Shared/Salesforce/RestApi/Definition/Query/\" />");
                    __SFRestQueryResultMsg.MessagePart.LoadFrom(null);
                    __SFRestQueryResultMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempXmlDoc.UnderlyingXmlDocument);

                    if (__ctx1__.__SFRestQueryResultMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__SFRestQueryResultMsg);
                    __ctx1__.__SFRestQueryResultMsg = __SFRestQueryResultMsg;
                    __ctx1__.RefMessage(__ctx1__.__SFRestQueryResultMsg);
                }
                __ctx1__.__SFRestQueryResultMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 65 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 65;
            case 65:
                if ( !PreProgressInc( __seg__, __ctx__, 66 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__SFRestQueryResultMsg);
                    Tracker.FireEvent(__eventLocations[100],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 66;
            case 66:
                if ( !PreProgressInc( __seg__, __ctx__, 67 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[101],__eventData[7],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 67;
            case 67:
                __ctx7__ = new ____scope54_7(this);
                _stateMgrs[7] = __ctx7__;
                if ( !PostProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 68;
            case 68:
                __ctx5__.StartContext(__seg__, __ctx7__);
                if ( !PostProgressInc( __seg__, __ctx__, 69 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 69:
                if ( !PreProgressInc( __seg__, __ctx__, 70 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[111],__eventData[14],_stateMgrs[5].TrackDataStream );
                __ctx7__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 70;
            case 70:
                if ( !PreProgressInc( __seg__, __ctx__, 71 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[112],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 71;
            case 71:
                __condition__ = System.String.IsNullOrEmpty(__ctx1__.__Message) && __ctx1__.__Status != "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 82 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 82;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 72;
            case 72:
                if ( !PreProgressInc( __seg__, __ctx__, 73 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[113],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 73;
            case 73:
                {
                    SFMultiQueryResultMsgType __SFMultiQueryResultMsg = new SFMultiQueryResultMsgType("SFMultiQueryResultMsg", __ctx1__);

                    __ctx1__.__TempXmlDoc.UnderlyingXmlDocument = SBA.BizTalk.Shared.Salesforce.RestApi.Component.NamespaceFixer.Instance.FixNamespace(__ctx1__.__SFRestQueryResultMsg.MessagePart.TypedValue, "http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/");
                    __SFMultiQueryResultMsg.MessagePart.LoadFrom(null);
                    __SFMultiQueryResultMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempXmlDoc.UnderlyingXmlDocument);
                    __SFMultiQueryResultMsg.CopyContextPropertiesFrom(__ctx1__.__SFRestQueryResultMsg);

                    if (__ctx1__.__SFMultiQueryResultMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__SFMultiQueryResultMsg);
                    __ctx1__.__SFMultiQueryResultMsg = __SFMultiQueryResultMsg;
                    __ctx1__.RefMessage(__ctx1__.__SFMultiQueryResultMsg);
                }
                __ctx1__.__SFMultiQueryResultMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 74 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 74;
            case 74:
                if ( !PreProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__SFMultiQueryResultMsg);
                    Tracker.FireEvent(__eventLocations[114],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 75;
            case 75:
                if ( !PreProgressInc( __seg__, __ctx__, 76 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[115],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 76;
            case 76:
                {
                    CanonicalMsgType __TempCanonicalMsg = new CanonicalMsgType("TempCanonicalMsg", __ctx1__);

                    __TempCanonicalMsg.CopyFrom(__ctx1__.__CanonicalMsg);
                    __TempCanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__CanonicalMsg);

                    if (__ctx1__.__TempCanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = __TempCanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__TempCanonicalMsg);
                }
                __ctx1__.__TempCanonicalMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 77 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 77;
            case 77:
                if ( !PreProgressInc( __seg__, __ctx__, 78 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[116],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 78;
            case 78:
                if ( !PreProgressInc( __seg__, __ctx__, 79 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[117],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 79;
            case 79:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.Multi.Map_Multi_Result_To_Canonical), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__TempCanonicalMsg.MessagePart, __ctx1__.__SFMultiQueryResultMsg.MessagePart});

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 80 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 80;
            case 80:
                if ( !PreProgressInc( __seg__, __ctx__, 81 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__SFMultiQueryResultMsg);
                    Tracker.FireEvent(__eventLocations[118],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__SFMultiQueryResultMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFMultiQueryResultMsg);
                    __ctx1__.__SFMultiQueryResultMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 81;
            case 81:
                if ( !PostProgressInc( __seg__, __ctx__, 91 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 91;
            case 82:
                if ( !PreProgressInc( __seg__, __ctx__, 83 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[119],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 83;
            case 83:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 85 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 85;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 84 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 84;
            case 84:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 85 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 85;
            case 85:
                if ( !PreProgressInc( __seg__, __ctx__, 86 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[120],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 86;
            case 86:
                if ( !PreProgressInc( __seg__, __ctx__, 87 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[121],__eventData[10],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 87;
            case 87:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce(21, InstanceId, this);
                    _stateMgrs[21] = svc;
                    __ctx5__.StartCall(__seg__, svc, __eventLocations[121],new object[] {__ctx1__.__OrchestrationInstanceId, __ctx1__.__Status, __ctx1__.__Stage, __ctx1__.__ApplicationNumber, __ctx1__.__SalesforceObjectName, __ctx1__.__SalesforceObjectId, __ctx1__.__Message, __ctx1__.__AutoDeclineReason});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 88 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 88:
                if ( !PreProgressInc( __seg__, __ctx__, 89 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[21]).Args;
                }
                Tracker.FireEvent(__eventLocations[122],__eventData[11],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 89;
            case 89:
                if ( !PreProgressInc( __seg__, __ctx__, 90 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[123],__eventData[12],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 90;
            case 90:
                RequestTerminate(__ctx5__,__ctx1__.__Message);
                __seg__.SegmentDone();
                break;
            case 91:
                if ( !PreProgressInc( __seg__, __ctx__, 92 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__SFRestQueryResultMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFRestQueryResultMsg);
                    __ctx1__.__SFRestQueryResultMsg = null;
                }
                Tracker.FireEvent(__eventLocations[124],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 92;
            case 92:
                if ( !PreProgressInc( __seg__, __ctx__, 93 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[125],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 93;
            case 93:
                __condition__ = SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue((System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Id"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.RecordType.Name"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Name"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 101 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 101;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 94 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 94;
            case 94:
                if ( !PreProgressInc( __seg__, __ctx__, 95 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[126],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 95;
            case 95:
                __condition__ = !System.String.IsNullOrWhiteSpace((System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.FEMA_Registration_Number__c"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 98 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 98;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 96 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 96;
            case 96:
                __ctx1__.__FEMARegistrationNumber = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.FEMA_Registration_Number__c");
                if ( !PostProgressInc( __seg__, __ctx__, 97 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 97;
            case 97:
                if ( !PostProgressInc( __seg__, __ctx__, 99 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 99;
            case 98:
                __ctx1__.__FEMARegistrationNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 99 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 99;
            case 99:
                if ( !PreProgressInc( __seg__, __ctx__, 100 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[127],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 100;
            case 100:
                if ( !PostProgressInc( __seg__, __ctx__, 105 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 105;
            case 101:
                if ( !PreProgressInc( __seg__, __ctx__, 102 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[128],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 102;
            case 102:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 103 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 103;
            case 103:
                if ( !PreProgressInc( __seg__, __ctx__, 104 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[129],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 104;
            case 104:
                __ctx1__.__Message = System.String.Format("Salesforce Application not found or missing critical information. Fields checked were: \r\n\r\n" + "Application__c.Id \r\n" + "Application__c.RecordType.Name \r\n" + "Application__c.Name \r\n\r\n" + "One or more of these fields were found to be blank after attempting to retrieve the application from Salesforce. \r\n\r\n" + "SOQL: \r\n{0} \r\n\r\n", __ctx1__.__SOQL);
                if ( !PostProgressInc( __seg__, __ctx__, 105 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 105;
            case 105:
                if ( !PreProgressInc( __seg__, __ctx__, 106 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[130],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 106;
            case 106:
                if ( !PreProgressInc( __seg__, __ctx__, 107 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[131],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 107;
            case 107:
                __condition__ = System.String.IsNullOrWhiteSpace(__ctx1__.__Message) && __ctx1__.__Status != "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 121 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 121;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 108 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 108;
            case 108:
                if ( !PreProgressInc( __seg__, __ctx__, 109 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[132],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 109;
            case 109:
                __ctx1__.__XpathStmtBase = "string(/*[local-name()='Canonical' and namespace-uri()='http://SBA.gov/ETRANObligation/Canonical/']/*[local-name()='Multi' and namespace-uri()='http://SBA.gov/ETRANObligation/Canonical/']/*[local-name()='QueryResult' and namespace-uri()='http://SBA.gov/ETRANObligation/Canonical/']/*[local-name()='records' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/']/*[local-name()='Property__r' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/']/*[local-name()='records' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/']/*[local-name()='{0}' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/'])";
                if ( !PostProgressInc( __seg__, __ctx__, 110 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 110;
            case 110:
                if ( !PreProgressInc( __seg__, __ctx__, 111 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[133],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 111;
            case 111:
                __ctx1__.__XpathStmt = System.String.Format(__ctx1__.__XpathStmtBase, "Id");
                if ( !PostProgressInc( __seg__, __ctx__, 112 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 112;
            case 112:
                __ctx1__.__PropertyId = System.Convert.ToString(Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__CanonicalMsg.MessagePart, __ctx1__.__XpathStmt, typeof(System.Object)));
                if ( !PostProgressInc( __seg__, __ctx__, 113 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 113;
            case 113:
                if ( !PreProgressInc( __seg__, __ctx__, 114 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[134],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 114;
            case 114:
                __condition__ = SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue(__ctx1__.__PropertyId);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 116 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 116;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 115 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 115;
            case 115:
                if ( !PostProgressInc( __seg__, __ctx__, 120 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 120;
            case 116:
                if ( !PreProgressInc( __seg__, __ctx__, 117 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[135],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 117;
            case 117:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 118 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 118;
            case 118:
                if ( !PreProgressInc( __seg__, __ctx__, 119 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[136],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 119;
            case 119:
                __ctx1__.__Message = System.String.Format("The Application in Salesforce is missing a related Property record. \r\n\r\n" + "SOQL: \r\n{0} \r\n\r\n", __ctx1__.__SOQL);
                if ( !PostProgressInc( __seg__, __ctx__, 120 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 120;
            case 120:
                if ( !PreProgressInc( __seg__, __ctx__, 121 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[137],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 121;
            case 121:
                if ( !PreProgressInc( __seg__, __ctx__, 122 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[138],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 122;
            case 122:
                if ( !PreProgressInc( __seg__, __ctx__, 123 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[139],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 123;
            case 123:
                __condition__ = System.String.IsNullOrWhiteSpace(__ctx1__.__Message) && __ctx1__.__Status != "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 137 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 137;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 124 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 124;
            case 124:
                if ( !PreProgressInc( __seg__, __ctx__, 125 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[140],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 125;
            case 125:
                __ctx1__.__XpathStmtBase = "/*[local-name()='Canonical' and namespace-uri()='http://SBA.gov/ETRANObligation/Canonical/']/*[local-name()='Multi' and namespace-uri()='http://SBA.gov/ETRANObligation/Canonical/']/*[local-name()='QueryResult' and namespace-uri()='http://SBA.gov/ETRANObligation/Canonical/']/*[local-name()='records' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/']/*[local-name()='Applicants__r' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/']/*[local-name()='records' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/']/*[local-name()='{0}' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Salesforce/Multi/Query/']";
                if ( !PostProgressInc( __seg__, __ctx__, 126 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 126;
            case 126:
                if ( !PreProgressInc( __seg__, __ctx__, 127 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[141],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 127;
            case 127:
                __ctx1__.__XpathStmt = System.String.Format("count(" + __ctx1__.__XpathStmtBase + ")", "Id");
                if ( !PostProgressInc( __seg__, __ctx__, 128 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 128;
            case 128:
                __ctx1__.__ApplicantCount = System.Convert.ToInt32(Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__CanonicalMsg.MessagePart, __ctx1__.__XpathStmt, typeof(System.Object)));
                if ( !PostProgressInc( __seg__, __ctx__, 129 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 129;
            case 129:
                if ( !PreProgressInc( __seg__, __ctx__, 130 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[142],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 130;
            case 130:
                __condition__ = __ctx1__.__ApplicantCount > 0;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 132 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 132;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 131 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 131;
            case 131:
                if ( !PostProgressInc( __seg__, __ctx__, 136 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 136;
            case 132:
                if ( !PreProgressInc( __seg__, __ctx__, 133 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[143],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 133;
            case 133:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 134 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 134;
            case 134:
                if ( !PreProgressInc( __seg__, __ctx__, 135 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[144],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 135;
            case 135:
                __ctx1__.__Message = System.String.Format("Salesforce Applicant(s) not found. \r\n\r\n" + "SOQL: \r\n{0} \r\n\r\n", __ctx1__.__SOQL);
                if ( !PostProgressInc( __seg__, __ctx__, 136 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 136;
            case 136:
                if ( !PreProgressInc( __seg__, __ctx__, 137 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[145],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 137;
            case 137:
                if ( !PreProgressInc( __seg__, __ctx__, 138 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[146],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 138;
            case 138:
                if ( !PreProgressInc( __seg__, __ctx__, 139 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[147],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 139;
            case 139:
                __condition__ = System.String.IsNullOrWhiteSpace(__ctx1__.__Message) && __ctx1__.__Status != "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 148 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 148;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 140 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 140;
            case 140:
                if ( !PreProgressInc( __seg__, __ctx__, 141 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[148],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 141;
            case 141:
                __condition__ = SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue((System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Loans__r.records.Id"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Loans__r.records.Interest_Rate__c"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Loans__r.records.Loan_Amount__c"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Loans__r.records.Payment_Amount__c"), (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Loans__r.records.Total_Term__c"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 143 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 143;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 142 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 142;
            case 142:
                if ( !PostProgressInc( __seg__, __ctx__, 147 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 147;
            case 143:
                if ( !PreProgressInc( __seg__, __ctx__, 144 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[149],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 144;
            case 144:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 145 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 145;
            case 145:
                if ( !PreProgressInc( __seg__, __ctx__, 146 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[150],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 146;
            case 146:
                __ctx1__.__Message = System.String.Format("Salesforce Loan not found or missing critical information. Fields checked were: \r\n\r\n" + "Loan__c.Id, \r\n" + "Loan__c.Interest_Rate__c, \r\n" + "Loan__c.Loan_Amount__c, \r\n" + "Loan__c.Payment_Amount__c, \r\n" + "Loan__c.Total_Term__c \r\n\r\n" + "One or more of these fields were found to be blank after attempting to retrieve the loan from Salesforce. \r\n\r\n" + "SOQL: \r\n{0} \r\n\r\n", __ctx1__.__SOQL);
                if ( !PostProgressInc( __seg__, __ctx__, 147 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 147;
            case 147:
                if ( !PreProgressInc( __seg__, __ctx__, 148 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[151],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 148;
            case 148:
                if ( !PreProgressInc( __seg__, __ctx__, 149 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[152],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 149;
            case 149:
                if ( !PreProgressInc( __seg__, __ctx__, 150 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[153],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 150;
            case 150:
                __condition__ = System.String.IsNullOrWhiteSpace(__ctx1__.__Message) && __ctx1__.__Status != "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 168 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 168;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 151 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 151;
            case 151:
                if ( !PreProgressInc( __seg__, __ctx__, 152 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[154],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 152;
            case 152:
                __condition__ = SBA.BizTalk.Shared.MessageHelper.Validation.StringVerify.Instance.AllHaveValue((System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Loans__r.records.Disaster_Declaration__c"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 164 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 164;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 153 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 153;
            case 153:
                if ( !PreProgressInc( __seg__, __ctx__, 154 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[155],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 154;
            case 154:
                __condition__ = !System.String.IsNullOrWhiteSpace((System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Loans__r.records.Disaster_Declaration__r.Name"));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 159 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 159;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 155 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 155;
            case 155:
                if ( !PreProgressInc( __seg__, __ctx__, 156 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[156],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 156;
            case 156:
                __ctx1__.__DisasterNumber = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Multi.QueryResult.records.Loans__r.records.Disaster_Declaration__r.Name");
                if ( !PostProgressInc( __seg__, __ctx__, 157 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 157;
            case 157:
                if ( !PreProgressInc( __seg__, __ctx__, 158 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[157],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 158;
            case 158:
                if ( !PostProgressInc( __seg__, __ctx__, 162 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 162;
            case 159:
                if ( !PreProgressInc( __seg__, __ctx__, 160 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[158],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 160;
            case 160:
                __ctx1__.__DisasterNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 161 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 161;
            case 161:
                Tracker.FireEvent(__eventLocations[159],__eventData[3],_stateMgrs[5].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 162 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 162;
            case 162:
                if ( !PreProgressInc( __seg__, __ctx__, 163 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[160],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 163;
            case 163:
                if ( !PostProgressInc( __seg__, __ctx__, 167 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 167;
            case 164:
                if ( !PreProgressInc( __seg__, __ctx__, 165 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[161],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 165;
            case 165:
                __ctx1__.__DisasterNumber = System.String.Empty;
                if ( !PostProgressInc( __seg__, __ctx__, 166 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 166;
            case 166:
                Tracker.FireEvent(__eventLocations[162],__eventData[3],_stateMgrs[5].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 167 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 167;
            case 167:
                if ( !PreProgressInc( __seg__, __ctx__, 168 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[163],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 168;
            case 168:
                if ( !PreProgressInc( __seg__, __ctx__, 169 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[164],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 169;
            case 169:
                if ( !PreProgressInc( __seg__, __ctx__, 170 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[165],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 170;
            case 170:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__Message) || __ctx1__.__Status == "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 180 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 180;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 171 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 171;
            case 171:
                if ( !PreProgressInc( __seg__, __ctx__, 172 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[166],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 172;
            case 172:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 174 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 174;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 173 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 173;
            case 173:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 174 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 174;
            case 174:
                if ( !PreProgressInc( __seg__, __ctx__, 175 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[167],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 175;
            case 175:
                if ( !PreProgressInc( __seg__, __ctx__, 176 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[168],__eventData[10],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 176;
            case 176:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce(22, InstanceId, this);
                    _stateMgrs[22] = svc;
                    __ctx5__.StartCall(__seg__, svc, __eventLocations[168],new object[] {__ctx1__.__OrchestrationInstanceId, __ctx1__.__Status, __ctx1__.__Stage, __ctx1__.__ApplicationNumber, __ctx1__.__SalesforceObjectName, __ctx1__.__SalesforceObjectId, __ctx1__.__Message, __ctx1__.__AutoDeclineReason});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 177 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 177:
                if ( !PreProgressInc( __seg__, __ctx__, 178 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[22]).Args;
                }
                Tracker.FireEvent(__eventLocations[169],__eventData[11],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 178;
            case 178:
                if ( !PreProgressInc( __seg__, __ctx__, 179 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[170],__eventData[12],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 179;
            case 179:
                RequestTerminate(__ctx5__,__ctx1__.__Message);
                __seg__.SegmentDone();
                break;
            case 180:
                if ( !PreProgressInc( __seg__, __ctx__, 181 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[171],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 181;
            case 181:
                if ( !PreProgressInc( __seg__, __ctx__, 182 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[172],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 182;
            case 182:
                {
                    CanonicalMsgType __TempCanonicalMsg = new CanonicalMsgType("TempCanonicalMsg", __ctx1__);

                    __TempCanonicalMsg.CopyFrom(__ctx1__.__CanonicalMsg);
                    __TempCanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__CanonicalMsg);

                    if (__ctx1__.__TempCanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = __TempCanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__TempCanonicalMsg);
                }
                __ctx1__.__TempCanonicalMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 183 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 183;
            case 183:
                if ( !PreProgressInc( __seg__, __ctx__, 184 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[173],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 184;
            case 184:
                if ( !PreProgressInc( __seg__, __ctx__, 185 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[174],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 185;
            case 185:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.BusinessType.Map_Borrower_Business_Types_Initial), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__TempCanonicalMsg.MessagePart});

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 186 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 186;
            case 186:
                if ( !PreProgressInc( __seg__, __ctx__, 187 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[175],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 187;
            case 187:
                if ( !PreProgressInc( __seg__, __ctx__, 188 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[176],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 188;
            case 188:
                __ctx1__.__XpathStmt = "/*[local-name()='Canonical' and namespace-uri()='http://SBA.gov/ETRANObligation/Canonical/']/*[local-name()='BorrowerBusinessTypes' and namespace-uri()='http://SBA.gov/ETRANObligation/Canonical/']/*[local-name()='BorrowerBusinessType' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Borrower/BorrowerBusinessTypes/']/*[local-name()='LegalOrgTypeMapping' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Rules/LegalOrgTypeMapping/']/*[local-name()='SalesforceBusinessType' and namespace-uri()='http://SBA.gov/ETRANObligation/Definition/Rules/LegalOrgTypeMapping/']";
                if ( !PostProgressInc( __seg__, __ctx__, 189 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 189;
            case 189:
                if ( !PreProgressInc( __seg__, __ctx__, 190 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[177],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 190;
            case 190:
                __ctx1__.__SFBusTypesListAll = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageValueList(CreateMessageWrapperForUserCode(__ctx1__.__CanonicalMsg), __ctx1__.__XpathStmt);
                if ( !PostProgressInc( __seg__, __ctx__, 191 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 191;
            case 191:
                __ctx1__.__SFBusTypesDict = new SBA.BizTalk.Shared.MessageHelper.CustomTypes.StringDictionary();
                if ( !PostProgressInc( __seg__, __ctx__, 192 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 192;
            case 192:
                if ( !PreProgressInc( __seg__, __ctx__, 193 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[178],__eventData[15],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 193;
            case 193:
                __condition__ = __ctx1__.__SFBusTypesListAllIndex < __ctx1__.__SFBusTypesListAll.Length;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 226 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 226;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 194 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 194;
            case 194:
                if ( !PreProgressInc( __seg__, __ctx__, 195 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[178],__eventData[16],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 195;
            case 195:
                if ( !PreProgressInc( __seg__, __ctx__, 196 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[179],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 196;
            case 196:
                __ctx1__.__SFBusTypeCurrent = __ctx1__.__SFBusTypesListAll[__ctx1__.__SFBusTypesListAllIndex];
                if ( !PostProgressInc( __seg__, __ctx__, 197 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 197;
            case 197:
                if ( !PreProgressInc( __seg__, __ctx__, 198 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[180],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 198;
            case 198:
                if ( !PreProgressInc( __seg__, __ctx__, 199 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[181],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 199;
            case 199:
                __condition__ = __ctx1__.__SFBusTypesDict.Contains(__ctx1__.__SFBusTypeCurrent);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 201 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 201;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 200 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 200;
            case 200:
                if ( !PostProgressInc( __seg__, __ctx__, 220 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 220;
            case 201:
                if ( !PreProgressInc( __seg__, __ctx__, 202 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[182],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 202;
            case 202:
                __ctx1__.__SFBusTypesDict.Add(__ctx1__.__SFBusTypeCurrent, null);
                if ( !PostProgressInc( __seg__, __ctx__, 203 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 203;
            case 203:
                if ( !PreProgressInc( __seg__, __ctx__, 204 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[183],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 204;
            case 204:
                if ( !PreProgressInc( __seg__, __ctx__, 205 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[184],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 205;
            case 205:
                {
                    LegalOrgTypeMsgType __LegalOrgTypeMsg = new LegalOrgTypeMsgType("LegalOrgTypeMsg", __ctx1__);

                    __ctx1__.__TmpXmlDoc.UnderlyingXmlDocument = SBA.BizTalk.Shared.MessageHelper.Embedded.EmbeddedMessageLoader.Instance.GetXmlDocument("SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping.xml", "SBA.ETRANObligation.Definition.Rules, Version=2.0.0.0, Culture=neutral, PublicKeyToken=18227d56be4ceab0");
                    __LegalOrgTypeMsg.MessagePart.LoadFrom(null);
                    __LegalOrgTypeMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TmpXmlDoc.UnderlyingXmlDocument);
                    __LegalOrgTypeMsg.MessagePart.SetDistinguishedField("SalesforceBusinessType", __ctx1__.__SFBusTypeCurrent);

                    if (__ctx1__.__LegalOrgTypeMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__LegalOrgTypeMsg);
                    __ctx1__.__LegalOrgTypeMsg = __LegalOrgTypeMsg;
                    __ctx1__.RefMessage(__ctx1__.__LegalOrgTypeMsg);
                }
                __ctx1__.__LegalOrgTypeMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 206 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 206;
            case 206:
                if ( !PreProgressInc( __seg__, __ctx__, 207 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__LegalOrgTypeMsg);
                    Tracker.FireEvent(__eventLocations[185],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 207;
            case 207:
                if ( !PreProgressInc( __seg__, __ctx__, 208 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[186],__eventData[7],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 208;
            case 208:
                __ctx8__ = new ____scope55_8(this);
                _stateMgrs[8] = __ctx8__;
                if ( !PostProgressInc( __seg__, __ctx__, 209 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 209;
            case 209:
                __ctx5__.StartContext(__seg__, __ctx8__);
                if ( !PostProgressInc( __seg__, __ctx__, 210 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 210:
                if ( !PreProgressInc( __seg__, __ctx__, 211 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[189],__eventData[14],_stateMgrs[5].TrackDataStream );
                __ctx8__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 211;
            case 211:
                if ( !PreProgressInc( __seg__, __ctx__, 212 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[190],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 212;
            case 212:
                __ctx1__.__SFBusTypesDict.AddOrUpdate(__ctx1__.__SFBusTypeCurrent, (System.Decimal)__ctx1__.__LegalOrgTypeMsg.MessagePart.GetDistinguishedField("ETranLegalOrgTypeCode"));
                if ( !PostProgressInc( __seg__, __ctx__, 213 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 213;
            case 213:
                if ( !PreProgressInc( __seg__, __ctx__, 214 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[191],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 214;
            case 214:
                if ( !PreProgressInc( __seg__, __ctx__, 215 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[192],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 215;
            case 215:
                {
                    CanonicalMsgType __TempCanonicalMsg = new CanonicalMsgType("TempCanonicalMsg", __ctx1__);

                    __TempCanonicalMsg.CopyFrom(__ctx1__.__CanonicalMsg);
                    __TempCanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__CanonicalMsg);

                    if (__ctx1__.__TempCanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = __TempCanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__TempCanonicalMsg);
                }
                __ctx1__.__TempCanonicalMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 216 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 216;
            case 216:
                if ( !PreProgressInc( __seg__, __ctx__, 217 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[193],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 217;
            case 217:
                if ( !PreProgressInc( __seg__, __ctx__, 218 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[194],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 218;
            case 218:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.BusinessType.Map_Business_Type_To_Canonical), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__TempCanonicalMsg.MessagePart, __ctx1__.__LegalOrgTypeMsg.MessagePart});

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 219 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 219;
            case 219:
                if ( !PreProgressInc( __seg__, __ctx__, 220 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__LegalOrgTypeMsg);
                    Tracker.FireEvent(__eventLocations[195],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__LegalOrgTypeMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__LegalOrgTypeMsg);
                    __ctx1__.__LegalOrgTypeMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 220;
            case 220:
                if ( !PreProgressInc( __seg__, __ctx__, 221 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[196],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 221;
            case 221:
                if ( !PreProgressInc( __seg__, __ctx__, 222 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[197],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 222;
            case 222:
                __ctx1__.__SFBusTypesListAllIndex = __ctx1__.__SFBusTypesListAllIndex + 1;
                if ( !PostProgressInc( __seg__, __ctx__, 223 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 223;
            case 223:
                if ( !PreProgressInc( __seg__, __ctx__, 224 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[198],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 224;
            case 224:
                if ( !PreProgressInc( __seg__, __ctx__, 225 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[199],__eventData[17],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 225;
            case 225:
                if ( !PostProgressInc( __seg__, __ctx__, 193 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 193;
            case 226:
                if ( !PreProgressInc( __seg__, __ctx__, 227 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[199],__eventData[18],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 227;
            case 227:
                if ( !PreProgressInc( __seg__, __ctx__, 228 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[200],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 228;
            case 228:
                {
                    ETRANOriginateAppType __ETRANOriginateAppMsg = new ETRANOriginateAppType("ETRANOriginateAppMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.ETRANOriginate.MapETRANOriginateApp), new object[] {__ETRANOriginateAppMsg.MessagePart}, new object[] {__ctx1__.__CanonicalMsg.MessagePart});

                    if (__ctx1__.__ETRANOriginateAppMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateAppMsg);
                    __ctx1__.__ETRANOriginateAppMsg = __ETRANOriginateAppMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETRANOriginateAppMsg);
                }
                __ctx1__.__ETRANOriginateAppMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 229 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 229;
            case 229:
                if ( !PreProgressInc( __seg__, __ctx__, 230 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETRANOriginateAppMsg);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    Tracker.FireEvent(__eventLocations[201],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 230;
            case 230:
                if ( !PreProgressInc( __seg__, __ctx__, 231 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[202],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 231;
            case 231:
                __ctx1__.__ETranRequestXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__ETRANOriginateAppMsg));
                if ( !PostProgressInc( __seg__, __ctx__, 232 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 232;
            case 232:
                if ( !PreProgressInc( __seg__, __ctx__, 233 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[203],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 233;
            case 233:
                if ( !PreProgressInc( __seg__, __ctx__, 234 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[204],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 234;
            case 234:
                __condition__ = (System.Boolean)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("EnableBTAuditPayloadLog");
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 250 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 250;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 235 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 235;
            case 235:
                if ( !PreProgressInc( __seg__, __ctx__, 236 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[205],__eventData[7],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 236;
            case 236:
                __ctx9__ = new ____scope56_9(this);
                _stateMgrs[9] = __ctx9__;
                if ( !PostProgressInc( __seg__, __ctx__, 237 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 237;
            case 237:
                __ctx5__.StartContext(__seg__, __ctx9__);
                if ( !PostProgressInc( __seg__, __ctx__, 238 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 238:
                if ( !PreProgressInc( __seg__, __ctx__, 239 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[219],__eventData[14],_stateMgrs[5].TrackDataStream );
                __ctx9__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 239;
            case 239:
                if ( !PreProgressInc( __seg__, __ctx__, 240 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[220],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 240;
            case 240:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__BTAuditMessage) || __ctx1__.__BTAuditStatus == "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 249 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 249;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 241 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 241;
            case 241:
                if ( !PreProgressInc( __seg__, __ctx__, 242 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[221],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 242;
            case 242:
                __ctx1__.__BTAuditMessage = System.String.Format("ETran Obligation was unable to log initial BT Audit create due to exception. \r\n" + "This will not prevent further ETran Obligation processing... \r\n\r\n{0}", __ctx1__.__BTAuditMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 243 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 243;
            case 243:
                if ( !PreProgressInc( __seg__, __ctx__, 244 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[222],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 244;
            case 244:
                if ( !PreProgressInc( __seg__, __ctx__, 245 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[59],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 245;
            case 245:
                __condition__ = __ctx1__.__BTAuditMessage.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 247 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 247;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 246 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 246;
            case 246:
                __ctx1__.__BTAuditMessage = __ctx1__.__BTAuditMessage.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 247 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 247;
            case 247:
                if ( !PreProgressInc( __seg__, __ctx__, 248 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[62],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 248;
            case 248:
                System.Diagnostics.EventLog.WriteEntry("BizTalk: ETran Obligation", __ctx1__.__BTAuditMessage, System.Diagnostics.EventLogEntryType.Warning);
                if ( !PostProgressInc( __seg__, __ctx__, 249 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 249;
            case 249:
                if ( !PreProgressInc( __seg__, __ctx__, 250 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[223],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 250;
            case 250:
                if ( !PreProgressInc( __seg__, __ctx__, 251 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[224],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 251;
            case 251:
                if ( !PreProgressInc( __seg__, __ctx__, 252 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[225],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 252;
            case 252:
                {
                    ETRANOriginateRequestType __ETRANOriginateRequestMsg = new ETRANOriginateRequestType("ETRANOriginateRequestMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.ETRANOriginate.Map_ETRAN_Originate_Request), new object[] {__ETRANOriginateRequestMsg.MessagePart}, new object[] {__ctx1__.__ETRANOriginateAppMsg.MessagePart, __ctx1__.__ETranCredentials.MessagePart});
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.Action), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.Action"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.AffiliateApplicationName), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.AffiliateApplicationName"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.AlgorithmSuite), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.AlgorithmSuite"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.ClientCertificate), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.ClientCertificate"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.CloseTimeout), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.CloseTimeout"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.InboundBodyLocation), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.InboundBodyLocation"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.InboundBodyPathExpression), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.InboundBodyPathExpression"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.InboundNodeEncoding), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.InboundNodeEncoding"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.MaxReceivedMessageSize), System.Convert.ToInt32((System.Decimal)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.MaxReceivedMessageSize")));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.MessageClientCredentialType), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.MessageClientCredentialType"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.MessageEncoding), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.MessageEncoding"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.OpenTimeout), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.OpenTimeout"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.OutboundBodyLocation), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.OutboundBodyLocation"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.OutboundXmlTemplate), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.OutboundXmlTemplate"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.Password), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.Password"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.PropagateFaultMessage), (System.Boolean)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.PropagateFaultMessage"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.ProxyAddress), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.ProxyAddress"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.ProxyToUse), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.ProxyToUse"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.ProxyUserName), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.ProxyUserName"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.SecurityMode), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.SecurityMode"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.SendTimeout), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.SendTimeout"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.ServiceCertificate), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.ServiceCertificate"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.TextEncoding), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.TextEncoding"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.TransportClientCredentialType), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.TransportClientCredentialType"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.UseAcsAuthentication), (System.Boolean)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.UseAcsAuthentication"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.UserName), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.UserName"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.UseSasAuthentication), (System.Boolean)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.UseSasAuthentication"));
                    __ETRANOriginateRequestMsg.SetPropertyValue(typeof(WCF.UseSSO), (System.Boolean)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Message.UseSSO"));
                    ETran_Originate3_Port.SetPropertyValue(typeof(Microsoft.XLANGs.BaseTypes.Address), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Port.Address"));
                    ETran_Originate3_Port.SetPropertyValue(typeof(Microsoft.XLANGs.BaseTypes.TransportType), (System.String)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("Port.TransportType"));

                    if (__ctx1__.__ETRANOriginateRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateRequestMsg);
                    __ctx1__.__ETRANOriginateRequestMsg = __ETRANOriginateRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETRANOriginateRequestMsg);
                }
                __ctx1__.__ETRANOriginateRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 253 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 253;
            case 253:
                if ( !PreProgressInc( __seg__, __ctx__, 254 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETRANOriginateRequestMsg);
                    __edata.Messages.Add(__ctx1__.__ETRANOriginateAppMsg);
                    __edata.Messages.Add(__ctx1__.__ETranCredentials);
                    Tracker.FireEvent(__eventLocations[226],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__ETranCredentials != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETranCredentials);
                    __ctx1__.__ETranCredentials = null;
                }
                if (__ctx1__ != null && __ctx1__.__ETRANOriginateAppMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateAppMsg);
                    __ctx1__.__ETRANOriginateAppMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 254;
            case 254:
                if ( !PreProgressInc( __seg__, __ctx__, 255 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[227],__eventData[7],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 255;
            case 255:
                __ctx10__ = new ____scope57_10(this);
                _stateMgrs[10] = __ctx10__;
                if ( !PostProgressInc( __seg__, __ctx__, 256 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 256;
            case 256:
                __ctx5__.StartContext(__seg__, __ctx10__);
                if ( !PostProgressInc( __seg__, __ctx__, 257 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 257:
                if ( !PreProgressInc( __seg__, __ctx__, 258 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__ETRANOriginateRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANOriginateRequestMsg);
                    __ctx1__.__ETRANOriginateRequestMsg = null;
                }
                Tracker.FireEvent(__eventLocations[272],__eventData[14],_stateMgrs[5].TrackDataStream );
                __ctx10__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 258;
            case 258:
                if ( !PreProgressInc( __seg__, __ctx__, 259 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[273],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 259;
            case 259:
                __condition__ = (System.Boolean)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("EnableBTAuditPayloadLog") && !System.String.IsNullOrWhiteSpace(__ctx1__.__BTAuditId);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 275 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 275;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 260 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 260;
            case 260:
                if ( !PreProgressInc( __seg__, __ctx__, 261 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[274],__eventData[7],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 261;
            case 261:
                __ctx11__ = new ____scope58_11(this);
                _stateMgrs[11] = __ctx11__;
                if ( !PostProgressInc( __seg__, __ctx__, 262 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 262;
            case 262:
                __ctx5__.StartContext(__seg__, __ctx11__);
                if ( !PostProgressInc( __seg__, __ctx__, 263 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 263:
                if ( !PreProgressInc( __seg__, __ctx__, 264 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[289],__eventData[14],_stateMgrs[5].TrackDataStream );
                __ctx11__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 264;
            case 264:
                if ( !PreProgressInc( __seg__, __ctx__, 265 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[290],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 265;
            case 265:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__BTAuditMessage) || __ctx1__.__BTAuditStatus == "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 274 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 274;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 266 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 266;
            case 266:
                if ( !PreProgressInc( __seg__, __ctx__, 267 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[291],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 267;
            case 267:
                __ctx1__.__BTAuditMessage = System.String.Format("ETran Obligation was unable to log response update to BT Audit due to exception. \r\n" + "This will not prevent further ETran Obligation processing... \r\n\r\n{0}", __ctx1__.__BTAuditMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 268 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 268;
            case 268:
                if ( !PreProgressInc( __seg__, __ctx__, 269 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[292],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 269;
            case 269:
                if ( !PreProgressInc( __seg__, __ctx__, 270 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[59],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 270;
            case 270:
                __condition__ = __ctx1__.__BTAuditMessage.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 272 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 272;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 271 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 271;
            case 271:
                __ctx1__.__BTAuditMessage = __ctx1__.__BTAuditMessage.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 272 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 272;
            case 272:
                if ( !PreProgressInc( __seg__, __ctx__, 273 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[62],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 273;
            case 273:
                System.Diagnostics.EventLog.WriteEntry("BizTalk: ETran Obligation", __ctx1__.__BTAuditMessage, System.Diagnostics.EventLogEntryType.Warning);
                if ( !PostProgressInc( __seg__, __ctx__, 274 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 274;
            case 274:
                if ( !PreProgressInc( __seg__, __ctx__, 275 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[293],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 275;
            case 275:
                if ( !PreProgressInc( __seg__, __ctx__, 276 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[294],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 276;
            case 276:
                if ( !PreProgressInc( __seg__, __ctx__, 277 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[295],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 277;
            case 277:
                {
                    CanonicalMsgType __TempCanonicalMsg = new CanonicalMsgType("TempCanonicalMsg", __ctx1__);

                    __TempCanonicalMsg.CopyFrom(__ctx1__.__CanonicalMsg);
                    __TempCanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__CanonicalMsg);

                    if (__ctx1__.__TempCanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = __TempCanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__TempCanonicalMsg);
                }
                __ctx1__.__TempCanonicalMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 278 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 278;
            case 278:
                if ( !PreProgressInc( __seg__, __ctx__, 279 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[296],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 279;
            case 279:
                if ( !PreProgressInc( __seg__, __ctx__, 280 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[297],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 280;
            case 280:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.ETRANOriginate.Map_ETRAN_Originate_Response_to_Canonical), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__TempCanonicalMsg.MessagePart, __ctx1__.__ETRANActualResponseMsg.MessagePart});
                    __CanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__TempCanonicalMsg);

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 281 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 281;
            case 281:
                if ( !PreProgressInc( __seg__, __ctx__, 282 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__ETRANActualResponseMsg);
                    Tracker.FireEvent(__eventLocations[298],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__ETRANActualResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANActualResponseMsg);
                    __ctx1__.__ETRANActualResponseMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 282;
            case 282:
                if ( !PreProgressInc( __seg__, __ctx__, 283 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[299],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 283;
            case 283:
                {
                    CanonicalMsgType __TempCanonicalMsg = new CanonicalMsgType("TempCanonicalMsg", __ctx1__);

                    __TempCanonicalMsg.CopyFrom(__ctx1__.__CanonicalMsg);
                    __TempCanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__CanonicalMsg);

                    if (__ctx1__.__TempCanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = __TempCanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__TempCanonicalMsg);
                }
                __ctx1__.__TempCanonicalMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 284 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 284;
            case 284:
                if ( !PreProgressInc( __seg__, __ctx__, 285 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[300],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 285;
            case 285:
                if ( !PreProgressInc( __seg__, __ctx__, 286 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[301],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 286;
            case 286:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.Event_Request__c.Map_Event_Request_c), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__TempCanonicalMsg.MessagePart});
                    __CanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__TempCanonicalMsg);

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 287 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 287;
            case 287:
                if ( !PreProgressInc( __seg__, __ctx__, 288 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[302],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 288;
            case 288:
                if ( !PreProgressInc( __seg__, __ctx__, 289 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[303],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 289;
            case 289:
                __ctx1__.__Message = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Event_Request__c.Log_Message__c");
                if ( !PostProgressInc( __seg__, __ctx__, 290 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 290;
            case 290:
                if ( !PreProgressInc( __seg__, __ctx__, 291 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[304],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 291;
            case 291:
                __ctx1__.__Status = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Event_Request__c.Status__c");
                if ( !PostProgressInc( __seg__, __ctx__, 292 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 292;
            case 292:
                __ctx1__.__LoanOriginateSuccess = (__ctx1__.__Status == "Success");
                if ( !PostProgressInc( __seg__, __ctx__, 293 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 293;
            case 293:
                if ( !PreProgressInc( __seg__, __ctx__, 294 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[305],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 294;
            case 294:
                __condition__ = __ctx1__.__LoanOriginateSuccess;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 308 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 308;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 295 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 295;
            case 295:
                if ( !PreProgressInc( __seg__, __ctx__, 296 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[306],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 296;
            case 296:
                {
                    SFLoanUpdateRequestType __SFLoanUpdateRequestMsg = new SFLoanUpdateRequestType("SFLoanUpdateRequestMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.Loan__c.Map_Loan__c_Update_Request), new object[] {__SFLoanUpdateRequestMsg.MessagePart}, new object[] {__ctx1__.__CanonicalMsg.MessagePart});

                    if (__ctx1__.__SFLoanUpdateRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__SFLoanUpdateRequestMsg);
                    __ctx1__.__SFLoanUpdateRequestMsg = __SFLoanUpdateRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__SFLoanUpdateRequestMsg);
                }
                __ctx1__.__SFLoanUpdateRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 297 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 297;
            case 297:
                if ( !PreProgressInc( __seg__, __ctx__, 298 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__SFLoanUpdateRequestMsg);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    Tracker.FireEvent(__eventLocations[307],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 298;
            case 298:
                if ( !PreProgressInc( __seg__, __ctx__, 299 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[308],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 299;
            case 299:
                {
                    SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveRequestMsgType __SFRestSaveRequestMsg = new SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveRequestMsgType("SFRestSaveRequestMsg", __ctx1__);

                    __ctx1__.__TempXmlDoc.UnderlyingXmlDocument = SBA.BizTalk.Shared.Salesforce.RestApi.Component.NamespaceFixer.Instance.FixNamespace(__ctx1__.__SFLoanUpdateRequestMsg.MessagePart.TypedValue, "http://SBA.gov/BizTalk/Shared/Salesforce/RestApi/Definition/Save/");
                    __SFRestSaveRequestMsg.MessagePart.LoadFrom(null);
                    __SFRestSaveRequestMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempXmlDoc.UnderlyingXmlDocument);
                    __SFRestSaveRequestMsg.CopyContextPropertiesFrom(__ctx1__.__SFLoanUpdateRequestMsg);

                    if (__ctx1__.__SFRestSaveRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__SFRestSaveRequestMsg);
                    __ctx1__.__SFRestSaveRequestMsg = __SFRestSaveRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__SFRestSaveRequestMsg);
                }
                __ctx1__.__SFRestSaveRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 300 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 300;
            case 300:
                if ( !PreProgressInc( __seg__, __ctx__, 301 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__SFRestSaveRequestMsg);
                    Tracker.FireEvent(__eventLocations[309],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 301;
            case 301:
                if ( !PreProgressInc( __seg__, __ctx__, 302 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[310],__eventData[8],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 302;
            case 302:
                {
                    SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveResultMsgType __SFRestSaveResultMsg = new SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveResultMsgType("SFRestSaveResultMsg", __ctx1__);

                    __ctx1__.__TempXmlDoc.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__TempXmlDoc.UnderlyingXmlDocument.LoadXml("<results xmlns=\"http://SBA.gov/BizTalk/Shared/Salesforce/RestApi/Definition/Save/\" />");
                    __SFRestSaveResultMsg.MessagePart.LoadFrom(null);
                    __SFRestSaveResultMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempXmlDoc.UnderlyingXmlDocument);

                    if (__ctx1__.__SFRestSaveResultMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__SFRestSaveResultMsg);
                    __ctx1__.__SFRestSaveResultMsg = __SFRestSaveResultMsg;
                    __ctx1__.RefMessage(__ctx1__.__SFRestSaveResultMsg);
                }
                __ctx1__.__SFRestSaveResultMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 303 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 303;
            case 303:
                if ( !PreProgressInc( __seg__, __ctx__, 304 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__SFRestSaveResultMsg);
                    Tracker.FireEvent(__eventLocations[311],__edata,_stateMgrs[5].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 304;
            case 304:
                if ( !PreProgressInc( __seg__, __ctx__, 305 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[312],__eventData[7],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 305;
            case 305:
                __ctx12__ = new ____scope59_12(this);
                _stateMgrs[12] = __ctx12__;
                if ( !PostProgressInc( __seg__, __ctx__, 306 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 306;
            case 306:
                __ctx5__.StartContext(__seg__, __ctx12__);
                if ( !PostProgressInc( __seg__, __ctx__, 307 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 307:
                if ( !PreProgressInc( __seg__, __ctx__, 308 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__SFRestSaveResultMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFRestSaveResultMsg);
                    __ctx1__.__SFRestSaveResultMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFRestSaveRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFRestSaveRequestMsg);
                    __ctx1__.__SFRestSaveRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__SFLoanUpdateRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__SFLoanUpdateRequestMsg);
                    __ctx1__.__SFLoanUpdateRequestMsg = null;
                }
                Tracker.FireEvent(__eventLocations[322],__eventData[14],_stateMgrs[5].TrackDataStream );
                __ctx12__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 308;
            case 308:
                if ( !PreProgressInc( __seg__, __ctx__, 309 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[323],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 309;
            case 309:
                if (!__ctx5__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 310 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 310;
            case 310:
                if ( !PreProgressInc( __seg__, __ctx__, 311 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx5__.OnCommit();
                goto case 311;
            case 311:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment8(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[8];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[6];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];
            ____scope53_6 __ctx6__ = (____scope53_6)_stateMgrs[6];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx6__.__policy_4__ = default(Microsoft.RuleEngine.Policy);
                __ctx6__.__policyParam_4_4__ = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx6__.__policyParamAsTXD_4_4__ = default(Microsoft.RuleEngine.TypedXmlDocument);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx6__.__policyParam_4_4__.UnderlyingXmlDocument = __ctx1__.__ETranCredentials.MessagePart.TypedValue;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx6__.__policyParamAsTXD_4_4__ = new Microsoft.RuleEngine.TypedXmlDocument("SBA.ETRAN.Shared.Definition.ETranCredentials", (System.Xml.XmlDocument)__ctx6__.__policyParam_4_4__.UnderlyingXmlDocument);
                if (__ctx6__ != null)
                    __ctx6__.__policyParam_4_4__ = null;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx6__.__policy_4__ = new Microsoft.RuleEngine.Policy("ETran Credentials");
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx6__.__policy_4__.Execute(__ctx6__.__policyParamAsTXD_4_4__);
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[66],__eventData[8],_stateMgrs[6].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                {
                    ETranCredentialsMsgType __ETranCredentials = new ETranCredentialsMsgType("ETranCredentials", __ctx1__);

                    __ETranCredentials.MessagePart.LoadFrom(__ctx6__.__policyParamAsTXD_4_4__.Document);
                    if (__ctx6__ != null)
                        __ctx6__.__policyParamAsTXD_4_4__ = null;

                    if (__ctx1__.__ETranCredentials != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETranCredentials);
                    __ctx1__.__ETranCredentials = __ETranCredentials;
                    __ctx1__.RefMessage(__ctx1__.__ETranCredentials);
                }
                __ctx1__.__ETranCredentials.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETranCredentials);
                    Tracker.FireEvent(__eventLocations[67],__edata,_stateMgrs[6].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx6__.__policy_4__.Dispose();
                if (__ctx6__ != null)
                    __ctx6__.__policy_4__ = null;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if (!__ctx6__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx6__.OnCommit();
                goto case 11;
            case 11:
                __seg__.SegmentDone();
                _segments[7].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment9(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[9];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[7];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope54_7 __ctx7__ = (____scope54_7)_stateMgrs[7];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[103],__eventData[10],_stateMgrs[7].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Query_NoParm(20, InstanceId, this);
                    _stateMgrs[20] = svc;
                    __ctx7__.StartCall(__seg__, svc, __eventLocations[103],new object[] {__ctx1__.__Status, __ctx1__.__Message, new Microsoft.XLANGs.Core.MessageTuple((Microsoft.XLANGs.Core.Context)_stateMgrs[1], null), __ctx1__.__SOQL});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[20]).Args;
                    __ctx1__.__Status = (System.String)args[0];
                    __ctx1__.__Message = (System.String)args[1];
                    __ctx1__.__SFRestQueryResultMsg = (SBA.BizTalk.Shared.Salesforce.RestApi.Logic.QueryResultMsgType)((Microsoft.XLANGs.Core.MessageTuple)(args[2])).message;
                    __ctx1__.__SFRestQueryResultMsg.MessageName = "SFRestQueryResultMsg";
                }
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call);
                    __edata.Messages.Add(__ctx1__.__SFRestQueryResultMsg);
                    Tracker.FireEvent(__eventLocations[104],__edata,_stateMgrs[7].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if (!__ctx7__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx7__.OnCommit();
                goto case 6;
            case 6:
                __seg__.SegmentDone();
                _segments[7].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment10(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[10];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[7];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope54_7 __ctx7__ = (____scope54_7)_stateMgrs[7];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(7);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[105],__eventData[9],_stateMgrs[7].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[106],__eventData[2],_stateMgrs[7].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[107],__eventData[3],_stateMgrs[7].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__Message = System.String.Format("ETran Obligation failed querying information from Salesforce. Exception received... \r\n\r\n" + "SOQL: \r\n{0} \r\n\r\n" + "Exception Info: \r\n{1}", __ctx1__.__SOQL, SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx7__.__exMulti_0));
                if (__ctx7__ != null)
                    __ctx7__.__exMulti_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[110],__eventData[13],_stateMgrs[7].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx7__.__exv__ = null;
                OnEndCatchHandler(7, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment11(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[11];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[8];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope55_8 __ctx8__ = (____scope55_8)_stateMgrs[8];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx8__.__policy_5__ = default(Microsoft.RuleEngine.Policy);
                __ctx8__.__policyParam_5_5__ = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx8__.__policyParamAsTXD_5_5__ = default(Microsoft.RuleEngine.TypedXmlDocument);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx8__.__policyParam_5_5__.UnderlyingXmlDocument = __ctx1__.__LegalOrgTypeMsg.MessagePart.TypedValue;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx8__.__policyParamAsTXD_5_5__ = new Microsoft.RuleEngine.TypedXmlDocument("SBA.ETRANObligation.Definition.Rules.LegalOrgTypeMapping", (System.Xml.XmlDocument)__ctx8__.__policyParam_5_5__.UnderlyingXmlDocument);
                if (__ctx8__ != null)
                    __ctx8__.__policyParam_5_5__ = null;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx8__.__policy_5__ = new Microsoft.RuleEngine.Policy("ETran Obligation Legal Org Type");
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx8__.__policy_5__.Execute(__ctx8__.__policyParamAsTXD_5_5__);
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[187],__eventData[8],_stateMgrs[8].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                {
                    LegalOrgTypeMsgType __LegalOrgTypeMsg = new LegalOrgTypeMsgType("LegalOrgTypeMsg", __ctx1__);

                    __LegalOrgTypeMsg.MessagePart.LoadFrom(__ctx8__.__policyParamAsTXD_5_5__.Document);
                    if (__ctx8__ != null)
                        __ctx8__.__policyParamAsTXD_5_5__ = null;

                    if (__ctx1__.__LegalOrgTypeMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__LegalOrgTypeMsg);
                    __ctx1__.__LegalOrgTypeMsg = __LegalOrgTypeMsg;
                    __ctx1__.RefMessage(__ctx1__.__LegalOrgTypeMsg);
                }
                __ctx1__.__LegalOrgTypeMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__LegalOrgTypeMsg);
                    Tracker.FireEvent(__eventLocations[188],__edata,_stateMgrs[8].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx8__.__policy_5__.Dispose();
                if (__ctx8__ != null)
                    __ctx8__.__policy_5__ = null;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if (!__ctx8__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx8__.OnCommit();
                goto case 11;
            case 11:
                __seg__.SegmentDone();
                _segments[7].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment12(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[12];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[9];
            ____scope56_9 __ctx9__ = (____scope56_9)_stateMgrs[9];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[207],__eventData[2],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                __ctx1__.__ProcessStatusCode = "Processing";
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[208],__eventData[3],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[209],__eventData[10],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___All(23, InstanceId, this);
                    _stateMgrs[23] = svc;
                    __ctx9__.StartCall(__seg__, svc, __eventLocations[209],new object[] {__ctx1__.__BTAuditStatus, __ctx1__.__Stage, __ctx1__.__ETranResponseXml, __ctx1__.__ETranRequestXml, __ctx1__.__ProcessStatusCode, __ctx1__.__BTAuditMessage, __ctx1__.__InterfaceType, __ctx1__.__FEMARegistrationNumber, __ctx1__.__FEMAEventCode, __ctx1__.__DisasterNumber, __ctx1__.__BTAuditId, __ctx1__.__ApplicationNumber});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[23]).Args;
                    __ctx1__.__BTAuditStatus = (System.String)args[0];
                    __ctx1__.__BTAuditMessage = (System.String)args[5];
                    __ctx1__.__BTAuditId = (System.String)args[10];
                }
                Tracker.FireEvent(__eventLocations[210],__eventData[11],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[211],__eventData[2],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx1__.__BTAuditStepCompleted = "Initial Create";
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[212],__eventData[3],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if (!__ctx9__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx9__.OnCommit();
                goto case 12;
            case 12:
                __seg__.SegmentDone();
                _segments[7].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment13(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[13];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[9];
            ____scope56_9 __ctx9__ = (____scope56_9)_stateMgrs[9];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(9);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[213],__eventData[9],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[214],__eventData[2],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__BTAuditStatus = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[215],__eventData[3],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__BTAuditMessage = System.String.Format("BT Audit Initial Create - exception encountered... \r\n\r\n{0}", SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx9__.__exBtAuditInitial_0));
                if (__ctx9__ != null)
                    __ctx9__.__exBtAuditInitial_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[218],__eventData[13],_stateMgrs[9].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx9__.__exv__ = null;
                OnEndCatchHandler(9, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment14(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[14];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[10];
            ____scope57_10 __ctx10__ = (____scope57_10)_stateMgrs[10];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            __ETRANObligationLogic_root_0 __ctx0__ = (__ETRANObligationLogic_root_0)_stateMgrs[0];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[229],__eventData[19],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if (!__ctx10__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                ETran_Originate3_Port.SendMessage(0, __ctx1__.__ETRANOriginateRequestMsg, null, null, out __ctx0__.__subWrapper1, __ctx10__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__ETRANOriginateRequestMsg);
                    __edata.PortName = @"ETran_Originate3_Port";
                    Tracker.FireEvent(__eventLocations[230],__edata,_stateMgrs[10].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[231],__eventData[1],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                if (!ETran_Originate3_Port.GetMessageId(__ctx0__.__subWrapper1.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[0]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper1 != null)
                {
                    __ctx0__.__subWrapper1.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper1 = null;
                }
                if (__ctx1__.__ETRANActualResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__ETRANActualResponseMsg);
                __ctx1__.__ETRANActualResponseMsg = new ETRANActualResponseType("ETRANActualResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__ETRANActualResponseMsg);
                ETran_Originate3_Port.ReceiveMessage(0, __msgEnv__, __ctx1__.__ETRANActualResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[10], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__ETRANActualResponseMsg);
                    __edata.PortName = @"ETran_Originate3_Port";
                    Tracker.FireEvent(__eventLocations[232],__edata,_stateMgrs[10].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[233],__eventData[2],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx1__.__ETranResponseXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__ETRANActualResponseMsg));
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[234],__eventData[3],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                __ctx1__.__ProcessStatusCode = "Processing";
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if (!__ctx10__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx10__.OnCommit();
                goto case 14;
            case 14:
                __seg__.SegmentDone();
                _segments[7].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment15(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[15];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[10];
            ____scope57_10 __ctx10__ = (____scope57_10)_stateMgrs[10];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(10);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[236],__eventData[9],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[237],__eventData[8],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    ETranFaultMsgType __ETranFaultMsg = new ETranFaultMsgType("ETranFaultMsg", __ctx1__);

                    __ETranFaultMsg.MessagePart.LoadFrom(null);
                    __ETranFaultMsg.MessagePart.CopyFrom(__ctx10__.__exCvcInvocationEx_0.MessagePart);
                    __ETranFaultMsg.CopyContextPropertiesFrom(__ctx10__.__exCvcInvocationEx_0);

                    if (__ctx1__.__ETranFaultMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETranFaultMsg);
                    __ctx1__.__ETranFaultMsg = __ETranFaultMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETranFaultMsg);
                }
                __ctx1__.__ETranFaultMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETranFaultMsg);
                    Tracker.FireEvent(__eventLocations[238],__edata,_stateMgrs[10].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[239],__eventData[2],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx1__.__ETranResponseXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__ETranFaultMsg));
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[240],__eventData[3],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx1__.__ProcessStatusCode = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[243],__eventData[2],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                __ctx1__.__Message = System.String.Format("ETran Servicing request resulted in fault message. \r\n\r\n{0}", SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__ETranFaultMsg)));
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[244],__eventData[3],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[245],__eventData[8],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                {
                    ETRANActualResponseType __ETRANActualResponseMsg = new ETRANActualResponseType("ETRANActualResponseMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.ETRAN_Originate.Map_CVCInvocationEx_To_Response), new object[] {__ETRANActualResponseMsg.MessagePart}, new object[] {__ctx1__.__ETranFaultMsg.MessagePart});
                    __ETRANActualResponseMsg.CopyContextPropertiesFrom(__ctx1__.__ETranFaultMsg);

                    if (__ctx1__.__ETRANActualResponseMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETRANActualResponseMsg);
                    __ctx1__.__ETRANActualResponseMsg = __ETRANActualResponseMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETRANActualResponseMsg);
                }
                __ctx1__.__ETRANActualResponseMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETRANActualResponseMsg);
                    __edata.Messages.Add(__ctx1__.__ETranFaultMsg);
                    Tracker.FireEvent(__eventLocations[246],__edata,_stateMgrs[10].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__ETranFaultMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ETranFaultMsg);
                    __ctx1__.__ETranFaultMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[247],__eventData[13],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                __ctx10__.__exv__ = null;
                OnEndCatchHandler(10, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment16(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[16];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[10];
            ____scope57_10 __ctx10__ = (____scope57_10)_stateMgrs[10];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(10);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[248],__eventData[9],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[249],__eventData[8],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    Fault1_1MsgType __Fault1_1Msg = new Fault1_1MsgType("Fault1_1Msg", __ctx1__);

                    __Fault1_1Msg.MessagePart.LoadFrom(null);
                    __Fault1_1Msg.MessagePart.CopyFrom(__ctx10__.__exFault1_1_1.MessagePart);
                    __Fault1_1Msg.CopyContextPropertiesFrom(__ctx10__.__exFault1_1_1);

                    if (__ctx1__.__Fault1_1Msg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__Fault1_1Msg);
                    __ctx1__.__Fault1_1Msg = __Fault1_1Msg;
                    __ctx1__.RefMessage(__ctx1__.__Fault1_1Msg);
                }
                __ctx1__.__Fault1_1Msg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__Fault1_1Msg);
                    Tracker.FireEvent(__eventLocations[250],__edata,_stateMgrs[10].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[251],__eventData[2],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx1__.__ETranResponseXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__Fault1_1Msg));
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[252],__eventData[3],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx1__.__ProcessStatusCode = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[255],__eventData[2],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                __ctx1__.__Message = System.String.Format("ETran Servicing request resulted in fault message. \r\n\r\n{0}", SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__Fault1_1Msg)));
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[256],__eventData[3],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[257],__eventData[8],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                {
                    ETRANActualResponseType __ETRANActualResponseMsg = new ETRANActualResponseType("ETRANActualResponseMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.ETRAN_Originate.Map_Fault1_1_To_Response), new object[] {__ETRANActualResponseMsg.MessagePart}, new object[] {__ctx1__.__Fault1_1Msg.MessagePart});
                    __ETRANActualResponseMsg.CopyContextPropertiesFrom(__ctx1__.__Fault1_1Msg);

                    if (__ctx1__.__ETRANActualResponseMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETRANActualResponseMsg);
                    __ctx1__.__ETRANActualResponseMsg = __ETRANActualResponseMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETRANActualResponseMsg);
                }
                __ctx1__.__ETRANActualResponseMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETRANActualResponseMsg);
                    __edata.Messages.Add(__ctx1__.__Fault1_1Msg);
                    Tracker.FireEvent(__eventLocations[258],__edata,_stateMgrs[10].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__Fault1_1Msg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__Fault1_1Msg);
                    __ctx1__.__Fault1_1Msg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[259],__eventData[13],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                __ctx10__.__exv__ = null;
                OnEndCatchHandler(10, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment17(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[17];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[10];
            ____scope57_10 __ctx10__ = (____scope57_10)_stateMgrs[10];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(10);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[260],__eventData[9],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[261],__eventData[8],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                {
                    Fault1_2MsgType __Fault1_2Msg = new Fault1_2MsgType("Fault1_2Msg", __ctx1__);

                    __Fault1_2Msg.MessagePart.LoadFrom(null);
                    __Fault1_2Msg.MessagePart.CopyFrom(__ctx10__.__exFault1_2_2.MessagePart);
                    __Fault1_2Msg.CopyContextPropertiesFrom(__ctx10__.__exFault1_2_2);

                    if (__ctx1__.__Fault1_2Msg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__Fault1_2Msg);
                    __ctx1__.__Fault1_2Msg = __Fault1_2Msg;
                    __ctx1__.RefMessage(__ctx1__.__Fault1_2Msg);
                }
                __ctx1__.__Fault1_2Msg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__Fault1_2Msg);
                    Tracker.FireEvent(__eventLocations[262],__edata,_stateMgrs[10].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[263],__eventData[2],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx1__.__ETranResponseXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__Fault1_2Msg));
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[264],__eventData[3],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx1__.__ProcessStatusCode = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[267],__eventData[2],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                __ctx1__.__Message = System.String.Format("ETran Servicing request resulted in fault message. \r\n\r\n{0}", SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__Fault1_2Msg)));
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[268],__eventData[3],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[269],__eventData[8],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                {
                    ETRANActualResponseType __ETRANActualResponseMsg = new ETRANActualResponseType("ETRANActualResponseMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.ETRAN_Originate.Map_Fault1_2_To_Response), new object[] {__ETRANActualResponseMsg.MessagePart}, new object[] {__ctx1__.__Fault1_2Msg.MessagePart});
                    __ETRANActualResponseMsg.CopyContextPropertiesFrom(__ctx1__.__Fault1_2Msg);

                    if (__ctx1__.__ETRANActualResponseMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ETRANActualResponseMsg);
                    __ctx1__.__ETRANActualResponseMsg = __ETRANActualResponseMsg;
                    __ctx1__.RefMessage(__ctx1__.__ETRANActualResponseMsg);
                }
                __ctx1__.__ETRANActualResponseMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ETRANActualResponseMsg);
                    __edata.Messages.Add(__ctx1__.__Fault1_2Msg);
                    Tracker.FireEvent(__eventLocations[270],__edata,_stateMgrs[10].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__Fault1_2Msg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__Fault1_2Msg);
                    __ctx1__.__Fault1_2Msg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[271],__eventData[13],_stateMgrs[10].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                __ctx10__.__exv__ = null;
                OnEndCatchHandler(10, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment18(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[18];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[11];
            ____scope58_11 __ctx11__ = (____scope58_11)_stateMgrs[11];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[276],__eventData[4],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                __condition__ = __ctx1__.__Status == "Error" || __ctx1__.__Status == "Failure";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 4;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx1__.__ProcessStatusCode = __ctx1__.__Status;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[278],__eventData[6],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[279],__eventData[10],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate(24, InstanceId, this);
                    _stateMgrs[24] = svc;
                    __ctx11__.StartCall(__seg__, svc, __eventLocations[279],new object[] {__ctx1__.__ETranResponseXml, __ctx1__.__BTAuditMessage, __ctx1__.__BTAuditStatus, __ctx1__.__BTAuditId, __ctx1__.__ProcessStatusCode});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[24]).Args;
                    __ctx1__.__BTAuditMessage = (System.String)args[1];
                    __ctx1__.__BTAuditStatus = (System.String)args[2];
                    __ctx1__.__BTAuditId = (System.String)args[3];
                }
                Tracker.FireEvent(__eventLocations[280],__eventData[11],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[281],__eventData[2],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                __ctx1__.__BTAuditStepCompleted = "Response Update";
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[282],__eventData[3],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if (!__ctx11__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx11__.OnCommit();
                goto case 13;
            case 13:
                __seg__.SegmentDone();
                _segments[7].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment19(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[19];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[11];
            ____scope58_11 __ctx11__ = (____scope58_11)_stateMgrs[11];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(11);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[283],__eventData[9],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[284],__eventData[2],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__BTAuditStatus = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[285],__eventData[3],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__BTAuditMessage = System.String.Format("BT Audit Response Update - exception encountered... \r\n\r\n{0}", SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx11__.__exBtAuditResponse_0));
                if (__ctx11__ != null)
                    __ctx11__.__exBtAuditResponse_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[288],__eventData[13],_stateMgrs[11].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx11__.__exv__ = null;
                OnEndCatchHandler(11, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment20(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[20];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[12];
            ____scope59_12 __ctx12__ = (____scope59_12)_stateMgrs[12];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[314],__eventData[10],_stateMgrs[12].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SF_Rest_Save(25, InstanceId, this);
                    _stateMgrs[25] = svc;
                    __ctx12__.StartCall(__seg__, svc, __eventLocations[314],new object[] {__ctx1__.__Status, __ctx1__.__SFRestSaveRequestMsg, new Microsoft.XLANGs.Core.MessageTuple((Microsoft.XLANGs.Core.Context)_stateMgrs[1], null), __ctx1__.__Message});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[25]).Args;
                    __ctx1__.__Status = (System.String)args[0];
                    __ctx1__.__SFRestSaveResultMsg = (SBA.BizTalk.Shared.Salesforce.RestApi.Logic.SaveResultMsgType)((Microsoft.XLANGs.Core.MessageTuple)(args[2])).message;
                    __ctx1__.__SFRestSaveResultMsg.MessageName = "SFRestSaveResultMsg";
                    __ctx1__.__Message = (System.String)args[3];
                }
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call);
                    __edata.Messages.Add(__ctx1__.__SFRestSaveRequestMsg);
                    __edata.Messages.Add(__ctx1__.__SFRestSaveResultMsg);
                    Tracker.FireEvent(__eventLocations[315],__edata,_stateMgrs[12].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if (!__ctx12__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx12__.OnCommit();
                goto case 6;
            case 6:
                __seg__.SegmentDone();
                _segments[7].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment21(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[21];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[12];
            ____scope59_12 __ctx12__ = (____scope59_12)_stateMgrs[12];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(12);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[316],__eventData[9],_stateMgrs[12].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[317],__eventData[2],_stateMgrs[12].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[318],__eventData[3],_stateMgrs[12].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__Message = System.String.Format("ETran Obligation failed to update the Loan in Salesforce with the ETran Loan Number & Obligated Date " + "due to an exception encountered. \r\n\r\n" + "ApplicationNumber: '{0}' \r\n" + "LoanId: '{1}' \r\n" + "SaveRequest Msg: \r\n{2} \r\n\r\n{3}", __ctx1__.__ApplicationNumber, __ctx1__.__SalesforceObjectId, SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__SFLoanUpdateRequestMsg)), SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx12__.__exLoanUpdate_0));
                if (__ctx12__ != null)
                    __ctx12__.__exLoanUpdate_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[321],__eventData[13],_stateMgrs[12].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __ctx12__.__exv__ = null;
                OnEndCatchHandler(12, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment22(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[22];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[5];
            ____scope60_13 __ctx13__ = (____scope60_13)_stateMgrs[13];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(5);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[324],__eventData[9],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[325],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__Ex = __ctx5__.__ex_0;
                if (__ctx5__ != null)
                    __ctx5__.__ex_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[326],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__TmpMsgXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__SFNotificationSingleMsg));
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx1__.__Ex.Data.Add("SF Notify Msg", __ctx1__.__TmpMsgXml);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.__TmpMsgXml = SBA.BizTalk.Shared.MessageHelper.XLANGMessageHelper.Instance.GetXLANGMessageXmlText(CreateMessageWrapperForUserCode(__ctx1__.__CanonicalMsg));
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__Ex.Data.Add("Canonical Msg", __ctx1__.__TmpMsgXml);
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[329],__eventData[2],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[330],__eventData[3],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx1__.__Message = System.String.Format("{0}\r\n\r\n{1}", SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx1__.__Ex), __ctx1__.__Message);
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[331],__eventData[4],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 16;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[332],__eventData[6],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[333],__eventData[7],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                __ctx13__ = new ____scope60_13(this);
                _stateMgrs[13] = __ctx13__;
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                __ctx5__.StartContext(__seg__, __ctx13__);
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[354],__eventData[14],_stateMgrs[5].TrackDataStream );
                __ctx13__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[355],__eventData[13],_stateMgrs[5].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                __ctx5__.__exv__ = null;
                OnEndCatchHandler(5, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment23(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[23];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[13];
            ____scope60_13 __ctx13__ = (____scope60_13)_stateMgrs[13];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];
            ____scope52_5 __ctx5__ = (____scope52_5)_stateMgrs[5];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[335],__eventData[8],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                {
                    CanonicalMsgType __TempCanonicalMsg = new CanonicalMsgType("TempCanonicalMsg", __ctx1__);

                    __TempCanonicalMsg.MessagePart.LoadFrom(null);
                    __TempCanonicalMsg.MessagePart.CopyFrom(__ctx1__.__CanonicalMsg.MessagePart);
                    __TempCanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__CanonicalMsg);
                    __TempCanonicalMsg.MessagePart.SetDistinguishedField("Event_Request__c.GUID__c", __ctx1__.__OrchestrationInstanceId.ToString());
                    __TempCanonicalMsg.MessagePart.SetDistinguishedField("Event_Request__c.Stage__c", __ctx1__.__Stage);
                    __TempCanonicalMsg.MessagePart.SetDistinguishedField("Event_Request__c.Status__c", __ctx1__.__Status);
                    __TempCanonicalMsg.MessagePart.SetDistinguishedField("Event_Request__c.Application_Number__c", __ctx1__.__ApplicationNumber);
                    __TempCanonicalMsg.MessagePart.SetDistinguishedField("Event_Request__c.SObject_ID__c", __ctx1__.__SalesforceObjectId);
                    __TempCanonicalMsg.MessagePart.SetDistinguishedField("Event_Request__c.SObject_Name__c", __ctx1__.__SalesforceObjectName);
                    __TempCanonicalMsg.MessagePart.SetDistinguishedField("Event_Request__c.Log_Message__c", __ctx1__.__Message);

                    if (__ctx1__.__TempCanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__TempCanonicalMsg);
                    __ctx1__.__TempCanonicalMsg = __TempCanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__TempCanonicalMsg);
                }
                __ctx1__.__TempCanonicalMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[336],__edata,_stateMgrs[13].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[337],__eventData[8],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                {
                    CanonicalMsgType __CanonicalMsg = new CanonicalMsgType("CanonicalMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.ETRANObligation.Logic.Event_Request__c.Map_Event_Request_c_From_Error), new object[] {__CanonicalMsg.MessagePart}, new object[] {__ctx1__.__TempCanonicalMsg.MessagePart});
                    __CanonicalMsg.CopyContextPropertiesFrom(__ctx1__.__TempCanonicalMsg);

                    if (__ctx1__.__CanonicalMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__CanonicalMsg);
                    __ctx1__.__CanonicalMsg = __CanonicalMsg;
                    __ctx1__.RefMessage(__ctx1__.__CanonicalMsg);
                }
                __ctx1__.__CanonicalMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__CanonicalMsg);
                    __edata.Messages.Add(__ctx1__.__TempCanonicalMsg);
                    Tracker.FireEvent(__eventLocations[338],__edata,_stateMgrs[13].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[339],__eventData[2],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx1__.__Stage = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Event_Request__c.Stage__c");
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[340],__eventData[3],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                __ctx1__.__Message = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Event_Request__c.Log_Message__c");
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                __ctx1__.__ApplicationNumber = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Event_Request__c.Application_Number__c");
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                __ctx1__.__SalesforceObjectId = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Event_Request__c.SObject_ID__c");
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                __ctx1__.__SalesforceObjectName = (System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Event_Request__c.SObject_Name__c");
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                __ctx1__.__OrchestrationInstanceId = System.Guid.Parse((System.String)__ctx1__.__CanonicalMsg.MessagePart.GetDistinguishedField("Event_Request__c.GUID__c"));
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[342],__eventData[4],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 19;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[343],__eventData[6],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                if (!__ctx13__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx13__.OnCommit();
                goto case 22;
            case 22:
                __seg__.SegmentDone();
                _segments[22].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment24(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[24];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[13];
            ____scope60_13 __ctx13__ = (____scope60_13)_stateMgrs[13];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(13);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[344],__eventData[9],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[345],__eventData[2],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__ExInner = __ctx13__.__exInner_0;
                if (__ctx13__ != null)
                    __ctx13__.__exInner_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[346],__eventData[3],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[347],__eventData[2],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[348],__eventData[3],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx1__.__Message = System.String.Format("Error from within error handling! \r\n{0} \r\n\r\nOriginal Error Info: \r\n{1}", SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx1__.__ExInner), __ctx1__.__Message);
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[351],__eventData[4],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 12;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[352],__eventData[6],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[353],__eventData[13],_stateMgrs[13].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                __ctx13__.__exv__ = null;
                OnEndCatchHandler(13, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment25(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[25];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[14];
            ____scope61_14 __ctx14__ = (____scope61_14)_stateMgrs[14];
            ____scope62_15 __ctx15__ = (____scope62_15)_stateMgrs[15];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[359],__eventData[7],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                __ctx15__ = new ____scope62_15(this);
                _stateMgrs[15] = __ctx15__;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                __ctx14__.StartContext(__seg__, __ctx15__);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[394],__eventData[14],_stateMgrs[14].TrackDataStream );
                __ctx15__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[395],__eventData[10],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.Salesforce.EventLogging.Logic.SendEventToSalesForce(29, InstanceId, this);
                    _stateMgrs[29] = svc;
                    __ctx14__.StartCall(__seg__, svc, __eventLocations[395],new object[] {__ctx1__.__OrchestrationInstanceId, __ctx1__.__Status, __ctx1__.__Stage, __ctx1__.__ApplicationNumber, __ctx1__.__SalesforceObjectName, __ctx1__.__SalesforceObjectId, __ctx1__.__Message, __ctx1__.__AutoDeclineReason});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[29]).Args;
                }
                Tracker.FireEvent(__eventLocations[396],__eventData[11],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                if (!__ctx14__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx14__.OnCommit();
                goto case 10;
            case 10:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment26(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[26];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[15];
            ____scope61_14 __ctx14__ = (____scope61_14)_stateMgrs[14];
            ____scope62_15 __ctx15__ = (____scope62_15)_stateMgrs[15];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[361],__eventData[4],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                __condition__ = (System.Boolean)__ctx1__.__ETranObligationTransportMsg.MessagePart.GetDistinguishedField("EnableBTAuditPayloadLog");
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 50 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 50;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[362],__eventData[4],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__BTAuditId);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 30;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if ( !PreProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[363],__eventData[4],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 6;
            case 6:
                __condition__ = __ctx1__.__Status == "Success";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 21;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[364],__eventData[2],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                __ctx1__.__ProcessStatusCode = "Success";
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[365],__eventData[3],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[366],__eventData[4],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                __condition__ = __ctx1__.__BTAuditStepCompleted == "Response Update";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 16;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[367],__eventData[10],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___StatusUpdate(26, InstanceId, this);
                    _stateMgrs[26] = svc;
                    __ctx15__.StartCall(__seg__, svc, __eventLocations[367],new object[] {__ctx1__.__BTAuditMessage, __ctx1__.__BTAuditStatus, __ctx1__.__BTAuditId, __ctx1__.__ProcessStatusCode});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[26]).Args;
                    __ctx1__.__BTAuditMessage = (System.String)args[0];
                    __ctx1__.__BTAuditStatus = (System.String)args[1];
                    __ctx1__.__BTAuditId = (System.String)args[2];
                }
                Tracker.FireEvent(__eventLocations[368],__eventData[11],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[369],__eventData[10],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate(27, InstanceId, this);
                    _stateMgrs[27] = svc;
                    __ctx15__.StartCall(__seg__, svc, __eventLocations[369],new object[] {__ctx1__.__ETranResponseXml, __ctx1__.__BTAuditMessage, __ctx1__.__BTAuditStatus, __ctx1__.__BTAuditId, __ctx1__.__ProcessStatusCode});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 18:
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[27]).Args;
                    __ctx1__.__BTAuditMessage = (System.String)args[1];
                    __ctx1__.__BTAuditStatus = (System.String)args[2];
                    __ctx1__.__BTAuditId = (System.String)args[3];
                }
                Tracker.FireEvent(__eventLocations[370],__eventData[11],_stateMgrs[15].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[371],__eventData[6],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[372],__eventData[2],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                __ctx1__.__ProcessStatusCode = __ctx1__.__Status;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[373],__eventData[3],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                __ctx1__.__ETranResponseXml = System.String.Format("ETRAN RESPONSE: (Event Request {0} Below) \r\n\r\n" + " **************************************** \r\n\r\n{1} \r\n\r\n" + "EVENT REQUEST LOG MESSAGE: \r\n\r\n" + " **************************************** \r\n\r\n{2} \r\n\r\n", __ctx1__.__Status, __ctx1__.__ETranResponseXml, __ctx1__.__Message);
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[375],__eventData[10],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                {
                    Microsoft.XLANGs.Core.Service svc = new SBA.BizTalk.Shared.AuditLogging.Logic.BT_Audit___ResponseUpdate(28, InstanceId, this);
                    _stateMgrs[28] = svc;
                    __ctx15__.StartCall(__seg__, svc, __eventLocations[375],new object[] {__ctx1__.__ETranResponseXml, __ctx1__.__BTAuditMessage, __ctx1__.__BTAuditStatus, __ctx1__.__BTAuditId, __ctx1__.__ProcessStatusCode});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 27:
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[28]).Args;
                    __ctx1__.__BTAuditMessage = (System.String)args[1];
                    __ctx1__.__BTAuditStatus = (System.String)args[2];
                    __ctx1__.__BTAuditId = (System.String)args[3];
                }
                Tracker.FireEvent(__eventLocations[376],__eventData[11],_stateMgrs[15].TrackDataStream );
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[377],__eventData[6],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                if ( !PostProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 34;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[378],__eventData[2],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                __ctx1__.__BTAuditStatus = "Failure";
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 32:
                if ( !PreProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[379],__eventData[3],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 33;
            case 33:
                __ctx1__.__BTAuditMessage = System.String.Format("No BT Audit Id found after the initial create succeeded. \r\n\r\n" + "BTAuditId: '{0}' \r\n" + "ApplicationNumber: '{1}' \r\n" + "DisasterNumber: '{2}' \r\n" + "FEMAEventCode: '{3}' \r\n" + "FEMARegistrationNumber: '{4}' \r\n" + "InterfaceType: '{5}' \r\n" + "ProcessStatusCode: '{6}' \r\n" + "Stage: '{7}' \r\n", __ctx1__.__BTAuditId, __ctx1__.__ApplicationNumber, __ctx1__.__DisasterNumber, __ctx1__.__FEMAEventCode, __ctx1__.__FEMARegistrationNumber, __ctx1__.__InterfaceType, __ctx1__.__ProcessStatusCode, __ctx1__.__Stage);
                if ( !PostProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 34;
            case 34:
                if ( !PreProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[380],__eventData[6],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 35;
            case 35:
                if ( !PreProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[381],__eventData[4],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 36;
            case 36:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__BTAuditMessage) || __ctx1__.__BTAuditStatus == "Error";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 46 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 46;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                if ( !PreProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[382],__eventData[2],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 38;
            case 38:
                __ctx1__.__BTAuditStatus = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 39:
                if ( !PreProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[383],__eventData[3],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 40;
            case 40:
                __ctx1__.__BTAuditMessage = System.String.Format("ETran Obligation failed logging final update to BT Audit. \r\n" + "This did not prevent ETran Obligation from finishing. \r\n\r\n{0}", __ctx1__.__BTAuditMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 41;
            case 41:
                if ( !PreProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[360],__eventData[4],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 42;
            case 42:
                __condition__ = __ctx1__.__BTAuditMessage.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 44;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 43;
            case 43:
                __ctx1__.__BTAuditMessage = __ctx1__.__BTAuditMessage.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 44;
            case 44:
                if ( !PreProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[374],__eventData[6],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 45;
            case 45:
                System.Diagnostics.EventLog.WriteEntry("BizTalk: ETran Obligation", __ctx1__.__BTAuditMessage, System.Diagnostics.EventLogEntryType.Warning);
                if ( !PostProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 46;
            case 46:
                if ( !PreProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[384],__eventData[6],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 47;
            case 47:
                if ( !PreProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[385],__eventData[4],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 48;
            case 48:
                __condition__ = System.String.IsNullOrWhiteSpace(__ctx1__.__BTAuditMessage) && __ctx1__.__BTAuditStatus == "Success";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 49 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 49;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 49;
            case 49:
                if ( !PreProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[386],__eventData[6],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 50;
            case 50:
                if ( !PreProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[387],__eventData[6],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 51;
            case 51:
                if (!__ctx15__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 52;
            case 52:
                if ( !PreProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx15__.OnCommit();
                goto case 53;
            case 53:
                __seg__.SegmentDone();
                _segments[25].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment27(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[27];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[15];
            ____scope62_15 __ctx15__ = (____scope62_15)_stateMgrs[15];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(15);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[388],__eventData[9],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[389],__eventData[2],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__BTAuditStatus = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[390],__eventData[3],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__BTAuditMessage = System.String.Format("ETran Obligation failed logging final update to BT Audit. \r\n" + "This did not prevent ETran Obligation from finishing. \r\n\r\n{0}", __ctx15__.__exBtAuditFinal_0);
                if (__ctx15__ != null)
                    __ctx15__.__exBtAuditFinal_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[391],__eventData[4],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __condition__ = __ctx1__.__BTAuditMessage.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 9;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__BTAuditMessage = __ctx1__.__BTAuditMessage.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[392],__eventData[6],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                System.Diagnostics.EventLog.WriteEntry("BizTalk: ETran Obligation", __ctx1__.__BTAuditMessage, System.Diagnostics.EventLogEntryType.Warning);
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[393],__eventData[13],_stateMgrs[15].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx15__.__exv__ = null;
                OnEndCatchHandler(15, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment28(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[28];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[14];
            ____scope61_14 __ctx14__ = (____scope61_14)_stateMgrs[14];
            __ETRANObligationLogic_1 __ctx1__ = (__ETRANObligationLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(14);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[397],__eventData[9],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[398],__eventData[2],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[399],__eventData[3],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__Message = System.String.Format("ETran Obligation failed to send {0} results to Salesforce Event Request " + "due to an exception encountered. \r\n\r\n" + "Event Request values attempted are below. The exception occurring from the " + "Event Request attempt is further below. \r\n" + "GUID: '{1}' \r\n" + "ApplicationNumber: '{2}' \r\n" + "Stage: '{3}' \r\n" + "Status: '{0}' \r\n" + "SObject ID: '{4}' \r\n" + "SObject Name: '{5}' \r\n" + "Log Message: '{6}' \r\n\r\n" + "Event Request Save Attempt Exception: \r\n{7}", __ctx1__.__Status, __ctx1__.__OrchestrationInstanceId.ToString(), __ctx1__.__ApplicationNumber, __ctx1__.__Stage, __ctx1__.__SalesforceObjectId, __ctx1__.__SalesforceObjectName, __ctx1__.__Message, SBA.BizTalk.Shared.MessageHelper.Exceptions.ExceptionFormatter.GetExceptionString(__ctx14__.__exEventLogging_0));
                if (__ctx14__ != null)
                    __ctx14__.__exEventLogging_0 = null;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[402],__eventData[4],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                __condition__ = __ctx1__.__Message.Length > __ctx1__.__ErrorMaxLength;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 9;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__Message = __ctx1__.__Message.Substring(0, __ctx1__.__ErrorMaxLength);
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[403],__eventData[6],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[404],__eventData[2],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                System.Diagnostics.EventLog.WriteEntry("BizTalk: ETran Obligation", __ctx1__.__Message, System.Diagnostics.EventLogEntryType.Error);
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[405],__eventData[3],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[406],__eventData[12],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                RequestTerminate(__ctx14__,__ctx1__.__Message);
                __seg__.SegmentDone();
                break;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[407],__eventData[13],_stateMgrs[14].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                __ctx14__.__exv__ = null;
                OnEndCatchHandler(14, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
        private static Microsoft.XLANGs.Core.CachedObject[] _locations = new Microsoft.XLANGs.Core.CachedObject[] {
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{CCA890B4-4224-4CEE-92F1-B3F9C17B642C}"))
        };

    }

    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed public class _MODULE_PROXY_ { }
}
