
#pragma warning disable 162

namespace DLAPDocument
{

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_results__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument.results _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument.results();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_results__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument.results)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_results__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument#results"
    )]
    [System.SerializableAttribute]
    sealed internal class RestReceiptDocumentResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_results__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_results__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestReceiptDocumentResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_SaveRequest__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument.SaveRequest _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument.SaveRequest();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_SaveRequest__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument.SaveRequest)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_SaveRequest__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument#SaveRequest"
    )]
    [System.SerializableAttribute]
    sealed internal class RestReceiptDocumentRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_SaveRequest__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestReceiptDocument_SaveRequest__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestReceiptDocumentRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_QueryResult__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery.QueryResult _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery.QueryResult();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_QueryResult__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery.QueryResult)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_QueryResult__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan#QueryResult"
    )]
    [System.SerializableAttribute]
    sealed internal class RestLoanQueryResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_QueryResult__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_QueryResult__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestLoanQueryResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery.Request _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery.Request();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class RestLoanQueryRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestLoanQuery_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestLoanQueryRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENT__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.Definition.DocumentUpload.DOCUMENT _schema = new SBA.DLAPDocumentUpload.Definition.DocumentUpload.DOCUMENT();

        public __SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENT__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.Definition.DocumentUpload.DOCUMENT)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENT__)
        },
        0,
        @"http://DocumentUploadDefinition.DocumentUpload#DOCUMENT"
    )]
    [System.SerializableAttribute]
    sealed internal class DocumentUploadRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENT__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENT__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public DocumentUploadRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_Application__c.Request _schema = new SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_Application__c.Request();

        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_Application__c.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/Application__c#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryApplicationIdRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryApplicationIdRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_Application__c.Response _schema = new SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_Application__c.Response();

        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_Application__c.Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Response__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/Application__c#Response"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryApplicationIdResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_Application__c_Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryApplicationIdResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENTRESPONSE__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.Definition.DocumentUpload.DOCUMENTRESPONSE _schema = new SBA.DLAPDocumentUpload.Definition.DocumentUpload.DOCUMENTRESPONSE();

        public __SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENTRESPONSE__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.Definition.DocumentUpload.DOCUMENTRESPONSE)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENTRESPONSE__)
        },
        0,
        @"http://DocumentUploadDefinition.DocumentUpload#DOCUMENTRESPONSE"
    )]
    [System.SerializableAttribute]
    sealed internal class DocumentUploadResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENTRESPONSE__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_Definition_DocumentUpload_DOCUMENTRESPONSE__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public DocumentUploadResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_Definition_ContentLinkRequestInfo__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.Definition.ContentLinkRequestInfo _schema = new SBA.DLAPDocumentUpload.Definition.ContentLinkRequestInfo();

        public __SBA_DLAPDocumentUpload_Definition_ContentLinkRequestInfo__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.Definition.ContentLinkRequestInfo)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_Definition_ContentLinkRequestInfo__)
        },
        0,
        @"http://DocumentUploadDefinition/ContentLinkRequestInfo#ContentLinkRequestInfo"
    )]
    [System.SerializableAttribute]
    sealed internal class ContentLinkRequestInfoType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_Definition_ContentLinkRequestInfo__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_Definition_ContentLinkRequestInfo__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public ContentLinkRequestInfoType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_Definition_DocumentUploadFault__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.Definition.DocumentUploadFault _schema = new SBA.DLAPDocumentUpload.Definition.DocumentUploadFault();

        public __SBA_DLAPDocumentUpload_Definition_DocumentUploadFault__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.Definition.DocumentUploadFault)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_Definition_DocumentUploadFault__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUploadDefinition/Fault#Fault"
    )]
    [System.SerializableAttribute]
    sealed internal class DocumentUploadFaultResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_Definition_DocumentUploadFault__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_Definition_DocumentUploadFault__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public DocumentUploadFaultResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.SalesforceUpdate_CheckList_Item__c.Request _schema = new DLAPDocumentUploadSalesForceDefinition.SalesforceUpdate_CheckList_Item__c.Request();

        public __DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.SalesforceUpdate_CheckList_Item__c.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/CheckList_Item__c#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryCheckListItemRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryCheckListItemRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.SalesforceUpdate_CheckList_Item__c.Response _schema = new DLAPDocumentUploadSalesForceDefinition.SalesforceUpdate_CheckList_Item__c.Response();

        public __DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.SalesforceUpdate_CheckList_Item__c.Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Response__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/CheckList_Item__c#Response"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryCheckListItemResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_SalesforceUpdate_CheckList_Item__c_Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryCheckListItemResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadDefinition_UploadMetaData__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadDefinition.UploadMetaData _schema = new DLAPDocumentUploadDefinition.UploadMetaData();

        public __DLAPDocumentUploadDefinition_UploadMetaData__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadDefinition.UploadMetaData)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadDefinition_UploadMetaData__)
        },
        0,
        @"ReceiptMetaData"
    )]
    [System.SerializableAttribute]
    sealed internal class UploadMetaDataType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadDefinition_UploadMetaData__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadDefinition_UploadMetaData__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public UploadMetaDataType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_ReceiptDocument__c.Request _schema = new DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_ReceiptDocument__c.Request();

        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_ReceiptDocument__c.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/ReceiptDocument#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryReceiptDocumentRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryReceiptDocumentRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_ReceiptDocument__c.Response _schema = new DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_ReceiptDocument__c.Response();

        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_ReceiptDocument__c.Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Response__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/ReceiptDocument#Response"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryReceiptDocumentResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_ReceiptDocument__c_Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryReceiptDocumentResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_Loan__c.Request _schema = new DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_Loan__c.Request();

        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_Loan__c.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/Loan__c#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryLoanRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryLoanRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_Loan__c.Response _schema = new DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_Loan__c.Response();

        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_Loan__c.Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Response__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/Loan__c#Response"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryLoanResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_Loan__c_Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryLoanResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_CheckListItemContentId__c.Request _schema = new DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_CheckListItemContentId__c.Request();

        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_CheckListItemContentId__c.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/CheckListItemContentId__c#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryCheckListItemContentIdRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryCheckListItemContentIdRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_CheckListItemContentId__c.Response _schema = new DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_CheckListItemContentId__c.Response();

        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_CheckListItemContentId__c.Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Response__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/CheckListItemContentId__c#Response"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryCheckListItemContentIdResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_SalesforceQuery_CheckListItemContentId__c_Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryCheckListItemContentIdResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails.Request _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails.Request();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class RestChecklistItemDocumentDetailsRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestChecklistItemDocumentDetailsRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_QueryResult__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails.QueryResult _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails.QueryResult();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_QueryResult__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails.QueryResult)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_QueryResult__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument#QueryResult"
    )]
    [System.SerializableAttribute]
    sealed internal class RestChecklistItemDocumentDetailsResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_QueryResult__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItemDocumentDetails_QueryResult__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestChecklistItemDocumentDetailsResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo.Request _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo.Request();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/Query/ApplicationInfo#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class RestApplicationInfoRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestApplicationInfoRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_QueryResult__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo.QueryResult _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo.QueryResult();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_QueryResult__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo.QueryResult)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_QueryResult__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/Query/ApplicationInfo#QueryResult"
    )]
    [System.SerializableAttribute]
    sealed internal class RestApplicationInfoResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_QueryResult__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestApplicationInfo_QueryResult__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestApplicationInfoResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_SaveRequest__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.SaveRequest _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.SaveRequest();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_SaveRequest__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.SaveRequest)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_SaveRequest__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem#SaveRequest"
    )]
    [System.SerializableAttribute]
    sealed internal class RestChecklistItemUpdateRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_SaveRequest__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_SaveRequest__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestChecklistItemUpdateRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_results__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.results _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.results();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_results__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.results)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_results__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem#results"
    )]
    [System.SerializableAttribute]
    sealed internal class RestChecklistItemUpdateResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_results__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_results__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestChecklistItemUpdateResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_QueryResult__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery.QueryResult _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery.QueryResult();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_QueryResult__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery.QueryResult)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_QueryResult__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/QUERY/RestContentVersion#QueryResult"
    )]
    [System.SerializableAttribute]
    sealed internal class RestContentVersionQueryResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_QueryResult__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_QueryResult__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestContentVersionQueryResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.SalesForceDefinition.Salesforce_ContentVersion.Request _schema = new SBA.DLAPDocumentUpload.SalesForceDefinition.Salesforce_ContentVersion.Request();

        public __SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.SalesForceDefinition.Salesforce_ContentVersion.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/ContentVersion#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceInsertContentVersionRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceInsertContentVersionRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.SalesForceDefinition.Salesforce_ContentVersion.Response _schema = new SBA.DLAPDocumentUpload.SalesForceDefinition.Salesforce_ContentVersion.Response();

        public __SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.SalesForceDefinition.Salesforce_ContentVersion.Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Response__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/ContentVersion#Response"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceInsertContentVersionResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_SalesForceDefinition_Salesforce_ContentVersion_Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceInsertContentVersionResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_ContentVersionDocumentId.Request _schema = new SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_ContentVersionDocumentId.Request();

        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_ContentVersionDocumentId.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/ContentVersionDocumentId#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryContentVersionDocumentIdRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryContentVersionDocumentIdRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_ContentVersionDocumentId.Response _schema = new SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_ContentVersionDocumentId.Response();

        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_ContentVersionDocumentId.Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Response__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/ContentVersionDocumentId#Response"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceQueryContentVersionDocumentIdResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceQuery_ContentVersionDocumentId_Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceQueryContentVersionDocumentIdResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceInsert_ContentDocumentlink.Request _schema = new SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceInsert_ContentDocumentlink.Request();

        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceInsert_ContentDocumentlink.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/ContentDocumentlink#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceInsertContentDocumentlinkRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceInsertContentDocumentlinkRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Response__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceInsert_ContentDocumentlink.Response _schema = new SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceInsert_ContentDocumentlink.Response();

        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Response__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceInsert_ContentDocumentlink.Response)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Response__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/ContentDocumentlink#Response"
    )]
    [System.SerializableAttribute]
    sealed internal class SalesforceInsertContentDocumentlinkResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Response__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __SBA_DLAPDocumentUpload_SalesForceDefinition_SalesforceInsert_ContentDocumentlink_Response__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public SalesforceInsertContentDocumentlinkResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_SaveRequest__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion.SaveRequest _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion.SaveRequest();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_SaveRequest__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion.SaveRequest)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_SaveRequest__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion#SaveRequest"
    )]
    [System.SerializableAttribute]
    sealed internal class RestContentVersionRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_SaveRequest__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_SaveRequest__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestContentVersionRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_results__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion.results _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion.results();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_results__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion.results)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_results__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion#results"
    )]
    [System.SerializableAttribute]
    sealed internal class RestContentVersionResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_results__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersion_results__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestContentVersionResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_SaveRequest__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink.SaveRequest _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink.SaveRequest();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_SaveRequest__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink.SaveRequest)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_SaveRequest__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink#SaveRequest"
    )]
    [System.SerializableAttribute]
    sealed internal class RestContentDocumentLinkRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_SaveRequest__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_SaveRequest__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestContentDocumentLinkRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_results__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink.results _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink.results();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_results__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink.results)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_results__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink#results"
    )]
    [System.SerializableAttribute]
    sealed internal class RestContentDocumentLinkResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_results__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentDocumentLink_results__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestContentDocumentLinkResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.SaveRequest)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_SaveRequest__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem#SaveRequest"
    )]
    [System.SerializableAttribute]
    sealed internal class RestChecklistItemRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_SaveRequest__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_SaveRequest__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestChecklistItemRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.results)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_results__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem#results"
    )]
    [System.SerializableAttribute]
    sealed internal class RestChecklistItemResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_results__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestChecklistItem_results__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestChecklistItemResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_Request__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery.Request _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery.Request();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_Request__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery.Request)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_Request__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/QUERY/RestContentVersion#Request"
    )]
    [System.SerializableAttribute]
    sealed internal class RestContentVersionQueryRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_Request__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestContentVersionQuery_Request__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestContentVersionQueryRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestEventRequest__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestEventRequest _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestEventRequest();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestEventRequest__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestEventRequest)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestEventRequest__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventRequest#SaveRequest"
    )]
    [System.SerializableAttribute]
    sealed internal class RestEventRequestType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestEventRequest__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestEventRequest__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestEventRequestType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [System.SerializableAttribute]
    sealed public class __DLAPDocumentUploadSalesForceDefinition_Rest_RestEventResponse__ : Microsoft.XLANGs.Core.XSDPart
    {
        private static DLAPDocumentUploadSalesForceDefinition.Rest.RestEventResponse _schema = new DLAPDocumentUploadSalesForceDefinition.Rest.RestEventResponse();

        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestEventResponse__(Microsoft.XLANGs.Core.XMessage msg, string name, int index) : base(msg, name, index) { }

        
        #region part reflection support
        public static Microsoft.XLANGs.BaseTypes.SchemaBase PartSchema { get { return (Microsoft.XLANGs.BaseTypes.SchemaBase)_schema; } }
        #endregion // part reflection support
    }

    [Microsoft.XLANGs.BaseTypes.MessageTypeAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSMessageInfo.eNone,
        "",
        new System.Type[]{
            typeof(DLAPDocumentUploadSalesForceDefinition.Rest.RestEventResponse)
        },
        new string[]{
            "MessagePart"
        },
        new System.Type[]{
            typeof(__DLAPDocumentUploadSalesForceDefinition_Rest_RestEventResponse__)
        },
        0,
        @"http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse#results"
    )]
    [System.SerializableAttribute]
    sealed internal class RestEventResponseType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXMessage
    {
        public __DLAPDocumentUploadSalesForceDefinition_Rest_RestEventResponse__ MessagePart;

        private void __CreatePartWrappers()
        {
            MessagePart = new __DLAPDocumentUploadSalesForceDefinition_Rest_RestEventResponse__(this, "MessagePart", 0);
            this.AddPart("MessagePart", 0, MessagePart);
        }

        public RestEventResponseType(string msgName, Microsoft.XLANGs.Core.Context ctx) : base(msgName, ctx)
        {
            __CreatePartWrappers();
        }
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestApplicationInfoRequestType), 
            typeof(DLAPDocument.RestApplicationInfoResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestApplicationIdQueryPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestApplicationIdQueryPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestApplicationIdQueryPortType(RestApplicationIdQueryPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestApplicationIdQueryPortType p = new RestApplicationIdQueryPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestApplicationIdQueryPortType),
            typeof(RestApplicationInfoRequestType),
            typeof(RestApplicationInfoResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.DocumentUploadRequestType), 
            typeof(DLAPDocument.DocumentUploadResponseType), 
            typeof(DLAPDocument.DocumentUploadFaultResponseType)
        },
        new string[]{
            "Fault"
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class DocumentUploadPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public DocumentUploadPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public DocumentUploadPortType(DocumentUploadPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            DocumentUploadPortType p = new DocumentUploadPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(DocumentUploadPortType),
            typeof(DocumentUploadRequestType),
            typeof(DocumentUploadResponseType),
            new System.Type[]{
                typeof(DocumentUploadFaultResponseType)
            },
            new string[]{
                "Fault"
            }
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestChecklistItemUpdateRequestType), 
            typeof(DLAPDocument.RestChecklistItemUpdateResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestCheckListItemUpdatePortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestCheckListItemUpdatePortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestCheckListItemUpdatePortType(RestCheckListItemUpdatePortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestCheckListItemUpdatePortType p = new RestCheckListItemUpdatePortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestCheckListItemUpdatePortType),
            typeof(RestChecklistItemUpdateRequestType),
            typeof(RestChecklistItemUpdateResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestReceiptDocumentRequestType), 
            typeof(DLAPDocument.RestReceiptDocumentResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestReceiptDocumentInsetPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestReceiptDocumentInsetPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestReceiptDocumentInsetPortType(RestReceiptDocumentInsetPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestReceiptDocumentInsetPortType p = new RestReceiptDocumentInsetPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestReceiptDocumentInsetPortType),
            typeof(RestReceiptDocumentRequestType),
            typeof(RestReceiptDocumentResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestLoanQueryRequestType), 
            typeof(DLAPDocument.RestLoanQueryResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestLoanQueryPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestLoanQueryPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestLoanQueryPortType(RestLoanQueryPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestLoanQueryPortType p = new RestLoanQueryPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestLoanQueryPortType),
            typeof(RestLoanQueryRequestType),
            typeof(RestLoanQueryResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestChecklistItemDocumentDetailsRequestType), 
            typeof(DLAPDocument.RestChecklistItemDocumentDetailsResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestCheckListContentDocumentQueryPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestCheckListContentDocumentQueryPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestCheckListContentDocumentQueryPortType(RestCheckListContentDocumentQueryPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestCheckListContentDocumentQueryPortType p = new RestCheckListContentDocumentQueryPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestCheckListContentDocumentQueryPortType),
            typeof(RestChecklistItemDocumentDetailsRequestType),
            typeof(RestChecklistItemDocumentDetailsResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestContentVersionRequestType), 
            typeof(DLAPDocument.RestContentVersionResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestCheckListItemContentVersionInsertPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestCheckListItemContentVersionInsertPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestCheckListItemContentVersionInsertPortType(RestCheckListItemContentVersionInsertPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestCheckListItemContentVersionInsertPortType p = new RestCheckListItemContentVersionInsertPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestCheckListItemContentVersionInsertPortType),
            typeof(RestContentVersionRequestType),
            typeof(RestContentVersionResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestContentVersionRequestType), 
            typeof(DLAPDocument.RestContentVersionResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestContentVersionInsertPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestContentVersionInsertPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestContentVersionInsertPortType(RestContentVersionInsertPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestContentVersionInsertPortType p = new RestContentVersionInsertPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestContentVersionInsertPortType),
            typeof(RestContentVersionRequestType),
            typeof(RestContentVersionResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestContentVersionQueryRequestType), 
            typeof(DLAPDocument.RestContentVersionQueryResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestContentVersionDocumentIdQueryPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestContentVersionDocumentIdQueryPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestContentVersionDocumentIdQueryPortType(RestContentVersionDocumentIdQueryPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestContentVersionDocumentIdQueryPortType p = new RestContentVersionDocumentIdQueryPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestContentVersionDocumentIdQueryPortType),
            typeof(RestContentVersionQueryRequestType),
            typeof(RestContentVersionQueryResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestContentDocumentLinkRequestType), 
            typeof(DLAPDocument.RestContentDocumentLinkResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestContentDocumentlinkInsertPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestContentDocumentlinkInsertPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestContentDocumentlinkInsertPortType(RestContentDocumentlinkInsertPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestContentDocumentlinkInsertPortType p = new RestContentDocumentlinkInsertPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestContentDocumentlinkInsertPortType),
            typeof(RestContentDocumentLinkRequestType),
            typeof(RestContentDocumentLinkResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }

    [Microsoft.XLANGs.BaseTypes.PortTypeOperationAttribute(
        "Operation",
        new System.Type[]{
            typeof(DLAPDocument.RestEventRequestType), 
            typeof(DLAPDocument.RestEventResponseType)
        },
        new string[]{
        }
    )]
    [Microsoft.XLANGs.BaseTypes.PortTypeAttribute(Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal, "")]
    [System.SerializableAttribute]
    sealed internal class RestEventPortType : Microsoft.BizTalk.XLANGs.BTXEngine.BTXPortBase
    {
        public RestEventPortType(int portInfo, Microsoft.XLANGs.Core.IServiceProxy s)
            : base(portInfo, s)
        { }
        public RestEventPortType(RestEventPortType p)
            : base(p)
        { }

        public override Microsoft.XLANGs.Core.PortBase Clone()
        {
            RestEventPortType p = new RestEventPortType(this);
            return p;
        }

        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        #region port reflection support
        static public Microsoft.XLANGs.Core.OperationInfo Operation = new Microsoft.XLANGs.Core.OperationInfo
        (
            "Operation",
            System.Web.Services.Description.OperationFlow.RequestResponse,
            typeof(RestEventPortType),
            typeof(RestEventRequestType),
            typeof(RestEventResponseType),
            new System.Type[]{},
            new string[]{}
        );
        static public System.Collections.Hashtable OperationsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[ "Operation" ] = Operation;
                return h;
            }
        }
        #endregion // port reflection support
    }
    //#line 2491 "C:\Users\skyeniga\Source\Repos\Biztalk\DLAP Document Upload\DLAP Document Upload Logic\Document Logic.odx"
    [Microsoft.XLANGs.BaseTypes.StaticSubscriptionAttribute(
        0, "DocumentUploadPort", "Operation", -1, -1, true
    )]
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(DLAPDocument.DocumentUploadPortType),
            typeof(DLAPDocument.RestApplicationIdQueryPortType),
            typeof(DLAPDocument.RestLoanQueryPortType),
            typeof(DLAPDocument.RestReceiptDocumentInsetPortType),
            typeof(DLAPDocument.RestCheckListContentDocumentQueryPortType),
            typeof(DLAPDocument.RestCheckListItemUpdatePortType)
        },
        new System.String[] {
            "DocumentUploadPort",
            "RestApplicationIdQueryPort",
            "RestLoanQueryPort",
            "RestReceiptDocumentInsetPort",
            "RestCheckListContentDocumentQueryPort",
            "RestCheckListItemUpdatePort"
        },
        new System.Type[] {
            null,
            null,
            null,
            null,
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
            typeof(DLAPDocument.UploadChildLogic),
            typeof(DLAPDocument.UploadChildLogic),
            typeof(DLAPDocument.UploadUpdatingCheckListItemDocumentProccessingLogic),
            typeof(DLAPDocument.UploadChildLogic),
            typeof(DLAPDocument.UploadEventRequest),
            typeof(DLAPDocument.UploadEventRequest)
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eNone
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class UploadParentLogic : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eHasRequestResponse
,
            new System.String[] {
                "DLAPDocument.UploadChildLogic",
                "DLAPDocument.UploadChildLogic",
                "DLAPDocument.UploadUpdatingCheckListItemDocumentProccessingLogic",
                "DLAPDocument.UploadChildLogic",
                "DLAPDocument.UploadEventRequest",
                "DLAPDocument.UploadEventRequest"
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy()
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(UploadParentLogic));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return true; } }

        internal bool IsExeced = false;

        static UploadParentLogic()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment2), 1, 2, 2),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment3), 1, 2, 3),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment4), 1, 3, 4),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment5), 1, 2, 5),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment6), 1, 4, 6),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment7), 1, 2, 7)
            };

            _Locks = 43;
            _rootContext = new __UploadParentLogic_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[11];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public UploadParentLogic(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "UploadParentLogic", tracker)
        {
            ConstructorHelper();
        }

        public UploadParentLogic(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "UploadParentLogic")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>94f062a0-e4ed-48e5-9f0f-841984d7773c</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>6f6a94fc-c37d-4d66-88e6-134e1022dea8</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>DLAP Document Upload</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>6cdb4b01-7d0f-41b6-b317-85aa0c028995</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Document Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>1d5bce14-9cc5-493d-a7b6-41a27b6d0e5b</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Document Upload Processing Error Scope</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>eb857257-5ac5-4d1d-a878-2ecd591e600e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Applicant ID Request Message</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>46085f98-5ee9-44ed-8f3a-767493e4a5a7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make SF Search Applicant ID Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>7c3e1c19-26f2-4e23-95ec-2a2bdd1b120b</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>c52f0f18-bbbb-404a-9aa9-0a6e149f4c89</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>4d97d773-47e1-4b61-8047-32d83b002caf</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make SOQL</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>11584287-7281-4c64-8af2-b398a1838fe0</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>32870cd1-9e5a-4e68-ba45-e016938d1da5</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send External Applicant ID Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>00a593ff-dc6e-4a01-a73a-bf0f81420453</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive SF Applicant ID Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>f3e1b349-3856-46be-a56c-fe95d7c84236</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Validating DocApplicantId and DocContent Values</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>aea2b1c3-f70d-456e-bbb9-e65674a7f5fb</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Application Exists?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>1d4851fa-d4bb-4f71-bf8e-ae89cf93d25d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Exists </shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParallelShape</shapeType>      <ShapeID>5968b282-cb3e-4ab8-9274-cc0e29665eb6</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Parallel Document Processing</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParallelBranchShape</shapeType>      <ShapeID>8b5f5660-ded0-40be-a76d-3e594efcfb03</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>ParallelBranch_3</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>f64c14db-fe25-47d8-a1ec-353e35f84d20</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Document Processing Without Check List Item</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>b73de793-2243-4efa-b541-530630b13fe4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Document Metadata Exists?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>cfc5d581-bf59-4772-83a1-0e4bd37a0e27</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Receipt Meta Data</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>653f6c1d-001f-4afc-9cb4-260141371fcd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Receipt Meta Data and Loan Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>1584fb1d-2197-41b8-83d9-05fc5e8c111c</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>a0bd11fc-8ba0-4fe5-b9d0-188815a05f77</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>4c746bf9-f190-47f6-a2cc-ce31e7bf52d8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>MessageAssignment_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>c306c1b1-2f3b-4e10-b0a7-ca35040c3413</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Loan Request Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>b6ccb1d4-93aa-432a-82b0-bfe64672bf18</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_8</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>3f655ef0-a4bb-4960-8b16-bb0653c8e6c5</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_7</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>8f1cbb9f-1b93-48ac-82fc-afa567bb2135</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make SOQL</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>c603d4d2-c04b-4bae-8047-d17c96b71815</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Loan Request Msg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>844cc5cf-0dfb-40e4-aa0d-388e93fd01e0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Loan Response Msg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>68e99b21-8d70-48be-ae7e-0a7fe44b2cb8</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Extract Loan</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>6e6b0685-d971-4990-8e1a-c6c2365d4297</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Loan Number Exists </shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>f19a202b-e3c5-4740-9c9b-c9010619f1f3</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Valid Loan Number</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>2b3b8436-c7b3-4809-ada5-d3264e00898a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Loan Request Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>ca087598-ce11-4ec5-ac17-1241e85970f1</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Receipt Document Request  Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>5bd12e43-f641-47e8-8141-229e93d61eaf</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_9</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>66bb9622-c2c4-495a-b9ad-cf237dd022ce</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_10</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>433da016-3007-4073-9874-ac597e2e6db0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Inject Loan SFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>db445253-c6c1-4468-8d2e-3863e436f7d2</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>dcf557aa-cefe-462b-b5d1-7ae0fab8e62c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Receipt Document Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>7a47b4b6-331e-4c6c-a010-128ccb3e982c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Receipt Document Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>3e544756-1c0d-4436-baf3-8fdf01c1a5b2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Extract Receipt Document SFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>748c57bf-ae22-4eb0-8690-20e038dc3340</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Valid Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>1f6340e2-4024-4414-be1b-d8b9813b244d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>f425504d-980f-42b0-bc27-c73efe57562c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ThrowShape</shapeType>      <ShapeID>170b70a1-d0f8-4eeb-8499-858ab1dece05</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Error </shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>9db62a1e-2d74-42b9-b523-d60074a7fa60</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>c7df9373-bb19-4748-ac1d-16837666c0b9</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Call Document Processing Orchestration</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>c793f327-9838-48b7-a7d0-a0a02c909e10</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6d1fa622-803c-4189-9ce1-3aeb1d458ba3</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>RECEIPTDOCUMENT_ID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>f9fb01c9-9ac4-4674-b50c-729e04c5ddb4</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Empty</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>19460484-2422-477b-9c3c-930eef5a40ba</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ContentDocumentlinkSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>78e2006d-ed70-4946-bd80-bd70cbac0692</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>f2118d4c-d81a-4c3c-bf45-11322a0289dc</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6bf60d74-574b-453b-a9d4-3fbe9f60f992</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocumentUploadResponseMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>abd5b6c1-a7ff-4837-9828-219f4e4d6dc3</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocumentUploadRequestMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>0dbf4622-494b-46cf-b761-d037cd8b77db</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>CheckListItemFlag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>2b428ccb-1f56-4c26-92a9-43febd316db4</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>CheckListResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>0032df9b-e06a-461c-a17b-59fed2c2c4e3</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>78699d93-ce52-4af1-9ed1-dce39fecd976</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Document Error Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>fce455d6-e544-4bc6-ba3c-bc62d3485b6d</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>918de24f-b712-45a7-a3a3-42f987397347</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Document Error Response Msg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>f8a4d0f2-4220-4d4f-984b-a98ecaf6088c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Error Values For Salesforce</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>69488dc6-4149-4b73-9510-d840db4a5b1c</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>3e82c6e5-7b51-4706-9e11-227b98b2c528</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>CheckList Item Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>01479499-ba17-40bc-ab88-f1328daea0e2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Call Document Processing Orchestration</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>06e3f9c5-53f0-41b3-a9aa-297cf361c016</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>fa43fa32-fded-44f2-92cb-dface436c553</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>RECEIPTDOCUMENT_ID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>ac547dae-de68-49f9-a91b-f93ee5c1e9e3</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Empty</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>e4f67569-ff7c-42e7-a969-1033d4b6a3e3</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ContentDocumentlinkSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>d068c257-b15b-42bd-a761-ed616867c2be</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>02ab0d1d-63fd-4f7f-9ef1-3239f1e7a7ea</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>1c58573a-831c-4e69-84c1-d2042077e152</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocumentUploadResponseMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>55e1ef1b-07c4-44d9-adce-716176650904</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocumentUploadRequestMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>881fa7e2-817e-4b90-a6a5-82ec58404f48</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>CheckListItemFlag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>da8d56a4-bbe2-4337-a3ed-04239eca3514</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>CheckListResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParallelBranchShape</shapeType>      <ShapeID>784a5634-d83a-453d-bb60-04df24981ce4</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>ParallelBranch_4</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ScopeShape</shapeType>      <ShapeID>62004d06-e837-426a-8c98-1a4e7ebe55b9</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Document Processing With CheckList Item</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>7149b1d3-f7da-45ac-aca8-8029f1f00803</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>CheckList Item SFID Exists?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>f9f0d72f-c734-48b0-83df-790878891e54</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>CheckList Item</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>3b32c034-68ad-4e02-b6bc-e932b2889a48</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Validate Document Exists on CheckList Item</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>f6993634-de1c-404b-b1f0-dd4940bc3ada</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Content DocumentLink Select CheckList Item Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>dabfa97c-4a41-4d16-b661-950cb4816c84</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_5</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>a33f2ecd-2df7-40af-b2c9-e1d1a0b7aaaf</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_6</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>970a1f2b-8679-4456-b25b-a75e479a1621</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make SOQL</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>42bc8a50-9eaf-4a4c-bb8f-a72cb7034274</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>b51ab617-4c1d-4bde-a6dd-3716ccdafc5d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Content Version Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>9bb29ffc-1fa7-4ef0-8625-c7c553fa124d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Checklist Item Document Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>6a957d47-0636-4cec-9633-983e36832521</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Validating Checklits Item with Document</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>083779eb-2fb2-4975-acd8-0632eada672d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Checklits Item Exists with Document?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>16521e19-a3f4-4f0e-901b-4fe417b9436e</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>CheckList Contains Document</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>fb894cf1-41cb-4c73-a856-98ae84e5beb5</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Call Updating CheckList Item Document Proccessing Logic</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>7fe70878-1611-4093-8348-f36aadf279b8</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocumentUploadResponseMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>66091f27-9845-474c-bbf9-4323fb115b33</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocumentUploadRequestMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>2a0b1ab7-b838-4fab-af09-4a7a174ff6fd</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>fc08e229-60a3-47d8-adc5-68bc2b82880b</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>CheckListResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>b16078ab-2e68-43e6-b799-918029ba74b0</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocCheckListItemSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>4d18eb53-ab2d-44c5-a720-7350a57eb1b1</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ExistedCheckListItemDocumentContentSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>2a19c504-a56b-4386-80d1-72acdc9811a7</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>65101213-93c3-4fc8-a143-7d85dd7d0f23</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Call Document Processing Orchestration</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>eec0a4c0-33ed-4f52-8c70-1eefee598175</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Empty</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>8ca2eaeb-d973-4ff0-bbd6-4486bf5778bf</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Empty</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>d426fcf3-f106-4abc-ab5a-a275d2a4d4b0</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocCheckListItemSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6f0369a3-beba-4cb7-9ffd-bf7c5f3c4ff5</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ContentDocumentlinkSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6e37255a-95e6-4703-8e76-e17cc5744cb3</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>05498f43-3bb2-4417-b630-7bf9068bece5</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>25d4ee3c-7c97-463c-986e-b0bbeae6fdc6</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocumentUploadResponseMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>cc680b82-1ec5-4d3f-b969-f04dfd35b7ae</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>DocumentUploadRequestMsg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>5386d549-a9c4-4a71-971f-84c6840937c4</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>CheckListItemFlag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>43ed55c4-ee9b-4206-9025-9fe89c3f2dc1</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>CheckListResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>6fd0fc6e-e5db-4104-9ca2-65b4cfbcf2c5</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>edbe7f9b-24b2-4882-ac1d-c6e4a2658447</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>990bffb8-2acd-44e5-a5fe-3442f1daf522</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Error Document Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>aa683018-93b4-489b-9755-9b414f46e8d3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Document Error Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>b70d0c94-5736-4985-bf61-445640df8d8e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Document Error Response Msg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>80bc1d84-111e-4bd1-8802-e076ec17c282</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>bf700bcc-c26d-4669-98da-1365d4e6de45</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Error Values For Salesforce</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>b020d6d5-e782-4437-8d03-2e6cd8d0420a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Decide Event Status</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>cf7b41db-6202-4886-9d8a-146c08a20849</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Success Event</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>8c8395f0-500a-4966-9504-f7c3962b8049</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Check List Item Exist?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>4888834b-286a-4cda-b132-b93a5ab5379d</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Valid CheckList Item</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>22f236be-2203-4d54-8927-940430615854</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct CheckListItem Update Request Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>40e397fb-13ec-4661-95aa-fdd58705ac7f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make CheckList Item Update Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>939814ed-1682-4a08-90d5-35a8084c2907</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_4</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>5edc16d9-0f52-47d0-8454-96cc890b72d2</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_3</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>cae9c687-b9da-4e40-9457-41268c8e42a0</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>d3b559f2-c3a4-4c02-8525-eec6113794d0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send CheckList Item Update Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>b1327f04-c213-490c-9ef4-c4ae4706fbf2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive CheckList Item Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>c36020a1-7200-4f52-9064-c218d3b2b115</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Extract Rest Response Values</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>43333bdd-d4a4-4d41-be13-3cb02bee5426</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Valid Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>02978cff-7040-4e15-9985-c9a75dff7510</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>327d9500-082c-4950-9cd0-2608a6277124</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ThrowShape</shapeType>      <ShapeID>2cde09a1-9b41-4859-947e-15f9f8f37630</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Error </shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>ded1f340-960d-4395-b944-189ba2348d31</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>6e6f9e90-9255-48b2-9662-4f2a09628bdc</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>7740c3e1-c54c-4f33-842b-a13e512a50e5</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Success Values For Salesforce</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>14c0b1a0-a67d-4ff4-a2c7-0028a81add6b</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>ada471d7-cb3a-48f6-bc63-a51150f9bea7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Set Error Values For Salesforce</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CatchShape</shapeType>      <ShapeID>00b68701-1c9c-4a27-942a-af2d766b3340</ShapeID>      <ParentLink>Scope_Catch</ParentLink>                <shapeText>System Exception</shapeText>                      <ExceptionType>System.Exception</ExceptionType>            
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>d8362836-01b5-47a4-94ab-dc42abeaf90c</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Set Error Values For Salesforce</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>0c6969d3-155f-4f72-a714-179417935893</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Construct Document Upload Fault Response Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>627973a9-c27c-4ac5-b9c6-da5f485240f3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Document Upload Fault Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>b6ac2f1d-ece2-497f-8597-c3ad050adf26</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>fb9c136f-ae5d-4f55-aafc-e4649c4bc821</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Send Document Upload Fault Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>5764a00c-21c0-4342-a654-3a159ef2a9e4</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Call SalesForce Event Logging Orchestration</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>55a7387a-e168-49f2-93b1-cc0b22b8b316</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>7914393b-e6fd-4806-a75a-631f47c82204</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesForceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6d478853-5033-426f-a99a-b02d34679c55</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>99f4002f-6849-4ff9-a691-1d755a54de33</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesForceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>a3e73244-2323-45c0-88d4-3b5f06e84d3a</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>02287db7-3e5c-4ce8-a317-ada789b1238b</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>1d05305e-00fe-4e9a-a59c-3121b19042c4</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Empty</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>6983c408-55fe-45a2-9e6a-cce477e94f99</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>135509e6-3bc5-4be0-b621-38ab6db3eb90</ShapeID>      <ParentLink>Catch_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>019728bc-357d-47d9-bf2f-6708c3ae5e4d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Success or Error Response?</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>418e83cb-d05b-42b2-b615-1c2fd013c5ba</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>DLAP Success Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>5dd0f130-68c0-405f-a7e7-e0b2960bc932</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Document Success Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>81d1f4d4-62bf-4e29-b028-109742a5c8fb</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>9b258b29-3623-42b2-98a0-6719e768f3ff</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Document Success Response Msg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>a54fc175-cbef-46dc-84b6-278a5b818c27</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>f263f485-9bb4-4197-a6aa-de1fb059be25</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Document Error Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>c17568f6-15b9-4969-a78e-712151782062</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>953f9595-2996-4805-91a1-6dea7bc18f07</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Document Error Response Msg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>092d5d55-4599-4602-9664-2674f9fb7a38</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Document Upload Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>CallShape</shapeType>      <ShapeID>84453f61-57a9-4fd0-8ecb-a9af8852e9c7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Call SalesForce Event Logging Orchestration</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>b17067b2-ad92-4dd1-bcc3-954b14915456</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>ApplicationNumber</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>8b3bfdf0-aee4-40c4-aded-710cdd6a9f20</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesForceObjectId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>848785ba-0c36-4559-a783-2b4ae27ae14b</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Message</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>beace6e8-568f-4195-bcc9-b03a03c63b18</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>SalesForceObjectName</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>b6e5c89f-8bdf-4889-80e6-451938cbef5d</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Stage</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>8bb23e61-1e07-4448-b8d9-dbcb96f3a1a1</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Status</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>5bf7d3a9-a9a0-45c8-ae96-04379c9894a0</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>Empty</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ParameterShape</shapeType>      <ShapeID>5b441b29-71be-4f42-9d57-b1b96764766f</ShapeID>      <ParentLink>InvokeStatement_Parameter</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'UploadParentLogic'</ActionName><IsAtomic>0</IsAtomic><Line>2491</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
</TrkMetadata>

<TrkMetadata>
<Line>2595</Line><Position>22</Position><ShapeID>'6cdb4b01-7d0f-41b6-b317-85aa0c028995'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadRequestMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope36'</ActionName><IsAtomic>0</IsAtomic><Line>2651</Line><Position>13</Position><ShapeID>'1d5bce14-9cc5-493d-a7b6-41a27b6d0e5b'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2656</Line><Position>21</Position><ShapeID>'eb857257-5ac5-4d1d-a878-2ecd591e600e'</ShapeID>
<Messages>
	<MsgInfo><name>RestRestApplicationInfoRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo+Request</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>DocumentUploadRequestMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2672</Line><Position>21</Position><ShapeID>'32870cd1-9e5a-4e68-ba45-e016938d1da5'</ShapeID>
<Messages>
	<MsgInfo><name>RestRestApplicationInfoRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo+Request</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2674</Line><Position>21</Position><ShapeID>'00a593ff-dc6e-4a01-a73a-bf0f81420453'</ShapeID>
<Messages>
	<MsgInfo><name>RestRestApplicationInfoResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo+QueryResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2678</Line><Position>38</Position><ShapeID>'f3e1b349-3856-46be-a56c-fe95d7c84236'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2700</Line><Position>21</Position><ShapeID>'aea2b1c3-f70d-456e-bbb9-e65674a7f5fb'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2703</Line><Position>25</Position><ShapeID>'5968b282-cb3e-4ab8-9274-cc0e29665eb6'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope37'</ActionName><IsAtomic>0</IsAtomic><Line>2708</Line><Position>33</Position><ShapeID>'f64c14db-fe25-47d8-a1ec-353e35f84d20'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2713</Line><Position>41</Position><ShapeID>'b73de793-2243-4efa-b541-530630b13fe4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2716</Line><Position>45</Position><ShapeID>'653f6c1d-001f-4afc-9cb4-260141371fcd'</ShapeID>
<Messages>
	<MsgInfo><name>UploadMetaDataMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadDefinition.UploadMetaData</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>RestLoanQueryRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery+Request</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>UploadMetaDataMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadDefinition.UploadMetaData</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2742</Line><Position>45</Position><ShapeID>'c603d4d2-c04b-4bae-8047-d17c96b71815'</ShapeID>
<Messages>
	<MsgInfo><name>RestLoanQueryRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery+Request</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2744</Line><Position>45</Position><ShapeID>'844cc5cf-0dfb-40e4-aa0d-388e93fd01e0'</ShapeID>
<Messages>
	<MsgInfo><name>RestLoanQueryResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery+QueryResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2746</Line><Position>54</Position><ShapeID>'68e99b21-8d70-48be-ae7e-0a7fe44b2cb8'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2748</Line><Position>45</Position><ShapeID>'6e6b0685-d971-4990-8e1a-c6c2365d4297'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2751</Line><Position>49</Position><ShapeID>'2b3b8436-c7b3-4809-ada5-d3264e00898a'</ShapeID>
<Messages>
	<MsgInfo><name>RestReceiptDocumentRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument+SaveRequest</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>UploadMetaDataMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadDefinition.UploadMetaData</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2760</Line><Position>49</Position><ShapeID>'dcf557aa-cefe-462b-b5d1-7ae0fab8e62c'</ShapeID>
<Messages>
	<MsgInfo><name>RestReceiptDocumentRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument+SaveRequest</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2762</Line><Position>49</Position><ShapeID>'7a47b4b6-331e-4c6c-a010-128ccb3e982c'</ShapeID>
<Messages>
	<MsgInfo><name>RestReceiptDocumentResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument+results</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2765</Line><Position>67</Position><ShapeID>'3e544756-1c0d-4436-baf3-8fdf01c1a5b2'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2775</Line><Position>49</Position><ShapeID>'748c57bf-ae22-4eb0-8690-20e038dc3340'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2778</Line><Position>74</Position><ShapeID>'f425504d-980f-42b0-bc27-c73efe57562c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2780</Line><Position>53</Position><ShapeID>'170b70a1-d0f8-4eeb-8499-858ab1dece05'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2783</Line><Position>84</Position><ShapeID>'c7df9373-bb19-4748-ac1d-16837666c0b9'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>DocumentUploadRequestMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2788</Line><Position>49</Position><ShapeID>'78699d93-ce52-4af1-9ed1-dce39fecd976'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2799</Line><Position>67</Position><ShapeID>'f8a4d0f2-4220-4d4f-984b-a98ecaf6088c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2819</Line><Position>63</Position><ShapeID>'3e82c6e5-7b51-4706-9e11-227b98b2c528'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2821</Line><Position>80</Position><ShapeID>'01479499-ba17-40bc-ab88-f1328daea0e2'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>DocumentUploadRequestMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<ActionName>'??__scope38'</ActionName><IsAtomic>0</IsAtomic><Line>2829</Line><Position>33</Position><ShapeID>'62004d06-e837-426a-8c98-1a4e7ebe55b9'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2834</Line><Position>41</Position><ShapeID>'7149b1d3-f7da-45ac-aca8-8029f1f00803'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2837</Line><Position>45</Position><ShapeID>'3b32c034-68ad-4e02-b6bc-e932b2889a48'</ShapeID>
<Messages>
	<MsgInfo><name>RestChecklistItemDocumentDetailsRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails+Request</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>DocumentUploadRequestMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2849</Line><Position>45</Position><ShapeID>'b51ab617-4c1d-4bde-a6dd-3716ccdafc5d'</ShapeID>
<Messages>
	<MsgInfo><name>RestChecklistItemDocumentDetailsRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails+Request</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2851</Line><Position>45</Position><ShapeID>'9bb29ffc-1fa7-4ef0-8625-c7c553fa124d'</ShapeID>
<Messages>
	<MsgInfo><name>RestChecklistItemDocumentDetailsResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails+QueryResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2855</Line><Position>85</Position><ShapeID>'6a957d47-0636-4cec-9633-983e36832521'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2864</Line><Position>45</Position><ShapeID>'083779eb-2fb2-4975-acd8-0632eada672d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2867</Line><Position>119</Position><ShapeID>'fb894cf1-41cb-4c73-a856-98ae84e5beb5'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>DocumentUploadRequestMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2872</Line><Position>84</Position><ShapeID>'65101213-93c3-4fc8-a143-7d85dd7d0f23'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>DocumentUploadRequestMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2878</Line><Position>50</Position><ShapeID>'edbe7f9b-24b2-4882-ac1d-c6e4a2658447'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2890</Line><Position>25</Position><ShapeID>'aa683018-93b4-489b-9755-9b414f46e8d3'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2901</Line><Position>43</Position><ShapeID>'bf700bcc-c26d-4669-98da-1365d4e6de45'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2918</Line><Position>21</Position><ShapeID>'b020d6d5-e782-4437-8d03-2e6cd8d0420a'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2921</Line><Position>25</Position><ShapeID>'8c8395f0-500a-4966-9504-f7c3962b8049'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2924</Line><Position>29</Position><ShapeID>'22f236be-2203-4d54-8927-940430615854'</ShapeID>
<Messages>
	<MsgInfo><name>RestChecklistItemUpdateRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem+SaveRequest</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>DocumentUploadRequestMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2930</Line><Position>29</Position><ShapeID>'d3b559f2-c3a4-4c02-8525-eec6113794d0'</ShapeID>
<Messages>
	<MsgInfo><name>RestChecklistItemUpdateRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem+SaveRequest</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2932</Line><Position>29</Position><ShapeID>'b1327f04-c213-490c-9ef4-c4ae4706fbf2'</ShapeID>
<Messages>
	<MsgInfo><name>RestChecklistItemUpdateResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem+results</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2934</Line><Position>60</Position><ShapeID>'c36020a1-7200-4f52-9064-c218d3b2b115'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2938</Line><Position>29</Position><ShapeID>'43333bdd-d4a4-4d41-be13-3cb02bee5426'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2941</Line><Position>66</Position><ShapeID>'327d9500-082c-4950-9cd0-2608a6277124'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2943</Line><Position>33</Position><ShapeID>'2cde09a1-9b41-4859-947e-15f9f8f37630'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2947</Line><Position>43</Position><ShapeID>'7740c3e1-c54c-4f33-842b-a13e512a50e5'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2966</Line><Position>49</Position><ShapeID>'ada471d7-cb3a-48f6-bc63-a51150f9bea7'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2974</Line><Position>21</Position><ShapeID>'00b68701-1c9c-4a27-942a-af2d766b3340'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>2977</Line><Position>25</Position><ShapeID>'d8362836-01b5-47a4-94ab-dc42abeaf90c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3024</Line><Position>25</Position><ShapeID>'0c6969d3-155f-4f72-a714-179417935893'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadFaultResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUploadFault</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3035</Line><Position>25</Position><ShapeID>'fb9c136f-ae5d-4f55-aafc-e4649c4bc821'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadFaultResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUploadFault</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3037</Line><Position>62</Position><ShapeID>'5764a00c-21c0-4342-a654-3a159ef2a9e4'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3039</Line><Position>25</Position><ShapeID>'135509e6-3bc5-4be0-b621-38ab6db3eb90'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3044</Line><Position>13</Position><ShapeID>'019728bc-357d-47d9-bf2f-6708c3ae5e4d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3047</Line><Position>17</Position><ShapeID>'5dd0f130-68c0-405f-a7e7-e0b2960bc932'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3061</Line><Position>17</Position><ShapeID>'f263f485-9bb4-4197-a6aa-de1fb059be25'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3073</Line><Position>13</Position><ShapeID>'092d5d55-4599-4602-9664-2674f9fb7a38'</ShapeID>
<Messages>
	<MsgInfo><name>DocumentUploadResponseMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>3075</Line><Position>50</Position><ShapeID>'84453f61-57a9-4fd0-8ecb-a9af8852e9c7'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='cf153439-732a-4443-86ec-d9a86f132b95' LowerBound='1.1' HigherBound='735.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='DLAPDocument' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='PortType' OID='fc8a172f-d5d6-4466-ad54-16e876a66c3c' ParentLink='Module_PortType' LowerBound='104.1' HigherBound='111.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestApplicationIdQueryPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='3fafed0f-f84f-47f1-a5d7-987cfcb2cb90' ParentLink='PortType_OperationDeclaration' LowerBound='106.1' HigherBound='110.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='ffa98259-b173-4f9e-b750-a320aa9728a5' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='108.13' HigherBound='108.43'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestApplicationInfoRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='4c2975d9-2093-4486-b6d5-5a179827e978' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='108.45' HigherBound='108.76'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestApplicationInfoResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='35224945-4a7e-4fcd-9178-da0aa3b15db2' ParentLink='Module_PortType' LowerBound='111.1' HigherBound='118.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='DocumentUploadPortType' />
            <om:Property Name='Signal' Value='False' />
            <om:Element Type='OperationDeclaration' OID='a6607325-9e52-4e2d-a4a0-c1ac720e594a' ParentLink='PortType_OperationDeclaration' LowerBound='113.1' HigherBound='117.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='bef711db-6295-4357-9605-6076fb066748' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='115.13' HigherBound='115.38'>
                    <om:Property Name='Ref' Value='DLAPDocument.DocumentUploadRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='MessageRef' OID='62413c4c-e747-439d-b9de-75ffa56b3bc3' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='115.40' HigherBound='115.66'>
                    <om:Property Name='Ref' Value='DLAPDocument.DocumentUploadResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='MessageRef' OID='be3ec1e3-3356-440c-a0b8-100a2e37e489' ParentLink='OperationDeclaration_FaultMessageRef' LowerBound='115.68' HigherBound='115.107'>
                    <om:Property Name='Ref' Value='DLAPDocument.DocumentUploadFaultResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Fault' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='9cdf0073-1541-493b-b225-62ae0b2b953f' ParentLink='Module_PortType' LowerBound='118.1' HigherBound='125.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestCheckListItemUpdatePortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='d3628cb1-63cf-489c-98f7-fcadfd8aa6c9' ParentLink='PortType_OperationDeclaration' LowerBound='120.1' HigherBound='124.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='46446c45-73b5-47ca-8a01-a1e962aa28f9' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='122.13' HigherBound='122.47'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestChecklistItemUpdateRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='033de120-da80-43ab-b938-a94ca775c279' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='122.49' HigherBound='122.84'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestChecklistItemUpdateResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='72372fc5-71c6-4023-8934-269405ba49fd' ParentLink='Module_PortType' LowerBound='125.1' HigherBound='132.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestReceiptDocumentInsetPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='91f60fae-d312-4071-98ec-2bf7f5e8ae10' ParentLink='PortType_OperationDeclaration' LowerBound='127.1' HigherBound='131.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='bd301394-945a-4595-afdf-4c11a07d7cf5' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='129.13' HigherBound='129.43'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestReceiptDocumentRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='f27f1591-8fed-4143-b3fd-2cc865eae26e' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='129.45' HigherBound='129.76'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestReceiptDocumentResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='672eb3a7-0ffa-4aa3-828c-5c3e54f5e9c1' ParentLink='Module_PortType' LowerBound='132.1' HigherBound='139.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestLoanQueryPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='4b14bcaf-a113-458d-9ef0-e4ba44259f33' ParentLink='PortType_OperationDeclaration' LowerBound='134.1' HigherBound='138.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='ea18f617-7ac8-4365-9050-cae97bb8fbb9' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='136.13' HigherBound='136.37'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestLoanQueryRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='0c5ac303-edf0-4232-bd9d-f67a78b8a2c2' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='136.39' HigherBound='136.64'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestLoanQueryResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='13495d7b-a929-45fd-b603-04e0eb85f9c6' ParentLink='Module_PortType' LowerBound='139.1' HigherBound='146.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestCheckListContentDocumentQueryPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='1a9bf391-1efd-47bf-82ef-dd06b796c996' ParentLink='PortType_OperationDeclaration' LowerBound='141.1' HigherBound='145.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='b71e87c4-c010-4c4a-82a9-75f27c125190' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='143.13' HigherBound='143.56'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestChecklistItemDocumentDetailsRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='367bf024-afe5-42d4-92bc-1d3b2029e157' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='143.58' HigherBound='143.102'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestChecklistItemDocumentDetailsResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='2b3bbab5-8144-419b-81ce-f818515d1321' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestReceiptDocumentResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='67509c18-b724-4ad1-be6c-efc3aee89ab4' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument.results' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='b4a5980c-5a01-4510-93a6-c3430e189939' ParentLink='Module_MessageType' LowerBound='8.1' HigherBound='12.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestReceiptDocumentRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='2df00d77-e7df-4a11-bc95-83cdc8e0f264' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='10.1' HigherBound='11.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestReceiptDocument.SaveRequest' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='9d4e0da7-e9d4-413a-bebf-8671ee65f226' ParentLink='Module_MessageType' LowerBound='12.1' HigherBound='16.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestLoanQueryResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='1daf3a62-da89-46b5-85de-bac49b7bf144' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='14.1' HigherBound='15.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery.QueryResult' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='a94dd589-b05c-47e0-901c-aaac90299d9a' ParentLink='Module_MessageType' LowerBound='16.1' HigherBound='20.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestLoanQueryRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='4cd70217-d3d4-4344-9778-c637b8965f4a' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='18.1' HigherBound='19.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestLoanQuery.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='75b98800-d52e-47c7-a9b6-e6ab93a1b51f' ParentLink='Module_MessageType' LowerBound='20.1' HigherBound='24.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='DocumentUploadRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='ea2645db-dc32-42e2-9f53-39150fd78440' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='22.1' HigherBound='23.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.Definition.DocumentUpload.DOCUMENT' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='fe9e1732-28b9-4f53-854e-f8ddf10c1578' ParentLink='Module_MessageType' LowerBound='24.1' HigherBound='28.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryApplicationIdRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='958e828a-c92a-47db-9a3b-3b03e7a2a203' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='26.1' HigherBound='27.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_Application__c.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='e520fc8d-7054-4c66-a491-e7b0fe97cef7' ParentLink='Module_MessageType' LowerBound='28.1' HigherBound='32.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryApplicationIdResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='c7958a2d-fe96-4d5f-b358-34fea515202e' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='30.1' HigherBound='31.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_Application__c.Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='af2fea9e-421c-4419-99f6-03b2b4786936' ParentLink='Module_MessageType' LowerBound='32.1' HigherBound='36.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='DocumentUploadResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='d012e902-2f5a-4125-9e90-a858cc5dc6b8' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='34.1' HigherBound='35.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.Definition.DocumentUpload.DOCUMENTRESPONSE' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='7eb0ac23-4795-4117-9abb-bce638bf4c46' ParentLink='Module_MessageType' LowerBound='36.1' HigherBound='40.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='ContentLinkRequestInfoType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='c0e61648-9c71-46e1-86e5-6a61fb8b18df' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='38.1' HigherBound='39.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.Definition.ContentLinkRequestInfo' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='3f504558-b0ec-4cb0-8528-ea8a928bde2b' ParentLink='Module_MessageType' LowerBound='40.1' HigherBound='44.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='DocumentUploadFaultResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='7cd2d969-07ad-4b85-9385-ddbb464fa3bf' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='42.1' HigherBound='43.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.Definition.DocumentUploadFault' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='296ccb4b-1b06-4801-b066-11e269aebd06' ParentLink='Module_MessageType' LowerBound='44.1' HigherBound='48.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryCheckListItemRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='1f7adafb-ecf5-4622-bdaf-7b54f0622e04' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='46.1' HigherBound='47.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.SalesforceUpdate_CheckList_Item__c.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='699465db-54b1-4afc-9a6f-dc46beb4eb6f' ParentLink='Module_MessageType' LowerBound='48.1' HigherBound='52.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryCheckListItemResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='d97f6665-a59c-4943-bf10-a3a54b2de8d7' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='50.1' HigherBound='51.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.SalesforceUpdate_CheckList_Item__c.Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='93eb5937-f9f8-40b3-aac4-bb4080c95fc6' ParentLink='Module_MessageType' LowerBound='52.1' HigherBound='56.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='UploadMetaDataType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='d4ef475a-2898-47af-8f02-eba0028d2932' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='54.1' HigherBound='55.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadDefinition.UploadMetaData' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='0459b95a-a567-4dc6-a2c8-9601c17647f5' ParentLink='Module_MessageType' LowerBound='56.1' HigherBound='60.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryReceiptDocumentRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='b4a9fbb3-a2b7-4297-bfce-0b4a6ca8999f' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='58.1' HigherBound='59.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_ReceiptDocument__c.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='False' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='4cbc2e69-9453-4392-8a07-c6fa726c7510' ParentLink='Module_MessageType' LowerBound='60.1' HigherBound='64.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryReceiptDocumentResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='9911b2fb-8be5-4859-a735-27f5b0c4f4ee' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='62.1' HigherBound='63.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_ReceiptDocument__c.Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='bee12aa4-e255-465e-81d0-0b0ef2ac84e3' ParentLink='Module_MessageType' LowerBound='64.1' HigherBound='68.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryLoanRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='20cefcd6-09ea-4e0e-92c7-91129389174b' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='66.1' HigherBound='67.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_Loan__c.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='False' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='b3281cab-e10e-47d9-834f-8516220761ad' ParentLink='Module_MessageType' LowerBound='68.1' HigherBound='72.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryLoanResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='19eeaa14-4346-4684-9286-fc5fa4217beb' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='70.1' HigherBound='71.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_Loan__c.Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='4753c379-125f-4101-b251-0a3a797987b5' ParentLink='Module_MessageType' LowerBound='72.1' HigherBound='76.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryCheckListItemContentIdRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='88fc1b79-5b8b-474d-8efd-c5528229ea8a' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='74.1' HigherBound='75.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_CheckListItemContentId__c.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='5c238250-2eb9-4092-a17a-5083c2c2fad2' ParentLink='Module_MessageType' LowerBound='76.1' HigherBound='80.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryCheckListItemContentIdResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='69d0f57e-0148-4f63-a987-4d0598d98155' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='78.1' HigherBound='79.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.SalesforceQuery_CheckListItemContentId__c.Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='d6a90441-6904-43cb-865f-57d01752d07b' ParentLink='Module_MessageType' LowerBound='80.1' HigherBound='84.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestChecklistItemDocumentDetailsRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='5145322c-b68f-4fb7-95d9-4c39d871860d' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='82.1' HigherBound='83.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='428df936-89cc-420e-8175-c8c54dbc8771' ParentLink='Module_MessageType' LowerBound='84.1' HigherBound='88.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestChecklistItemDocumentDetailsResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='46e38cec-200a-4073-9f5b-ee172fe0190a' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='86.1' HigherBound='87.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItemDocumentDetails.QueryResult' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='736ba6b9-e5b9-4f43-b2f4-a1151431aa01' ParentLink='Module_MessageType' LowerBound='88.1' HigherBound='92.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestApplicationInfoRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='619c57ca-70c2-4621-bde0-71b2ab03bf62' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='90.1' HigherBound='91.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='26c33140-6a56-4c01-aad7-095e2f230bde' ParentLink='Module_MessageType' LowerBound='92.1' HigherBound='96.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestApplicationInfoResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='d6fb498d-c85c-4201-a135-9cd9a6556a95' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='94.1' HigherBound='95.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestApplicationInfo.QueryResult' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='14d6765f-3cb0-416e-bc51-b4691f70d636' ParentLink='Module_MessageType' LowerBound='96.1' HigherBound='100.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestChecklistItemUpdateRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='e5a4dad6-b6e1-4fb9-97f3-c146c033014a' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='98.1' HigherBound='99.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.SaveRequest' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='bcfbda0b-fbea-4bcc-b5fe-d4c36ce038a4' ParentLink='Module_MessageType' LowerBound='100.1' HigherBound='104.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestChecklistItemUpdateResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='e0a01501-5930-4f37-a458-3d84454a19d2' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='102.1' HigherBound='103.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.results' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='ServiceDeclaration' OID='efa378f0-d9c5-4c9c-ba91-d7e960402f9d' ParentLink='Module_ServiceDeclaration' LowerBound='146.1' HigherBound='734.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='False' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='UploadParentLogic' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='2095f702-dcbd-437f-99b0-205d9812ed96' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='192.1' HigherBound='193.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FinalTempDocResponseXml' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='a9c5fde4-eaf6-4077-b37c-066ad477da80' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='193.1' HigherBound='194.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ApplicationNumber' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5504906f-9ba8-4623-83d0-1b3eda817df1' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='194.1' HigherBound='195.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessageTemp' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='a5aaa4ea-a32d-421e-80ce-e174d07d9674' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='195.1' HigherBound='196.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Message' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='dade0d81-0512-45fb-8208-47dfa288a6b7' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='196.1' HigherBound='197.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesForceObjectId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='224d362c-d8c2-4b47-b376-38be0a2e5a88' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='197.1' HigherBound='198.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesForceObjectName' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='53704a0e-333f-4549-a921-7e6d1819ec14' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='198.1' HigherBound='199.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Stage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='26cf5388-95b9-4e33-bd4a-df68a9bf3aea' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='199.1' HigherBound='200.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Status' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='edac75b4-d743-4d0c-9ea7-612f472c2cf2' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='200.1' HigherBound='201.1'>
                <om:Property Name='InitialValue' Value='true' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Boolean' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Flag' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='d1c2e737-4191-4ddc-a614-0b8f5106c9bd' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='201.1' HigherBound='202.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Guid' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='OrchestrationInstanceId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='793b32d9-c351-455b-a217-e56f794f168c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='202.1' HigherBound='203.1'>
                <om:Property Name='InitialValue' Value='true' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Boolean' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ApplicationExistsFlag' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='b9343d38-1a23-4a16-96e3-4df82a006e0c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='203.1' HigherBound='204.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Title' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5f042101-9e8f-43ad-989a-65b1c6d2affc' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='204.1' HigherBound='205.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Description' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='8c27f595-f132-4ede-b5e7-0d4b6b60f4b3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='205.1' HigherBound='206.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Data' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='bfcb25b4-73c5-4a08-b3f2-5b5a1b998cc4' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='206.1' HigherBound='207.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='PathOnClient' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='681d2381-ca94-4459-bdcd-7e1f87acccb7' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='207.1' HigherBound='208.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='FileExtension' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='26795f27-5224-41e7-ab46-be5265e8f65f' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='208.1' HigherBound='209.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentType_c' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='f1d7da83-3977-409b-a018-108d06e0b2a8' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='209.1' HigherBound='210.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ReasonForChange' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='72245f89-46eb-4786-9d72-47bbabcb4469' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='210.1' HigherBound='211.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ApplicationID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='3c88dc8a-201f-4bb8-8734-fef0dedf24bd' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='211.1' HigherBound='212.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempDocResponseXml' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='b8513b29-8128-4951-851f-24bf006618f0' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='212.1' HigherBound='213.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DOCAPPLICANTID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='614233eb-c3c5-476b-8f6a-4b607f1915a8' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='213.1' HigherBound='214.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DOC_CONTENTS' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='d9ade442-10eb-4c33-bf7a-72be19bf17ff' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='214.1' HigherBound='215.1'>
                <om:Property Name='InitialValue' Value='true' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Boolean' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RequestStatus' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='8328e116-a7a4-4f7f-9179-aefa1f04aa81' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='215.1' HigherBound='216.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocApplicationId' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='d0461282-81d5-49bb-888a-d8d79ed2bea2' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='216.1' HigherBound='217.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocCheckListItemSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='8157f293-980f-4d9b-b414-abde7af6ad1c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='217.1' HigherBound='218.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ApplicationSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='4aadd5a7-58f7-4152-905d-bb6d9b39893b' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='218.1' HigherBound='219.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DLAPUserID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='de2d2f3e-41f7-443b-b1f3-789727702fa3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='219.1' HigherBound='220.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempContentLinkRequest' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='12a294e2-2ec9-421e-a219-6a52d49b6edd' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='220.1' HigherBound='221.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='CONTENTVERSION_DOCUMENTID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='1c360f14-4d91-4a40-81c9-240d4d025cd3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='221.1' HigherBound='222.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ResponseStatus' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='e31fd75d-ce26-4ca9-934b-673af700113c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='222.1' HigherBound='223.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ContentDocumentlinkSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='19ccf089-257e-4183-9357-c60eeffad834' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='223.1' HigherBound='224.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempFaultResponse' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='842c7af0-3a17-4b3e-b3cb-53c96da03643' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='224.1' HigherBound='225.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocMetaData' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='2163f78e-1d31-45b6-9ecc-10efca07b369' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='225.1' HigherBound='226.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RECEIPTDOCUMENT_ID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='14e53409-9309-4325-a269-b6d55b529c58' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='226.1' HigherBound='227.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='LoanSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='b3f8f405-b375-4cc9-8409-2c9acda3729c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='227.1' HigherBound='228.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessageL' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='82a046ab-ecef-4400-a4b1-1e89f0da949f' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='228.1' HigherBound='229.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempMetaData' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='e727fa66-21b8-4b5b-93b8-bb3f68905fc9' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='229.1' HigherBound='230.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempMetadataXmlStr' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='4331b322-0ecc-4b01-9733-ee96950a990f' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='230.1' HigherBound='231.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Empty' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='ff27748d-448c-4073-9ecc-42b78e703b97' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='231.1' HigherBound='232.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='StatusCheckListResponse' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='83957ab9-2754-4f5a-8a57-f8ad17d8f3a3' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='232.1' HigherBound='233.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ExistedCheckListItemDocumentContentSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='eb6b3018-cfeb-482e-8b34-ba87808cb53b' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='233.1' HigherBound='234.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Int32' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='CheckListDocumentCount' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='946dcdc1-ddeb-49b4-a5fc-90f7dc0f11a4' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='234.1' HigherBound='235.1'>
                <om:Property Name='InitialValue' Value='true' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Boolean' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='CheckListDocumentStatus' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5dd35935-5fb5-4484-9a46-e4818b07abed' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='235.1' HigherBound='236.1'>
                <om:Property Name='InitialValue' Value='true' />
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.Boolean' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='CheckListItemFlag' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='12f0bd62-737f-4e05-88b4-bda05052fb9c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='236.1' HigherBound='237.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='CheckListResponseStatus' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='59cd499d-94c8-4dfe-824c-942ab4508dc7' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='237.1' HigherBound='238.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='CheckListcontentDocumentSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='389e8d3e-0795-47c1-8f09-929ee2e25530' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='238.1' HigherBound='239.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SOQL_ContentDocument_QUERY' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5db2fe88-2537-4256-b2ac-aba598bc0bb8' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='239.1' HigherBound='240.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SOQL_APPLICATION_INFO_QUERY' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='e015ff9d-f8cb-4e38-8409-debf37495fd8' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='240.1' HigherBound='241.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCheckListItemUpdateMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='e1630376-1e08-424e-90dc-9d6b08492284' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='241.1' HigherBound='242.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCheckListItemUpdateSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='77b0843d-7561-4a9d-9a47-f70595c726ce' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='242.1' HigherBound='243.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Exception' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCheckListItemUpdateException' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='7e59d5ac-4425-4fc0-9be8-a432acf99e09' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='243.1' HigherBound='244.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='LoanName' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='ff9816bc-ac3c-44ec-9f3e-5a3b0fcc028c' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='244.1' HigherBound='245.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SOQL_LoanInfo_QUERY' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='36621139-5d70-4843-a6f7-0ffed3189390' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='245.1' HigherBound='246.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestReceiptMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='d43c1f37-1eda-4ea7-9934-ccfce54e4970' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='246.1' HigherBound='247.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestReceiptSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='451b911a-1ca1-4fa2-9b49-0a0650a9cb5f' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='247.1' HigherBound='248.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Exception' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestReceiptException' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='66b4b538-acd3-438c-8a16-4c287df967d2' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='161.1' HigherBound='162.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestReceiptDocumentResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestReceiptDocumentResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='58148d95-dd6d-4ccf-af19-24ebc2c89a18' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='162.1' HigherBound='163.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestReceiptDocumentRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestReceiptDocumentRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='9aff7655-d131-4038-888c-058001983e25' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='163.1' HigherBound='164.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestLoanQueryResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestLoanQueryResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='aa53e60b-effa-49a9-89f2-9442152c381d' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='164.1' HigherBound='165.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestLoanQueryRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestLoanQueryRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='654869c4-2c29-49e0-a417-bd6e1a92269e' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='165.1' HigherBound='166.1'>
                <om:Property Name='Type' Value='DLAPDocument.DocumentUploadRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentUploadRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='1d4b93e0-fae0-4e0c-9008-d23d686afcaf' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='166.1' HigherBound='167.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryApplicationIdRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryApplicantIdRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='9bb03c48-ed87-4927-86b5-1c43b30942e5' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='167.1' HigherBound='168.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryApplicationIdResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryApplicantIdResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='ba67a0f9-16f8-4158-8572-f964c75df62e' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='168.1' HigherBound='169.1'>
                <om:Property Name='Type' Value='DLAPDocument.DocumentUploadResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentUploadResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='9e6eed41-8b93-4092-adf0-0ca0e16c34f2' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='169.1' HigherBound='170.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentVersionRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentVersionRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='91d263c8-851c-4b70-ba57-29aeeff54fdb' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='170.1' HigherBound='171.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentVersionResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentVersionResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='c90e261c-7c4b-4705-9b89-c5be59acfbd5' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='171.1' HigherBound='172.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryContentVersionDocumentIdRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryContentVersionDocumentIdRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='de6da6c8-2903-4c3d-8518-9a20b90f4287' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='172.1' HigherBound='173.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryContentVersionDocumentIdResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryContentVersionDocumentIdResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='4f8ed56c-29ba-45e0-976b-0c6c2c899730' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='173.1' HigherBound='174.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentDocumentlinkRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentDocumentlinkRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='120538d7-f8da-447f-a5d9-52b9fe783b8b' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='174.1' HigherBound='175.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentDocumentlinkResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentDocumentlinkResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='fc44253a-8c5d-4742-a65f-cb9276c730d7' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='175.1' HigherBound='176.1'>
                <om:Property Name='Type' Value='DLAPDocument.ContentLinkRequestInfoType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ContentLinkRequestInfoMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='8e4ab017-ee0c-4044-a9bb-8f2fd8de15d8' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='176.1' HigherBound='177.1'>
                <om:Property Name='Type' Value='DLAPDocument.DocumentUploadFaultResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentUploadFaultResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='2e2a24b5-0e39-4e03-90e7-22c076225b10' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='177.1' HigherBound='178.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryCheckListItemRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryCheckListItemRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='06d51f7f-237b-41b4-b0e6-807f8798a47c' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='178.1' HigherBound='179.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryCheckListItemResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryCheckListItemResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='96c59097-042f-43fd-ac99-c322c8ddb3ba' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='179.1' HigherBound='180.1'>
                <om:Property Name='Type' Value='DLAPDocument.UploadMetaDataType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='UploadMetaDataMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='e8657234-fedb-4005-a54f-b67b8507b16d' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='180.1' HigherBound='181.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryReceiptDocumentRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryReceiptDocumentRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='d23f1349-df15-4cd2-a7f6-2cf7d3a5738e' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='181.1' HigherBound='182.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryReceiptDocumentResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryReceiptDocumentResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='ff108219-0b73-409a-8c3f-4e1d961ac859' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='182.1' HigherBound='183.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryLoanRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryLoanRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='6d60c5d6-eab6-4ffc-abba-5177911ebb78' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='183.1' HigherBound='184.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryLoanResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryLoanResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='c7c52708-4b83-4a1d-86dd-402dc2255c3d' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='184.1' HigherBound='185.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryCheckListItemContentIdRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryCheckListItemContentIdRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='cd143242-8b32-425c-a062-d8d23fa97851' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='185.1' HigherBound='186.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryCheckListItemContentIdResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryCheckListItemContentIdResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='183b7795-b53c-44d6-9b4e-57aa362a6df8' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='186.1' HigherBound='187.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestChecklistItemDocumentDetailsRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestChecklistItemDocumentDetailsRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='4d83c86e-d904-4124-9e6b-6487e046ed5a' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='187.1' HigherBound='188.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestChecklistItemDocumentDetailsResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestChecklistItemDocumentDetailsResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='4867de5b-9f60-47ee-9145-e897b5702edb' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='188.1' HigherBound='189.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestApplicationInfoRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestRestApplicationInfoRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='aebbedda-a585-4a5e-b520-63473ae5e1f4' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='189.1' HigherBound='190.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestApplicationInfoResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestRestApplicationInfoResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='65030108-701e-485d-ab74-745a8b2e9e76' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='190.1' HigherBound='191.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestChecklistItemUpdateRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestChecklistItemUpdateRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='a6514485-d7e7-40e0-81d6-16b78ba3ea85' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='191.1' HigherBound='192.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestChecklistItemUpdateResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestChecklistItemUpdateResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='94f062a0-e4ed-48e5-9f0f-841984d7773c' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='Task' OID='6f6a94fc-c37d-4d66-88e6-134e1022dea8' ParentLink='ServiceBody_Statement' LowerBound='250.1' HigherBound='732.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='DLAP Document Upload' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='Receive' OID='6cdb4b01-7d0f-41b6-b317-85aa0c028995' ParentLink='ComplexStatement_Statement' LowerBound='250.1' HigherBound='306.1'>
                        <om:Property Name='Activate' Value='True' />
                        <om:Property Name='PortName' Value='DocumentUploadPort' />
                        <om:Property Name='MessageName' Value='DocumentUploadRequestMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Request' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Receive Document Request' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Scope' OID='1d5bce14-9cc5-493d-a7b6-41a27b6d0e5b' ParentLink='ComplexStatement_Statement' LowerBound='306.1' HigherBound='699.1'>
                        <om:Property Name='InitializedTransactionType' Value='True' />
                        <om:Property Name='IsSynchronized' Value='False' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Document Upload Processing Error Scope' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Construct' OID='eb857257-5ac5-4d1d-a878-2ecd591e600e' ParentLink='ComplexStatement_Statement' LowerBound='311.1' HigherBound='327.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Construct Applicant ID Request Message' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Transform' OID='46085f98-5ee9-44ed-8f3a-767493e4a5a7' ParentLink='ComplexStatement_Statement' LowerBound='314.1' HigherBound='316.1'>
                                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.Logic.MakeSalesforceQueryApplicantIdRequest' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Make SF Search Applicant ID Request' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='MessagePartRef' OID='7c3e1c19-26f2-4e23-95ec-2a2bdd1b120b' ParentLink='Transform_OutputMessagePartRef' LowerBound='315.36' HigherBound='315.81'>
                                    <om:Property Name='MessageRef' Value='RestRestApplicationInfoRequestMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_2' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessagePartRef' OID='c52f0f18-bbbb-404a-9aa9-0a6e149f4c89' ParentLink='Transform_InputMessagePartRef' LowerBound='315.153' HigherBound='315.189'>
                                    <om:Property Name='MessageRef' Value='DocumentUploadRequestMsg' />
                                    <om:Property Name='PartRef' Value='MessagePart' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='MessagePartReference_1' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='MessageAssignment' OID='4d97d773-47e1-4b61-8047-32d83b002caf' ParentLink='ComplexStatement_Statement' LowerBound='316.1' HigherBound='326.1'>
                                <om:Property Name='Expression' Value='ApplicationNumber = xpath(DocumentUploadRequestMsg.MessagePart,&quot;string(/*[local-name()=&apos;DOCUMENT&apos; and namespace-uri()=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;]/*[local-name()=&apos;APPLICATION_NUMBER&apos; and namespace-uri()=&apos;&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;//SOQL Query For Rest&#xD;&#xA;&#xD;&#xA;SOQL_APPLICATION_INFO_QUERY = @&quot;Select Id, Name  FROM Application__c WHERE Name IN &quot;+&quot;(&apos;&quot;+ApplicationNumber+&quot;&apos;) AND Name != NULL&quot;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;RestRestApplicationInfoRequestMsg(DLAPDocumentUploadSalesForceDefinition.Rest.SOQL_ApplicationInfo_Query) = SOQL_APPLICATION_INFO_QUERY; &#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='False' />
                                <om:Property Name='Name' Value='Make SOQL' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessageRef' OID='11584287-7281-4c64-8af2-b398a1838fe0' ParentLink='Construct_MessageRef' LowerBound='312.31' HigherBound='312.64'>
                                <om:Property Name='Ref' Value='RestRestApplicationInfoRequestMsg' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Send' OID='32870cd1-9e5a-4e68-ba45-e016938d1da5' ParentLink='ComplexStatement_Statement' LowerBound='327.1' HigherBound='329.1'>
                            <om:Property Name='PortName' Value='RestApplicationIdQueryPort' />
                            <om:Property Name='MessageName' Value='RestRestApplicationInfoRequestMsg' />
                            <om:Property Name='OperationName' Value='Operation' />
                            <om:Property Name='OperationMessageName' Value='Request' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Send External Applicant ID Request' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Receive' OID='00a593ff-dc6e-4a01-a73a-bf0f81420453' ParentLink='ComplexStatement_Statement' LowerBound='329.1' HigherBound='331.1'>
                            <om:Property Name='Activate' Value='False' />
                            <om:Property Name='PortName' Value='RestApplicationIdQueryPort' />
                            <om:Property Name='MessageName' Value='RestRestApplicationInfoResponseMsg' />
                            <om:Property Name='OperationName' Value='Operation' />
                            <om:Property Name='OperationMessageName' Value='Response' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Receive SF Applicant ID Response' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='VariableAssignment' OID='f3e1b349-3856-46be-a56c-fe95d7c84236' ParentLink='ComplexStatement_Statement' LowerBound='331.1' HigherBound='355.1'>
                            <om:Property Name='Expression' Value='//Exracting Values &#xD;&#xA;&#xD;&#xA;DocApplicationId = xpath(DocumentUploadRequestMsg.MessagePart, &quot;string(/*[local-name()=&apos;DOCUMENT&apos; and namespace-uri()=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;]/*[local-name()=&apos;APPLICATION_NUMBER&apos; and namespace-uri()=&apos;&apos;])&quot;) ;&#xD;&#xA;&#xD;&#xA;DocCheckListItemSFID = xpath(DocumentUploadRequestMsg.MessagePart, &quot;string(/*[local-name()=&apos;DOCUMENT&apos; and namespace-uri()=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;]/*[local-name()=&apos;ACTION_ID&apos; and namespace-uri()=&apos;&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;DLAPUserID = xpath(DocumentUploadRequestMsg.MessagePart,&quot;string(/*[local-name()=&apos;DOCUMENT&apos; and namespace-uri()=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;]/*[local-name()=&apos;USER_ID&apos; and namespace-uri()=&apos;&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;ApplicationSFID = xpath(RestRestApplicationInfoResponseMsg.MessagePart,&quot;string(/*[local-name()=&apos;QueryResult&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/Query/ApplicationInfo&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/Query/ApplicationInfo&apos;]/*[local-name()=&apos;Id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/Query/ApplicationInfo&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;DocMetaData = xpath(DocumentUploadRequestMsg.MessagePart,&quot;string(/*[local-name()=&apos;DOCUMENT&apos; and namespace-uri()=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;]/*[local-name()=&apos;DOCUMENT_METADATA&apos; and namespace-uri()=&apos;&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Validating Request Parameters&#xD;&#xA;&#xD;&#xA;if(!System.String.IsNullOrWhiteSpace(ApplicationSFID))&#xD;&#xA;{   &#xD;&#xA;    if(!System.String.IsNullOrEmpty(DLAPUserID))&#xD;&#xA;      {RequestStatus = true;}    &#xD;&#xA;    else {RequestS"+
@"tatus = false;}&#xD;&#xA;   &#xD;&#xA;}&#xD;&#xA;else{RequestStatus = false;}&#xD;&#xA;' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Validating DocApplicantId and DocContent Values' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Decision' OID='aea2b1c3-f70d-456e-bbb9-e65674a7f5fb' ParentLink='ComplexStatement_Statement' LowerBound='355.1' HigherBound='573.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Application Exists?' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='1d4851fa-d4bb-4f71-bf8e-ae89cf93d25d' ParentLink='ReallyComplexStatement_Branch' LowerBound='356.21' HigherBound='543.1'>
                                <om:Property Name='Expression' Value='RequestStatus != false' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Exists ' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Parallel' OID='5968b282-cb3e-4ab8-9274-cc0e29665eb6' ParentLink='ComplexStatement_Statement' LowerBound='358.1' HigherBound='542.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Parallel Document Processing' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='ParallelBranch' OID='8b5f5660-ded0-40be-a76d-3e594efcfb03' ParentLink='ReallyComplexStatement_Branch' LowerBound='363.1' HigherBound='481.1'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='ParallelBranch_3' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='Scope' OID='f64c14db-fe25-47d8-a1ec-353e35f84d20' ParentLink='ComplexStatement_Statement' LowerBound='363.1' HigherBound='481.1'>
                                            <om:Property Name='InitializedTransactionType' Value='True' />
                                            <om:Property Name='IsSynchronized' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Document Processing Without Check List Item' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Decision' OID='b73de793-2243-4efa-b541-530630b13fe4' ParentLink='ComplexStatement_Statement' LowerBound='368.1' HigherBound='479.1'>
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Document Metadata Exists?' />
                                                <om:Property Name='Signal' Value='True' />
                                                <om:Element Type='DecisionBranch' OID='cfc5d581-bf59-4772-83a1-0e4bd37a0e27' ParentLink='ReallyComplexStatement_Branch' LowerBound='369.41' HigherBound='472.1'>
                                                    <om:Property Name='Expression' Value='DocMetaData.Contains(&quot;ReceiptMetaData&quot;)' />
                                                    <om:Property Name='IsGhostBranch' Value='True' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Receipt Meta Data' />
                                                    <om:Property Name='Signal' Value='True' />
                                                    <om:Element Type='Construct' OID='653f6c1d-001f-4afc-9cb4-260141371fcd' ParentLink='ComplexStatement_Statement' LowerBound='371.1' HigherBound='397.1'>
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Construct Receipt Meta Data and Loan Msg' />
                                                        <om:Property Name='Signal' Value='True' />
                                                        <om:Element Type='MessageRef' OID='1584fb1d-2197-41b8-83d9-05fc5e8c111c' ParentLink='Construct_MessageRef' LowerBound='372.55' HigherBound='372.72'>
                                                            <om:Property Name='Ref' Value='UploadMetaDataMsg' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='MessageRef' OID='a0bd11fc-8ba0-4fe5-b9d0-188815a05f77' ParentLink='Construct_MessageRef' LowerBound='372.74' HigherBound='372.97'>
                                                            <om:Property Name='Ref' Value='RestLoanQueryRequestMsg' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='MessageAssignment' OID='4c746bf9-f190-47f6-a2cc-ce31e7bf52d8' ParentLink='ComplexStatement_Statement' LowerBound='374.1' HigherBound='384.1'>
                                                            <om:Property Name='Expression' Value='TempMetaData = new System.Xml.XmlDocument();&#xD;&#xA;&#xD;&#xA;//Extracting Metadata XML and Unwrapping CDATA tags&#xD;&#xA;&#xD;&#xA;TempMetadataXmlStr = DocMetaData.Replace(&quot;&lt;![CDATA[&quot;,&quot;&quot;);&#xD;&#xA;TempMetadataXmlStr = TempMetadataXmlStr.Replace(&quot;]]&gt;&quot;,&quot;&quot;);&#xD;&#xA;TempMetaData.LoadXml(TempMetadataXmlStr);&#xD;&#xA;UploadMetaDataMsg.MessagePart = TempMetaData;&#xD;&#xA;&#xD;&#xA;' />
                                                            <om:Property Name='ReportToAnalyst' Value='False' />
                                                            <om:Property Name='Name' Value='MessageAssignment_1' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Transform' OID='c306c1b1-2f3b-4e10-b0a7-ca35040c3413' ParentLink='ComplexStatement_Statement' LowerBound='384.1' HigherBound='386.1'>
                                                            <om:Property Name='ClassName' Value='DLAPDocumentUploadLogic.MakeLoanRequestMsg' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Name' Value='Make Loan Request Msg' />
                                                            <om:Property Name='Signal' Value='True' />
                                                            <om:Element Type='MessagePartRef' OID='b6ccb1d4-93aa-432a-82b0-bfe64672bf18' ParentLink='Transform_OutputMessagePartRef' LowerBound='385.60' HigherBound='385.95'>
                                                                <om:Property Name='MessageRef' Value='RestLoanQueryRequestMsg' />
                                                                <om:Property Name='PartRef' Value='MessagePart' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='MessagePartReference_8' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='MessagePartRef' OID='3f655ef0-a4bb-4960-8b16-bb0653c8e6c5' ParentLink='Transform_InputMessagePartRef' LowerBound='385.143' HigherBound='385.172'>
                                                                <om:Property Name='MessageRef' Value='UploadMetaDataMsg' />
                                                                <om:Property Name='PartRef' Value='MessagePart' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='MessagePartReference_7' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                        </om:Element>
                                                        <om:Element Type='MessageAssignment' OID='8f1cbb9f-1b93-48ac-82fc-afa567bb2135' ParentLink='ComplexStatement_Statement' LowerBound='386.1' HigherBound='396.1'>
                                                            <om:Property Name='Expression' Value='//Construct SOQL Query&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;LoanName = xpath(RestLoanQueryRequestMsg.MessagePart,&quot;string(/*[local-name()=&apos;Request&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan&apos;]/*[local-name()=&apos;SOQL_Loan_Query&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;SOQL_LoanInfo_QUERY = @&quot;SELECT Id, Name FROM Loan__c WHERE Name IN &quot;+&quot;(&quot;+&quot;&apos;&quot;+LoanName+&quot;&apos;&quot;+&quot;)&quot;;&#xD;&#xA;&#xD;&#xA;RestLoanQueryRequestMsg(DLAPDocumentUploadSalesForceDefinition.Rest.SOQL_Loan_Query) = SOQL_LoanInfo_QUERY; &#xD;&#xA;&#xD;&#xA;' />
                                                            <om:Property Name='ReportToAnalyst' Value='False' />
                                                            <om:Property Name='Name' Value='Make SOQL' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                    </om:Element>
                                                    <om:Element Type='Send' OID='c603d4d2-c04b-4bae-8047-d17c96b71815' ParentLink='ComplexStatement_Statement' LowerBound='397.1' HigherBound='399.1'>
                                                        <om:Property Name='PortName' Value='RestLoanQueryPort' />
                                                        <om:Property Name='MessageName' Value='RestLoanQueryRequestMsg' />
                                                        <om:Property Name='OperationName' Value='Operation' />
                                                        <om:Property Name='OperationMessageName' Value='Request' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Send Loan Request Msg' />
                                                        <om:Property Name='Signal' Value='True' />
                                                    </om:Element>
                                                    <om:Element Type='Receive' OID='844cc5cf-0dfb-40e4-aa0d-388e93fd01e0' ParentLink='ComplexStatement_Statement' LowerBound='399.1' HigherBound='401.1'>
                                                        <om:Property Name='Activate' Value='False' />
                                                        <om:Property Name='PortName' Value='RestLoanQueryPort' />
                                                        <om:Property Name='MessageName' Value='RestLoanQueryResponseMsg' />
                                                        <om:Property Name='OperationName' Value='Operation' />
                                                        <om:Property Name='OperationMessageName' Value='Response' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Receive Loan Response Msg' />
                                                        <om:Property Name='Signal' Value='True' />
                                                    </om:Element>
                                                    <om:Element Type='VariableAssignment' OID='68e99b21-8d70-48be-ae7e-0a7fe44b2cb8' ParentLink='ComplexStatement_Statement' LowerBound='401.1' HigherBound='403.1'>
                                                        <om:Property Name='Expression' Value='LoanSFID = xpath(RestLoanQueryResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;QueryResult&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan&apos;]/*[local-name()=&apos;Id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan&apos;])&quot;);&#xD;&#xA;' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Extract Loan' />
                                                        <om:Property Name='Signal' Value='True' />
                                                    </om:Element>
                                                    <om:Element Type='Decision' OID='6e6b0685-d971-4990-8e1a-c6c2365d4297' ParentLink='ComplexStatement_Statement' LowerBound='403.1' HigherBound='471.1'>
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Loan Number Exists ' />
                                                        <om:Property Name='Signal' Value='True' />
                                                        <om:Element Type='DecisionBranch' OID='f19a202b-e3c5-4740-9c9b-c9010619f1f3' ParentLink='ReallyComplexStatement_Branch' LowerBound='404.45' HigherBound='441.1'>
                                                            <om:Property Name='Expression' Value='(!System.String.IsNullOrWhiteSpace(LoanSFID))' />
                                                            <om:Property Name='IsGhostBranch' Value='True' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Name' Value='Valid Loan Number' />
                                                            <om:Property Name='Signal' Value='True' />
                                                            <om:Element Type='Construct' OID='2b3b8436-c7b3-4809-ada5-d3264e00898a' ParentLink='ComplexStatement_Statement' LowerBound='406.1' HigherBound='415.1'>
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Construct Loan Request Msg' />
                                                                <om:Property Name='Signal' Value='True' />
                                                                <om:Element Type='Transform' OID='ca087598-ce11-4ec5-ac17-1241e85970f1' ParentLink='ComplexStatement_Statement' LowerBound='409.1' HigherBound='411.1'>
                                                                    <om:Property Name='ClassName' Value='DLAPDocumentUploadLogic.MakeReceiptDocumentRequestMsg' />
                                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                                    <om:Property Name='Name' Value='Make Receipt Document Request  Msg' />
                                                                    <om:Property Name='Signal' Value='True' />
                                                                    <om:Element Type='MessagePartRef' OID='5bd12e43-f641-47e8-8141-229e93d61eaf' ParentLink='Transform_InputMessagePartRef' LowerBound='410.164' HigherBound='410.193'>
                                                                        <om:Property Name='MessageRef' Value='UploadMetaDataMsg' />
                                                                        <om:Property Name='PartRef' Value='MessagePart' />
                                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                                        <om:Property Name='Name' Value='MessagePartReference_9' />
                                                                        <om:Property Name='Signal' Value='False' />
                                                                    </om:Element>
                                                                    <om:Element Type='MessagePartRef' OID='66bb9622-c2c4-495a-b9ad-cf237dd022ce' ParentLink='Transform_OutputMessagePartRef' LowerBound='410.64' HigherBound='410.105'>
                                                                        <om:Property Name='MessageRef' Value='RestReceiptDocumentRequestMsg' />
                                                                        <om:Property Name='PartRef' Value='MessagePart' />
                                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                                        <om:Property Name='Name' Value='MessagePartReference_10' />
                                                                        <om:Property Name='Signal' Value='False' />
                                                                    </om:Element>
                                                                </om:Element>
                                                                <om:Element Type='MessageAssignment' OID='433da016-3007-4073-9874-ac597e2e6db0' ParentLink='ComplexStatement_Statement' LowerBound='411.1' HigherBound='414.1'>
                                                                    <om:Property Name='Expression' Value='&#xD;&#xA;xpath(RestReceiptDocumentRequestMsg.MessagePart,&quot;/*[local-name()=&apos;SaveRequest&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;]/*[local-name()=&apos;Loan__c&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;]&quot;) = LoanSFID;' />
                                                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                                                    <om:Property Name='Name' Value='Inject Loan SFID' />
                                                                    <om:Property Name='Signal' Value='True' />
                                                                </om:Element>
                                                                <om:Element Type='MessageRef' OID='db445253-c6c1-4468-8d2e-3863e436f7d2' ParentLink='Construct_MessageRef' LowerBound='407.59' HigherBound='407.88'>
                                                                    <om:Property Name='Ref' Value='RestReceiptDocumentRequestMsg' />
                                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                            </om:Element>
                                                            <om:Element Type='Send' OID='dcf557aa-cefe-462b-b5d1-7ae0fab8e62c' ParentLink='ComplexStatement_Statement' LowerBound='415.1' HigherBound='417.1'>
                                                                <om:Property Name='PortName' Value='RestReceiptDocumentInsetPort' />
                                                                <om:Property Name='MessageName' Value='RestReceiptDocumentRequestMsg' />
                                                                <om:Property Name='OperationName' Value='Operation' />
                                                                <om:Property Name='OperationMessageName' Value='Request' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Send Receipt Document Request' />
                                                                <om:Property Name='Signal' Value='True' />
                                                            </om:Element>
                                                            <om:Element Type='Receive' OID='7a47b4b6-331e-4c6c-a010-128ccb3e982c' ParentLink='ComplexStatement_Statement' LowerBound='417.1' HigherBound='419.1'>
                                                                <om:Property Name='Activate' Value='False' />
                                                                <om:Property Name='PortName' Value='RestReceiptDocumentInsetPort' />
                                                                <om:Property Name='MessageName' Value='RestReceiptDocumentResponseMsg' />
                                                                <om:Property Name='OperationName' Value='Operation' />
                                                                <om:Property Name='OperationMessageName' Value='Response' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Receive Receipt Document Response' />
                                                                <om:Property Name='Signal' Value='True' />
                                                            </om:Element>
                                                            <om:Element Type='VariableAssignment' OID='3e544756-1c0d-4436-baf3-8fdf01c1a5b2' ParentLink='ComplexStatement_Statement' LowerBound='419.1' HigherBound='430.1'>
                                                                <om:Property Name='Expression' Value='&#xD;&#xA;CheckListItemFlag = false;&#xD;&#xA;&#xD;&#xA;RestReceiptMessage = xpath(RestReceiptDocumentResponseMsg.MessagePart,&quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;]/*[local-name()=&apos;errors&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;]/*[local-name()=&apos;message&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;RestReceiptSFID = xpath(RestReceiptDocumentResponseMsg.MessagePart,&quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;]/*[local-name()=&apos;id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;RECEIPTDOCUMENT_ID = RestReceiptSFID;' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Extract Receipt Document SFID' />
                                                                <om:Property Name='Signal' Value='True' />
                                                            </om:Element>
                                                            <om:Element Type='Decision' OID='748c57bf-ae22-4eb0-8690-20e038dc3340' ParentLink='ComplexStatement_Statement' LowerBound='430.1' HigherBound='438.1'>
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Valid Response' />
                                                                <om:Property Name='Signal' Value='True' />
                                                                <om:Element Type='DecisionBranch' OID='1f6340e2-4024-4414-be1b-d8b9813b244d' ParentLink='ReallyComplexStatement_Branch' LowerBound='431.49' HigherBound='438.1'>
                                                                    <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(RestReceiptMessage) &amp;&amp; (RestReceiptSFID.Length == 0)' />
                                                                    <om:Property Name='IsGhostBranch' Value='True' />
                                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                                    <om:Property Name='Name' Value='Error' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                    <om:Element Type='VariableAssignment' OID='f425504d-980f-42b0-bc27-c73efe57562c' ParentLink='ComplexStatement_Statement' LowerBound='433.1' HigherBound='435.1'>
                                                                        <om:Property Name='Expression' Value='RestReceiptException = new System.Exception(&quot;DLAP Document Upload Recepit Rest Exception  -  &quot; + RestReceiptMessage);' />
                                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                                        <om:Property Name='Name' Value='Rest Exception' />
                                                                        <om:Property Name='Signal' Value='True' />
                                                                    </om:Element>
                                                                    <om:Element Type='Throw' OID='170b70a1-d0f8-4eeb-8499-858ab1dece05' ParentLink='ComplexStatement_Statement' LowerBound='435.1' HigherBound='437.1'>
                                                                        <om:Property Name='ThrownReference' Value='RestReceiptException' />
                                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                                        <om:Property Name='Name' Value='Rest Error ' />
                                                                        <om:Property Name='Signal' Value='True' />
                                                                    </om:Element>
                                                                </om:Element>
                                                                <om:Element Type='DecisionBranch' OID='9db62a1e-2d74-42b9-b523-d60074a7fa60' ParentLink='ReallyComplexStatement_Branch'>
                                                                    <om:Property Name='IsGhostBranch' Value='True' />
                                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                                    <om:Property Name='Name' Value='Else' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                            </om:Element>
                                                            <om:Element Type='Call' OID='c7df9373-bb19-4748-ac1d-16837666c0b9' ParentLink='ComplexStatement_Statement' LowerBound='438.1' HigherBound='440.1'>
                                                                <om:Property Name='Identifier' Value='CallOrchestration_2' />
                                                                <om:Property Name='Invokee' Value='DLAPDocument.UploadChildLogic' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Call Document Processing Orchestration' />
                                                                <om:Property Name='Signal' Value='False' />
                                                                <om:Element Type='Parameter' OID='c793f327-9838-48b7-a7d0-a0a02c909e10' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='ApplicationSFID' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='6d1fa622-803c-4189-9ce1-3aeb1d458ba3' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='RECEIPTDOCUMENT_ID' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='f9fb01c9-9ac4-4674-b50c-729e04c5ddb4' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='Empty' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='19460484-2422-477b-9c3c-930eef5a40ba' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='ContentDocumentlinkSFID' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='78e2006d-ed70-4946-bd80-bd70cbac0692' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='ResponseStatus' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='f2118d4c-d81a-4c3c-bf45-11322a0289dc' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='Flag' />
                                                                    <om:Property Name='Type' Value='System.Boolean' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='6bf60d74-574b-453b-a9d4-3fbe9f60f992' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='DocumentUploadResponseMsg' />
                                                                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadResponseType' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='abd5b6c1-a7ff-4837-9828-219f4e4d6dc3' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='DocumentUploadRequestMsg' />
                                                                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadRequestType' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='0dbf4622-494b-46cf-b761-d037cd8b77db' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='CheckListItemFlag' />
                                                                    <om:Property Name='Type' Value='System.Boolean' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='2b428ccb-1f56-4c26-92a9-43febd316db4' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='CheckListResponseStatus' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                            </om:Element>
                                                        </om:Element>
                                                        <om:Element Type='DecisionBranch' OID='0032df9b-e06a-461c-a17b-59fed2c2c4e3' ParentLink='ReallyComplexStatement_Branch'>
                                                            <om:Property Name='IsGhostBranch' Value='True' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Name' Value='Else' />
                                                            <om:Property Name='Signal' Value='False' />
                                                            <om:Element Type='Construct' OID='78699d93-ce52-4af1-9ed1-dce39fecd976' ParentLink='ComplexStatement_Statement' LowerBound='443.1' HigherBound='454.1'>
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Construct Document Error Response' />
                                                                <om:Property Name='Signal' Value='True' />
                                                                <om:Element Type='MessageRef' OID='fce455d6-e544-4bc6-ba3c-bc62d3485b6d' ParentLink='Construct_MessageRef' LowerBound='444.59' HigherBound='444.84'>
                                                                    <om:Property Name='Ref' Value='DocumentUploadResponseMsg' />
                                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='MessageAssignment' OID='918de24f-b712-45a7-a3a3-42f987397347' ParentLink='ComplexStatement_Statement' LowerBound='446.1' HigherBound='453.1'>
                                                                    <om:Property Name='Expression' Value='TempDocResponseXml = new System.Xml.XmlDocument();&#xD;&#xA;&#xD;&#xA;TempDocResponseXml.LoadXml(@&quot;&lt;ns0:DOCUMENTRESPONSE xmlns:ns0=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;&gt;&lt;Upload_Status&gt;&quot;+&quot;FAILED&quot;+&quot;&lt;/Upload_Status&gt;&lt;Upload_Status_Details&gt;&quot;+&quot;Exception:Loan Number couldn’t be found thus the file wasn’t saved&quot;+&quot;&lt;/Upload_Status_Details&gt;&lt;/ns0:DOCUMENTRESPONSE&gt;&quot;);&#xD;&#xA;&#xD;&#xA;DocumentUploadResponseMsg.MessagePart = TempDocResponseXml; &#xD;&#xA;&#xD;&#xA;' />
                                                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                                                    <om:Property Name='Name' Value='Make Document Error Response Msg' />
                                                                    <om:Property Name='Signal' Value='True' />
                                                                </om:Element>
                                                            </om:Element>
                                                            <om:Element Type='VariableAssignment' OID='f8a4d0f2-4220-4d4f-984b-a98ecaf6088c' ParentLink='ComplexStatement_Statement' LowerBound='454.1' HigherBound='470.1'>
                                                                <om:Property Name='Expression' Value='ApplicationNumber = DocApplicationId;&#xD;&#xA;&#xD;&#xA;MessageL = &quot;DLAP Document Upload Exception: Loan Number couldn’t be found on the DLAP Document Metadata Request&quot;;&#xD;&#xA;&#xD;&#xA;OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;&#xD;&#xA;&#xD;&#xA;SalesForceObjectId = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;SalesForceObjectName=&quot;Appplication&quot;;&#xD;&#xA;&#xD;&#xA;Stage =&quot;Document Received&quot;;&#xD;&#xA;&#xD;&#xA;Status = &quot;Error&quot;;&#xD;&#xA;&#xD;&#xA;Flag = false;' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Set Error Values For Salesforce' />
                                                                <om:Property Name='Signal' Value='True' />
                                                            </om:Element>
                                                        </om:Element>
                                                    </om:Element>
                                                </om:Element>
                                                <om:Element Type='DecisionBranch' OID='69488dc6-4149-4b73-9510-d840db4a5b1c' ParentLink='ReallyComplexStatement_Branch'>
                                                    <om:Property Name='IsGhostBranch' Value='True' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Else' />
                                                    <om:Property Name='Signal' Value='False' />
                                                    <om:Element Type='VariableAssignment' OID='3e82c6e5-7b51-4706-9e11-227b98b2c528' ParentLink='ComplexStatement_Statement' LowerBound='474.1' HigherBound='476.1'>
                                                        <om:Property Name='Expression' Value='CheckListItemFlag = false;' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='CheckList Item Flag' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                    <om:Element Type='Call' OID='01479499-ba17-40bc-ab88-f1328daea0e2' ParentLink='ComplexStatement_Statement' LowerBound='476.1' HigherBound='478.1'>
                                                        <om:Property Name='Identifier' Value='CallOrchestration_4' />
                                                        <om:Property Name='Invokee' Value='DLAPDocument.UploadChildLogic' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Call Document Processing Orchestration' />
                                                        <om:Property Name='Signal' Value='True' />
                                                        <om:Element Type='Parameter' OID='06e3f9c5-53f0-41b3-a9aa-297cf361c016' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='In' />
                                                            <om:Property Name='Name' Value='ApplicationSFID' />
                                                            <om:Property Name='Type' Value='System.String' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='fa43fa32-fded-44f2-92cb-dface436c553' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='In' />
                                                            <om:Property Name='Name' Value='RECEIPTDOCUMENT_ID' />
                                                            <om:Property Name='Type' Value='System.String' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='ac547dae-de68-49f9-a91b-f93ee5c1e9e3' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='In' />
                                                            <om:Property Name='Name' Value='Empty' />
                                                            <om:Property Name='Type' Value='System.String' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='e4f67569-ff7c-42e7-a969-1033d4b6a3e3' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='Out' />
                                                            <om:Property Name='Name' Value='ContentDocumentlinkSFID' />
                                                            <om:Property Name='Type' Value='System.String' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='d068c257-b15b-42bd-a761-ed616867c2be' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='Out' />
                                                            <om:Property Name='Name' Value='ResponseStatus' />
                                                            <om:Property Name='Type' Value='System.String' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='02ab0d1d-63fd-4f7f-9ef1-3239f1e7a7ea' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='Out' />
                                                            <om:Property Name='Name' Value='Flag' />
                                                            <om:Property Name='Type' Value='System.Boolean' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='1c58573a-831c-4e69-84c1-d2042077e152' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='Out' />
                                                            <om:Property Name='Name' Value='DocumentUploadResponseMsg' />
                                                            <om:Property Name='Type' Value='DLAPDocument.DocumentUploadResponseType' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='55e1ef1b-07c4-44d9-adce-716176650904' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='In' />
                                                            <om:Property Name='Name' Value='DocumentUploadRequestMsg' />
                                                            <om:Property Name='Type' Value='DLAPDocument.DocumentUploadRequestType' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='881fa7e2-817e-4b90-a6a5-82ec58404f48' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='In' />
                                                            <om:Property Name='Name' Value='CheckListItemFlag' />
                                                            <om:Property Name='Type' Value='System.Boolean' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                        <om:Element Type='Parameter' OID='da8d56a4-bbe2-4337-a3ed-04239eca3514' ParentLink='InvokeStatement_Parameter'>
                                                            <om:Property Name='Direction' Value='Out' />
                                                            <om:Property Name='Name' Value='CheckListResponseStatus' />
                                                            <om:Property Name='Type' Value='System.String' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                    </om:Element>
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='ParallelBranch' OID='784a5634-d83a-453d-bb60-04df24981ce4' ParentLink='ReallyComplexStatement_Branch' LowerBound='484.1' HigherBound='540.1'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='ParallelBranch_4' />
                                        <om:Property Name='Signal' Value='False' />
                                        <om:Element Type='Scope' OID='62004d06-e837-426a-8c98-1a4e7ebe55b9' ParentLink='ComplexStatement_Statement' LowerBound='484.1' HigherBound='540.1'>
                                            <om:Property Name='InitializedTransactionType' Value='True' />
                                            <om:Property Name='IsSynchronized' Value='True' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Document Processing With CheckList Item' />
                                            <om:Property Name='Signal' Value='False' />
                                            <om:Element Type='Decision' OID='7149b1d3-f7da-45ac-aca8-8029f1f00803' ParentLink='ComplexStatement_Statement' LowerBound='489.1' HigherBound='538.1'>
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='CheckList Item SFID Exists?' />
                                                <om:Property Name='Signal' Value='True' />
                                                <om:Element Type='DecisionBranch' OID='f9f0d72f-c734-48b0-83df-790878891e54' ParentLink='ReallyComplexStatement_Branch' LowerBound='490.41' HigherBound='531.1'>
                                                    <om:Property Name='Expression' Value='(!System.String.IsNullOrWhiteSpace(DocCheckListItemSFID))&amp;&amp;(DocCheckListItemSFID != &quot;0&quot;)' />
                                                    <om:Property Name='IsGhostBranch' Value='True' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='CheckList Item' />
                                                    <om:Property Name='Signal' Value='False' />
                                                    <om:Element Type='Construct' OID='3b32c034-68ad-4e02-b6bc-e932b2889a48' ParentLink='ComplexStatement_Statement' LowerBound='492.1' HigherBound='504.1'>
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Validate Document Exists on CheckList Item' />
                                                        <om:Property Name='Signal' Value='True' />
                                                        <om:Element Type='Transform' OID='f6993634-de1c-404b-b1f0-dd4940bc3ada' ParentLink='ComplexStatement_Statement' LowerBound='495.1' HigherBound='497.1'>
                                                            <om:Property Name='ClassName' Value='DLAPDocumentUploadLogic.MakeContentDocumentLinkSelectCheckListItemRequest' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Name' Value='Make Content DocumentLink Select CheckList Item Request' />
                                                            <om:Property Name='Signal' Value='True' />
                                                            <om:Element Type='MessagePartRef' OID='dabfa97c-4a41-4d16-b661-950cb4816c84' ParentLink='Transform_InputMessagePartRef' LowerBound='496.193' HigherBound='496.229'>
                                                                <om:Property Name='MessageRef' Value='DocumentUploadRequestMsg' />
                                                                <om:Property Name='PartRef' Value='MessagePart' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='MessagePartReference_5' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                            <om:Element Type='MessagePartRef' OID='a33f2ecd-2df7-40af-b2c9-e1d1a0b7aaaf' ParentLink='Transform_OutputMessagePartRef' LowerBound='496.60' HigherBound='496.114'>
                                                                <om:Property Name='MessageRef' Value='RestChecklistItemDocumentDetailsRequestMsg' />
                                                                <om:Property Name='PartRef' Value='MessagePart' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='MessagePartReference_6' />
                                                                <om:Property Name='Signal' Value='False' />
                                                            </om:Element>
                                                        </om:Element>
                                                        <om:Element Type='MessageAssignment' OID='970a1f2b-8679-4456-b25b-a75e479a1621' ParentLink='ComplexStatement_Statement' LowerBound='497.1' HigherBound='503.1'>
                                                            <om:Property Name='Expression' Value='SOQL_ContentDocument_QUERY = @&quot;SELECT LinkedEntityId,ContentDocument.Id,ContentDocument.LatestPublishedVersion.Id FROM ContentDocumentLink WHERE LinkedEntityId IN &quot;+&quot;(&quot;+&quot;&apos;&quot;+DocCheckListItemSFID+&quot;&apos;&quot;+&quot;)&quot;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;RestChecklistItemDocumentDetailsRequestMsg(DLAPDocumentUploadSalesForceDefinition.Rest.SOQL_ContentDocument_Query) = SOQL_ContentDocument_QUERY; &#xD;&#xA;&#xD;&#xA;' />
                                                            <om:Property Name='ReportToAnalyst' Value='False' />
                                                            <om:Property Name='Name' Value='Make SOQL' />
                                                            <om:Property Name='Signal' Value='True' />
                                                        </om:Element>
                                                        <om:Element Type='MessageRef' OID='42bc8a50-9eaf-4a4c-bb8f-a72cb7034274' ParentLink='Construct_MessageRef' LowerBound='493.55' HigherBound='493.97'>
                                                            <om:Property Name='Ref' Value='RestChecklistItemDocumentDetailsRequestMsg' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Signal' Value='False' />
                                                        </om:Element>
                                                    </om:Element>
                                                    <om:Element Type='Send' OID='b51ab617-4c1d-4bde-a6dd-3716ccdafc5d' ParentLink='ComplexStatement_Statement' LowerBound='504.1' HigherBound='506.1'>
                                                        <om:Property Name='PortName' Value='RestCheckListContentDocumentQueryPort' />
                                                        <om:Property Name='MessageName' Value='RestChecklistItemDocumentDetailsRequestMsg' />
                                                        <om:Property Name='OperationName' Value='Operation' />
                                                        <om:Property Name='OperationMessageName' Value='Request' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Send Content Version Request' />
                                                        <om:Property Name='Signal' Value='True' />
                                                    </om:Element>
                                                    <om:Element Type='Receive' OID='9bb29ffc-1fa7-4ef0-8625-c7c553fa124d' ParentLink='ComplexStatement_Statement' LowerBound='506.1' HigherBound='508.1'>
                                                        <om:Property Name='Activate' Value='False' />
                                                        <om:Property Name='PortName' Value='RestCheckListContentDocumentQueryPort' />
                                                        <om:Property Name='MessageName' Value='RestChecklistItemDocumentDetailsResponseMsg' />
                                                        <om:Property Name='OperationName' Value='Operation' />
                                                        <om:Property Name='OperationMessageName' Value='Response' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Receive Checklist Item Document Response' />
                                                        <om:Property Name='Signal' Value='True' />
                                                    </om:Element>
                                                    <om:Element Type='VariableAssignment' OID='6a957d47-0636-4cec-9633-983e36832521' ParentLink='ComplexStatement_Statement' LowerBound='508.1' HigherBound='519.1'>
                                                        <om:Property Name='Expression' Value='// Validating CheckList Item Id and Check List Item Document&#xD;&#xA;&#xD;&#xA;ExistedCheckListItemDocumentContentSFID = xpath(RestChecklistItemDocumentDetailsResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;QueryResult&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument&apos;]/*[local-name()=&apos;ContentDocument&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument&apos;]/*[local-name()=&apos;Id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument&apos;])&quot;);&#xD;&#xA;CheckListDocumentCount = xpath(RestChecklistItemDocumentDetailsResponseMsg.MessagePart,&quot;string(/*[local-name()=&apos;QueryResult&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument&apos;]/*[local-name()=&apos;totalSize&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument&apos;])&quot;);&#xD;&#xA;if(CheckListDocumentCount != 0)&#xD;&#xA;{CheckListDocumentStatus = true;}&#xD;&#xA;&#xD;&#xA;else {CheckListDocumentStatus = false;}&#xD;&#xA;&#xD;&#xA;CheckListItemFlag = true;' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Validating Checklits Item with Document' />
                                                        <om:Property Name='Signal' Value='True' />
                                                    </om:Element>
                                                    <om:Element Type='Decision' OID='083779eb-2fb2-4975-acd8-0632eada672d' ParentLink='ComplexStatement_Statement' LowerBound='519.1' HigherBound='530.1'>
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Checklits Item Exists with Document?' />
                                                        <om:Property Name='Signal' Value='True' />
                                                        <om:Element Type='DecisionBranch' OID='16521e19-a3f4-4f0e-901b-4fe417b9436e' ParentLink='ReallyComplexStatement_Branch' LowerBound='520.45' HigherBound='525.1'>
                                                            <om:Property Name='Expression' Value='CheckListDocumentStatus == true' />
                                                            <om:Property Name='IsGhostBranch' Value='True' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Name' Value='CheckList Contains Document' />
                                                            <om:Property Name='Signal' Value='False' />
                                                            <om:Element Type='Call' OID='fb894cf1-41cb-4c73-a856-98ae84e5beb5' ParentLink='ComplexStatement_Statement' LowerBound='522.1' HigherBound='524.1'>
                                                                <om:Property Name='Identifier' Value='CallOrchestration_7' />
                                                                <om:Property Name='Invokee' Value='DLAPDocument.UploadUpdatingCheckListItemDocumentProccessingLogic' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Call Updating CheckList Item Document Proccessing Logic' />
                                                                <om:Property Name='Signal' Value='False' />
                                                                <om:Element Type='Parameter' OID='7fe70878-1611-4093-8348-f36aadf279b8' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='DocumentUploadResponseMsg' />
                                                                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadResponseType' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='66091f27-9845-474c-bbf9-4323fb115b33' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='DocumentUploadRequestMsg' />
                                                                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadRequestType' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='2a0b1ab7-b838-4fab-af09-4a7a174ff6fd' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='Flag' />
                                                                    <om:Property Name='Type' Value='System.Boolean' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='fc08e229-60a3-47d8-adc5-68bc2b82880b' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='CheckListResponseStatus' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='b16078ab-2e68-43e6-b799-918029ba74b0' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='DocCheckListItemSFID' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='4d18eb53-ab2d-44c5-a720-7350a57eb1b1' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='ExistedCheckListItemDocumentContentSFID' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                            </om:Element>
                                                        </om:Element>
                                                        <om:Element Type='DecisionBranch' OID='2a19c504-a56b-4386-80d1-72acdc9811a7' ParentLink='ReallyComplexStatement_Branch'>
                                                            <om:Property Name='IsGhostBranch' Value='True' />
                                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                                            <om:Property Name='Name' Value='Else' />
                                                            <om:Property Name='Signal' Value='False' />
                                                            <om:Element Type='Call' OID='65101213-93c3-4fc8-a143-7d85dd7d0f23' ParentLink='ComplexStatement_Statement' LowerBound='527.1' HigherBound='529.1'>
                                                                <om:Property Name='Identifier' Value='CallOrchestration_5' />
                                                                <om:Property Name='Invokee' Value='DLAPDocument.UploadChildLogic' />
                                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                                <om:Property Name='Name' Value='Call Document Processing Orchestration' />
                                                                <om:Property Name='Signal' Value='True' />
                                                                <om:Element Type='Parameter' OID='eec0a4c0-33ed-4f52-8c70-1eefee598175' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='Empty' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='8ca2eaeb-d973-4ff0-bbd6-4486bf5778bf' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='Empty' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='d426fcf3-f106-4abc-ab5a-a275d2a4d4b0' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='DocCheckListItemSFID' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='6f0369a3-beba-4cb7-9ffd-bf7c5f3c4ff5' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='ContentDocumentlinkSFID' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='6e37255a-95e6-4703-8e76-e17cc5744cb3' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='ResponseStatus' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='05498f43-3bb2-4417-b630-7bf9068bece5' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='Flag' />
                                                                    <om:Property Name='Type' Value='System.Boolean' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='25d4ee3c-7c97-463c-986e-b0bbeae6fdc6' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='DocumentUploadResponseMsg' />
                                                                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadResponseType' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='cc680b82-1ec5-4d3f-b969-f04dfd35b7ae' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='DocumentUploadRequestMsg' />
                                                                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadRequestType' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='5386d549-a9c4-4a71-971f-84c6840937c4' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='In' />
                                                                    <om:Property Name='Name' Value='CheckListItemFlag' />
                                                                    <om:Property Name='Type' Value='System.Boolean' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                                <om:Element Type='Parameter' OID='43ed55c4-ee9b-4206-9025-9fe89c3f2dc1' ParentLink='InvokeStatement_Parameter'>
                                                                    <om:Property Name='Direction' Value='Out' />
                                                                    <om:Property Name='Name' Value='CheckListResponseStatus' />
                                                                    <om:Property Name='Type' Value='System.String' />
                                                                    <om:Property Name='Signal' Value='False' />
                                                                </om:Element>
                                                            </om:Element>
                                                        </om:Element>
                                                    </om:Element>
                                                </om:Element>
                                                <om:Element Type='DecisionBranch' OID='6fd0fc6e-e5db-4104-9ca2-65b4cfbcf2c5' ParentLink='ReallyComplexStatement_Branch'>
                                                    <om:Property Name='IsGhostBranch' Value='True' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Else' />
                                                    <om:Property Name='Signal' Value='False' />
                                                    <om:Element Type='VariableAssignment' OID='edbe7f9b-24b2-4882-ac1d-c6e4a2658447' ParentLink='ComplexStatement_Statement' LowerBound='533.1' HigherBound='537.1'>
                                                        <om:Property Name='Expression' Value='Flag = true;&#xD;&#xA;&#xD;&#xA;CheckListResponseStatus = &quot;Success&quot;;&#xD;&#xA;' />
                                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                                        <om:Property Name='Name' Value='Flag' />
                                                        <om:Property Name='Signal' Value='False' />
                                                    </om:Element>
                                                </om:Element>
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='990bffb8-2acd-44e5-a5fe-3442f1daf522' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Error Document Response' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Construct' OID='aa683018-93b4-489b-9755-9b414f46e8d3' ParentLink='ComplexStatement_Statement' LowerBound='545.1' HigherBound='556.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Construct Document Error Response' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='MessageAssignment' OID='b70d0c94-5736-4985-bf61-445640df8d8e' ParentLink='ComplexStatement_Statement' LowerBound='548.1' HigherBound='555.1'>
                                        <om:Property Name='Expression' Value='TempDocResponseXml = new System.Xml.XmlDocument();&#xD;&#xA;&#xD;&#xA;TempDocResponseXml.LoadXml(@&quot;&lt;ns0:DOCUMENTRESPONSE xmlns:ns0=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;&gt;&lt;Upload_Status&gt;&quot;+&quot;FAILED&quot;+&quot;&lt;/Upload_Status&gt;&lt;Upload_Status_Details&gt;&quot;+&quot;Exception:ApplicationNumber(or)ActionId(or)DLAPUserID couldn’t be found thus the file wasn’t saved&quot;+&quot;&lt;/Upload_Status_Details&gt;&lt;/ns0:DOCUMENTRESPONSE&gt;&quot;);&#xD;&#xA;&#xD;&#xA;DocumentUploadResponseMsg.MessagePart = TempDocResponseXml; &#xD;&#xA;&#xD;&#xA;' />
                                        <om:Property Name='ReportToAnalyst' Value='False' />
                                        <om:Property Name='Name' Value='Make Document Error Response Msg' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                    <om:Element Type='MessageRef' OID='80bc1d84-111e-4bd1-8802-e076ec17c282' ParentLink='Construct_MessageRef' LowerBound='546.35' HigherBound='546.60'>
                                        <om:Property Name='Ref' Value='DocumentUploadResponseMsg' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='bf700bcc-c26d-4669-98da-1365d4e6de45' ParentLink='ComplexStatement_Statement' LowerBound='556.1' HigherBound='572.1'>
                                    <om:Property Name='Expression' Value='ApplicationNumber = DocApplicationId;&#xD;&#xA;&#xD;&#xA;Message = &quot;DLAP Document Upload Exception:- DOC APPLICANT ID or DOC_CONTENTS couldn’t be found on the DLAP Request&quot;;&#xD;&#xA;&#xD;&#xA;OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;&#xD;&#xA;&#xD;&#xA;SalesForceObjectId = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;SalesForceObjectName=&quot;Appplication&quot;;&#xD;&#xA;&#xD;&#xA;Stage =&quot;Document Received&quot;;&#xD;&#xA;&#xD;&#xA;Status = &quot;Error&quot;;&#xD;&#xA;&#xD;&#xA;Flag = false;&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Set Error Values For Salesforce' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Decision' OID='b020d6d5-e782-4437-8d03-2e6cd8d0420a' ParentLink='ComplexStatement_Statement' LowerBound='573.1' HigherBound='626.1'>
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Decide Event Status' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='DecisionBranch' OID='cf7b41db-6202-4886-9d8a-146c08a20849' ParentLink='ReallyComplexStatement_Branch' LowerBound='574.21' HigherBound='618.1'>
                                <om:Property Name='Expression' Value='(((Flag != false)&amp;&amp;(ResponseStatus == &quot;Success&quot;))&amp;&amp;((Flag != false)&amp;&amp;(CheckListResponseStatus  == &quot;Success&quot;)))&#xD;&#xA;' />
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Success Event' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='Decision' OID='8c8395f0-500a-4966-9504-f7c3962b8049' ParentLink='ComplexStatement_Statement' LowerBound='576.1' HigherBound='602.1'>
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Check List Item Exist?' />
                                    <om:Property Name='Signal' Value='True' />
                                    <om:Element Type='DecisionBranch' OID='4888834b-286a-4cda-b132-b93a5ab5379d' ParentLink='ReallyComplexStatement_Branch' LowerBound='577.25' HigherBound='602.1'>
                                        <om:Property Name='Expression' Value='DocCheckListItemSFID != &quot;0&quot;' />
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Valid CheckList Item' />
                                        <om:Property Name='Signal' Value='True' />
                                        <om:Element Type='Construct' OID='22f236be-2203-4d54-8927-940430615854' ParentLink='ComplexStatement_Statement' LowerBound='579.1' HigherBound='585.1'>
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Construct CheckListItem Update Request Msg' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='Transform' OID='40e397fb-13ec-4661-95aa-fdd58705ac7f' ParentLink='ComplexStatement_Statement' LowerBound='582.1' HigherBound='584.1'>
                                                <om:Property Name='ClassName' Value='DLAPDocumentUploadLogic.MakeCheckListItemUpdateRequest' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Make CheckList Item Update Request' />
                                                <om:Property Name='Signal' Value='False' />
                                                <om:Element Type='MessagePartRef' OID='939814ed-1682-4a08-90d5-35a8084c2907' ParentLink='Transform_OutputMessagePartRef' LowerBound='583.44' HigherBound='583.89'>
                                                    <om:Property Name='MessageRef' Value='RestChecklistItemUpdateRequestMsg' />
                                                    <om:Property Name='PartRef' Value='MessagePart' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='MessagePartReference_4' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                                <om:Element Type='MessagePartRef' OID='5edc16d9-0f52-47d0-8454-96cc890b72d2' ParentLink='Transform_InputMessagePartRef' LowerBound='583.149' HigherBound='583.185'>
                                                    <om:Property Name='MessageRef' Value='DocumentUploadRequestMsg' />
                                                    <om:Property Name='PartRef' Value='MessagePart' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='MessagePartReference_3' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                            </om:Element>
                                            <om:Element Type='MessageRef' OID='cae9c687-b9da-4e40-9457-41268c8e42a0' ParentLink='Construct_MessageRef' LowerBound='580.39' HigherBound='580.72'>
                                                <om:Property Name='Ref' Value='RestChecklistItemUpdateRequestMsg' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                        <om:Element Type='Send' OID='d3b559f2-c3a4-4c02-8525-eec6113794d0' ParentLink='ComplexStatement_Statement' LowerBound='585.1' HigherBound='587.1'>
                                            <om:Property Name='PortName' Value='RestCheckListItemUpdatePort' />
                                            <om:Property Name='MessageName' Value='RestChecklistItemUpdateRequestMsg' />
                                            <om:Property Name='OperationName' Value='Operation' />
                                            <om:Property Name='OperationMessageName' Value='Request' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Send CheckList Item Update Request' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='Receive' OID='b1327f04-c213-490c-9ef4-c4ae4706fbf2' ParentLink='ComplexStatement_Statement' LowerBound='587.1' HigherBound='589.1'>
                                            <om:Property Name='Activate' Value='False' />
                                            <om:Property Name='PortName' Value='RestCheckListItemUpdatePort' />
                                            <om:Property Name='MessageName' Value='RestChecklistItemUpdateResponseMsg' />
                                            <om:Property Name='OperationName' Value='Operation' />
                                            <om:Property Name='OperationMessageName' Value='Response' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Receive CheckList Item Response' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='VariableAssignment' OID='c36020a1-7200-4f52-9064-c218d3b2b115' ParentLink='ComplexStatement_Statement' LowerBound='589.1' HigherBound='593.1'>
                                            <om:Property Name='Expression' Value='RestCheckListItemUpdateMessage = xpath(RestChecklistItemUpdateResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem&apos;]/*[local-name()=&apos;errors&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem&apos;]/*[local-name()=&apos;message&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;RestCheckListItemUpdateSFID = xpath(RestChecklistItemUpdateResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem&apos;]/*[local-name()=&apos;id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem&apos;])&quot;);' />
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Extract Rest Response Values' />
                                            <om:Property Name='Signal' Value='True' />
                                        </om:Element>
                                        <om:Element Type='Decision' OID='43333bdd-d4a4-4d41-be13-3cb02bee5426' ParentLink='ComplexStatement_Statement' LowerBound='593.1' HigherBound='601.1'>
                                            <om:Property Name='ReportToAnalyst' Value='True' />
                                            <om:Property Name='Name' Value='Valid Response' />
                                            <om:Property Name='Signal' Value='True' />
                                            <om:Element Type='DecisionBranch' OID='02978cff-7040-4e15-9985-c9a75dff7510' ParentLink='ReallyComplexStatement_Branch' LowerBound='594.29' HigherBound='601.1'>
                                                <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(RestCheckListItemUpdateMessage) &amp;&amp; (RestCheckListItemUpdateSFID.Length == 0)' />
                                                <om:Property Name='IsGhostBranch' Value='True' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Error' />
                                                <om:Property Name='Signal' Value='True' />
                                                <om:Element Type='VariableAssignment' OID='327d9500-082c-4950-9cd0-2608a6277124' ParentLink='ComplexStatement_Statement' LowerBound='596.1' HigherBound='598.1'>
                                                    <om:Property Name='Expression' Value='RestCheckListItemUpdateException = new System.Exception(&quot;DLAP Document Upload Rest Exception Occurred- &quot;+RestCheckListItemUpdateMessage);' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Rest Exception' />
                                                    <om:Property Name='Signal' Value='False' />
                                                </om:Element>
                                                <om:Element Type='Throw' OID='2cde09a1-9b41-4859-947e-15f9f8f37630' ParentLink='ComplexStatement_Statement' LowerBound='598.1' HigherBound='600.1'>
                                                    <om:Property Name='ThrownReference' Value='RestCheckListItemUpdateException' />
                                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                                    <om:Property Name='Name' Value='Rest Error ' />
                                                    <om:Property Name='Signal' Value='True' />
                                                </om:Element>
                                            </om:Element>
                                            <om:Element Type='DecisionBranch' OID='ded1f340-960d-4395-b944-189ba2348d31' ParentLink='ReallyComplexStatement_Branch'>
                                                <om:Property Name='IsGhostBranch' Value='True' />
                                                <om:Property Name='ReportToAnalyst' Value='True' />
                                                <om:Property Name='Name' Value='Else' />
                                                <om:Property Name='Signal' Value='False' />
                                            </om:Element>
                                        </om:Element>
                                    </om:Element>
                                    <om:Element Type='DecisionBranch' OID='6e6f9e90-9255-48b2-9662-4f2a09628bdc' ParentLink='ReallyComplexStatement_Branch'>
                                        <om:Property Name='IsGhostBranch' Value='True' />
                                        <om:Property Name='ReportToAnalyst' Value='True' />
                                        <om:Property Name='Name' Value='Else' />
                                        <om:Property Name='Signal' Value='False' />
                                    </om:Element>
                                </om:Element>
                                <om:Element Type='VariableAssignment' OID='7740c3e1-c54c-4f33-842b-a13e512a50e5' ParentLink='ComplexStatement_Statement' LowerBound='602.1' HigherBound='617.1'>
                                    <om:Property Name='Expression' Value='ApplicationNumber = DocApplicationId;&#xD;&#xA;&#xD;&#xA;SalesForceObjectName=&quot;Appplication&quot;;&#xD;&#xA;&#xD;&#xA;SalesForceObjectId = ContentDocumentlinkSFID;&#xD;&#xA;&#xD;&#xA;OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;&#xD;&#xA;&#xD;&#xA;Stage =&quot;Document Received&quot;;&#xD;&#xA;&#xD;&#xA;Status = &quot;Success&quot;;&#xD;&#xA;&#xD;&#xA;Message =&quot;DLAP Document Sucessfully Uploaded&quot;;&#xD;&#xA;&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Set Success Values For Salesforce' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='DecisionBranch' OID='14c0b1a0-a67d-4ff4-a2c7-0028a81add6b' ParentLink='ReallyComplexStatement_Branch'>
                                <om:Property Name='IsGhostBranch' Value='True' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Else' />
                                <om:Property Name='Signal' Value='False' />
                                <om:Element Type='VariableAssignment' OID='ada471d7-cb3a-48f6-bc63-a51150f9bea7' ParentLink='ComplexStatement_Statement' LowerBound='620.1' HigherBound='625.1'>
                                    <om:Property Name='Expression' Value='&#xD;&#xA;OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;&#xD;&#xA;&#xD;&#xA;Message =&quot;DLAP Document Upload Failed  &quot;+ MessageL;&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Name' Value='Set Error Values For Salesforce' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='Catch' OID='00b68701-1c9c-4a27-942a-af2d766b3340' ParentLink='Scope_Catch' LowerBound='629.1' HigherBound='697.1'>
                            <om:Property Name='ExceptionName' Value='UEx' />
                            <om:Property Name='ExceptionType' Value='System.Exception' />
                            <om:Property Name='IsFaultMessage' Value='False' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='System Exception' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='d8362836-01b5-47a4-94ab-dc42abeaf90c' ParentLink='Catch_Statement' LowerBound='632.1' HigherBound='679.1'>
                                <om:Property Name='Expression' Value='if(UEx.InnerException != null)&#xD;&#xA;{&#xD;&#xA;MessageTemp = UEx.InnerException.ToString();&#xD;&#xA;&#xD;&#xA;Message = MessageTemp.Substring(0, System.Convert.ToInt32(System.Math.Min(900, MessageTemp.Length))) +&quot;Total String Length:&quot;+MessageTemp.Length.ToString();&#xD;&#xA;&#xD;&#xA;System.Diagnostics.EventLog.WriteEntry(&quot;DLAP Document Upload Exception &quot;,Message,System.Diagnostics.EventLogEntryType.Error);&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;MessageTemp = UEx.Message.ToString();&#xD;&#xA;&#xD;&#xA;Message = MessageTemp.Substring(0, System.Convert.ToInt32(System.Math.Min(900, MessageTemp.Length))) +&quot;Total String Length:&quot;+MessageTemp.Length.ToString();&#xD;&#xA;&#xD;&#xA;System.Diagnostics.EventLog.WriteEntry(&quot;DLAP Document Upload Exception&quot;,Message , System.Diagnostics.EventLogEntryType.Error);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;ApplicationNumber = DocApplicationId;&#xD;&#xA;&#xD;&#xA;OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;&#xD;&#xA;&#xD;&#xA;SalesForceObjectName=&quot;Appplication&quot;;&#xD;&#xA;&#xD;&#xA;Stage = &quot;Document Received&quot;;&#xD;&#xA;&#xD;&#xA;Status = &quot;Error&quot;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Set Error Values For Salesforce' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Construct' OID='0c6969d3-155f-4f72-a714-179417935893' ParentLink='Catch_Statement' LowerBound='679.1' HigherBound='690.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Construct Document Upload Fault Response Msg' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageAssignment' OID='627973a9-c27c-4ac5-b9c6-da5f485240f3' ParentLink='ComplexStatement_Statement' LowerBound='682.1' HigherBound='689.1'>
                                    <om:Property Name='Expression' Value='TempFaultResponse = new System.Xml.XmlDocument();&#xD;&#xA;&#xD;&#xA;TempFaultResponse.LoadXml(@&quot;&lt;ns0:Fault xmlns:ns0=&apos;http://SBA.gov/DLAPDocumentUploadDefinition/Fault&apos;&gt;&lt;FaultString&gt;Exception:Internal Error&lt;/FaultString&gt;&lt;FaultCode&gt;An error occurred while processing the DLAP Document Upload&lt;/FaultCode&gt;&lt;/ns0:Fault&gt;&quot;);&#xD;&#xA;&#xD;&#xA;DocumentUploadFaultResponseMsg.MessagePart = TempFaultResponse;&#xD;&#xA;&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Document Upload Fault Response' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                                <om:Element Type='MessageRef' OID='b6ac2f1d-ece2-497f-8597-c3ad050adf26' ParentLink='Construct_MessageRef' LowerBound='680.35' HigherBound='680.65'>
                                    <om:Property Name='Ref' Value='DocumentUploadFaultResponseMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Send' OID='fb9c136f-ae5d-4f55-aafc-e4649c4bc821' ParentLink='Catch_Statement' LowerBound='690.1' HigherBound='692.1'>
                                <om:Property Name='PortName' Value='DocumentUploadPort' />
                                <om:Property Name='MessageName' Value='DocumentUploadFaultResponseMsg' />
                                <om:Property Name='OperationName' Value='Operation' />
                                <om:Property Name='OperationMessageName' Value='Fault' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Send Document Upload Fault Response' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Call' OID='5764a00c-21c0-4342-a654-3a159ef2a9e4' ParentLink='Catch_Statement' LowerBound='692.1' HigherBound='694.1'>
                                <om:Property Name='Identifier' Value='CallOrchestration_3' />
                                <om:Property Name='Invokee' Value='DLAPDocument.UploadEventRequest' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Call SalesForce Event Logging Orchestration' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='Parameter' OID='55a7387a-e168-49f2-93b1-cc0b22b8b316' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='ApplicationNumber' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='7914393b-e6fd-4806-a75a-631f47c82204' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='SalesForceObjectId' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='6d478853-5033-426f-a99a-b02d34679c55' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Message' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='99f4002f-6849-4ff9-a691-1d755a54de33' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='SalesForceObjectName' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='a3e73244-2323-45c0-88d4-3b5f06e84d3a' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Stage' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='02287db7-3e5c-4ce8-a317-ada789b1238b' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Status' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='1d05305e-00fe-4e9a-a59c-3121b19042c4' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='Empty' />
                                    <om:Property Name='Type' Value='System.String' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='Parameter' OID='6983c408-55fe-45a2-9e6a-cce477e94f99' ParentLink='InvokeStatement_Parameter'>
                                    <om:Property Name='Direction' Value='In' />
                                    <om:Property Name='Name' Value='OrchestrationInstanceId' />
                                    <om:Property Name='Type' Value='System.Guid' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                            </om:Element>
                            <om:Element Type='Terminate' OID='135509e6-3bc5-4be0-b621-38ab6db3eb90' ParentLink='Catch_Statement' LowerBound='694.1' HigherBound='696.1'>
                                <om:Property Name='ErrorMessage' Value='&quot;An error occurred while processing the Salesfroce DLAP Document Upload&quot;;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Terminate' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Decision' OID='019728bc-357d-47d9-bf2f-6708c3ae5e4d' ParentLink='ComplexStatement_Statement' LowerBound='699.1' HigherBound='728.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Success or Error Response?' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='418e83cb-d05b-42b2-b615-1c2fd013c5ba' ParentLink='ReallyComplexStatement_Branch' LowerBound='700.13' HigherBound='714.1'>
                            <om:Property Name='Expression' Value='(((Flag != false)&amp;&amp;(ResponseStatus == &quot;Success&quot;))&amp;&amp;((Flag != false)&amp;&amp;(CheckListResponseStatus  == &quot;Success&quot;)))&#xD;&#xA;' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='DLAP Success Response' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='Construct' OID='5dd0f130-68c0-405f-a7e7-e0b2960bc932' ParentLink='ComplexStatement_Statement' LowerBound='702.1' HigherBound='713.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Construct Document Success Response' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageRef' OID='81d1f4d4-62bf-4e29-b028-109742a5c8fb' ParentLink='Construct_MessageRef' LowerBound='703.27' HigherBound='703.52'>
                                    <om:Property Name='Ref' Value='DocumentUploadResponseMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageAssignment' OID='9b258b29-3623-42b2-98a0-6719e768f3ff' ParentLink='ComplexStatement_Statement' LowerBound='705.1' HigherBound='712.1'>
                                    <om:Property Name='Expression' Value='FinalTempDocResponseXml = new System.Xml.XmlDocument();&#xD;&#xA;&#xD;&#xA;TempDocResponseXml.LoadXml(@&quot;&lt;ns0:DOCUMENTRESPONSE xmlns:ns0=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;&gt;&lt;Upload_Status&gt;&quot;+&quot;Success&quot;+&quot;&lt;/Upload_Status&gt;&lt;Upload_Status_Details&gt;&quot;+&quot;File Uploaded Successfully&quot;+&quot;&lt;/Upload_Status_Details&gt;&lt;/ns0:DOCUMENTRESPONSE&gt;&quot;);&#xD;&#xA;&#xD;&#xA;DocumentUploadResponseMsg.MessagePart = TempDocResponseXml; &#xD;&#xA;&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Make Document Success Response Msg' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='a54fc175-cbef-46dc-84b6-278a5b818c27' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='Construct' OID='f263f485-9bb4-4197-a6aa-de1fb059be25' ParentLink='ComplexStatement_Statement' LowerBound='716.1' HigherBound='727.1'>
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Construct Document Error Response' />
                                <om:Property Name='Signal' Value='True' />
                                <om:Element Type='MessageRef' OID='c17568f6-15b9-4969-a78e-712151782062' ParentLink='Construct_MessageRef' LowerBound='717.27' HigherBound='717.52'>
                                    <om:Property Name='Ref' Value='DocumentUploadResponseMsg' />
                                    <om:Property Name='ReportToAnalyst' Value='True' />
                                    <om:Property Name='Signal' Value='False' />
                                </om:Element>
                                <om:Element Type='MessageAssignment' OID='953f9595-2996-4805-91a1-6dea7bc18f07' ParentLink='ComplexStatement_Statement' LowerBound='719.1' HigherBound='726.1'>
                                    <om:Property Name='Expression' Value='TempDocResponseXml = new System.Xml.XmlDocument();&#xD;&#xA;&#xD;&#xA;TempDocResponseXml.LoadXml(@&quot;&lt;ns0:DOCUMENTRESPONSE xmlns:ns0=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;&gt;&lt;Upload_Status&gt;&quot;+&quot;FAILED&quot;+&quot;&lt;/Upload_Status&gt;&lt;Upload_Status_Details&gt;&quot;+&quot;Exception: File wasn’t saved  &quot;+MessageL+&quot;&lt;/Upload_Status_Details&gt;&lt;/ns0:DOCUMENTRESPONSE&gt;&quot;);&#xD;&#xA;&#xD;&#xA;DocumentUploadResponseMsg.MessagePart = TempDocResponseXml; &#xD;&#xA;&#xD;&#xA;' />
                                    <om:Property Name='ReportToAnalyst' Value='False' />
                                    <om:Property Name='Name' Value='Make Document Error Response Msg' />
                                    <om:Property Name='Signal' Value='True' />
                                </om:Element>
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Send' OID='092d5d55-4599-4602-9664-2674f9fb7a38' ParentLink='ComplexStatement_Statement' LowerBound='728.1' HigherBound='730.1'>
                        <om:Property Name='PortName' Value='DocumentUploadPort' />
                        <om:Property Name='MessageName' Value='DocumentUploadResponseMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Response' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Send Document Upload Response' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Call' OID='84453f61-57a9-4fd0-8ecb-a9af8852e9c7' ParentLink='ComplexStatement_Statement' LowerBound='730.1' HigherBound='732.1'>
                        <om:Property Name='Identifier' Value='CallOrchestration_1' />
                        <om:Property Name='Invokee' Value='DLAPDocument.UploadEventRequest' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Call SalesForce Event Logging Orchestration' />
                        <om:Property Name='Signal' Value='False' />
                        <om:Element Type='Parameter' OID='b17067b2-ad92-4dd1-bcc3-954b14915456' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='ApplicationNumber' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='8b3bfdf0-aee4-40c4-aded-710cdd6a9f20' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='SalesForceObjectId' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='848785ba-0c36-4559-a783-2b4ae27ae14b' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='Message' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='beace6e8-568f-4195-bcc9-b03a03c63b18' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='SalesForceObjectName' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='b6e5c89f-8bdf-4889-80e6-451938cbef5d' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='Stage' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='8bb23e61-1e07-4448-b8d9-dbcb96f3a1a1' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='Status' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='5bf7d3a9-a9a0-45c8-ae96-04379c9894a0' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='Empty' />
                            <om:Property Name='Type' Value='System.String' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Parameter' OID='5b441b29-71be-4f42-9d57-b1b96764766f' ParentLink='InvokeStatement_Parameter'>
                            <om:Property Name='Direction' Value='In' />
                            <om:Property Name='Name' Value='OrchestrationInstanceId' />
                            <om:Property Name='Type' Value='System.Guid' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='a3e34223-4995-4a5b-adcb-5aa5b078405d' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='149.1' HigherBound='151.1'>
                <om:Property Name='PortModifier' Value='Implements' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='4' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.DocumentUploadPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='DocumentUploadPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='1540e276-e21c-407e-81f0-77d425be58df' ParentLink='PortDeclaration_CLRAttribute' LowerBound='149.1' HigherBound='150.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='fe670d81-f891-48e5-a253-3694b4cd467b' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='151.1' HigherBound='153.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='34' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestApplicationIdQueryPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestApplicationIdQueryPort' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='LogicalBindingAttribute' OID='9066a3b5-7e4b-4027-9ebc-a54173045335' ParentLink='PortDeclaration_CLRAttribute' LowerBound='151.1' HigherBound='152.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='5b639bd9-cff4-4705-a0e1-004488801326' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='153.1' HigherBound='155.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='90' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestReceiptDocumentInsetPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestReceiptDocumentInsetPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='c00e6a83-cc52-42cd-ab44-8da88703b301' ParentLink='PortDeclaration_CLRAttribute' LowerBound='153.1' HigherBound='154.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='a3e68233-7a3f-441e-8df0-d1e157f9f7e1' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='155.1' HigherBound='157.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Left' />
                <om:Property Name='PortIndex' Value='73' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestLoanQueryPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestLoanQueryPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='16535427-591f-4ecc-8e02-c5df3cecd287' ParentLink='PortDeclaration_CLRAttribute' LowerBound='155.1' HigherBound='156.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='740905ff-52e8-4913-a2f5-17ee1e10ca8b' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='157.1' HigherBound='159.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='153' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestCheckListItemUpdatePortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCheckListItemUpdatePort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='557899e9-6f6f-49ab-a79a-be30ebc68f4b' ParentLink='PortDeclaration_CLRAttribute' LowerBound='157.1' HigherBound='158.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='e2230d33-123f-488f-85d0-1ba49c007ac7' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='159.1' HigherBound='161.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='69' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestCheckListContentDocumentQueryPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCheckListContentDocumentQueryPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='8f32accd-cf2a-45a2-aa8b-777c781d88d9' ParentLink='PortDeclaration_CLRAttribute' LowerBound='159.1' HigherBound='160.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __UploadParentLogic_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __UploadParentLogic_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "UploadParentLogic")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadParentLogic __svc__ = (UploadParentLogic)_service;
                __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.RestCheckListItemUpdatePort != null)
                {
                    __svc__.RestCheckListItemUpdatePort.Close(this, null);
                    __svc__.RestCheckListItemUpdatePort = null;
                }
                if (__svc__.DocumentUploadPort != null)
                {
                    __svc__.DocumentUploadPort.Close(this, null);
                    __svc__.DocumentUploadPort = null;
                }
                if (__svc__.RestApplicationIdQueryPort != null)
                {
                    __svc__.RestApplicationIdQueryPort.Close(this, null);
                    __svc__.RestApplicationIdQueryPort = null;
                }
                if (__svc__.RestReceiptDocumentInsetPort != null)
                {
                    __svc__.RestReceiptDocumentInsetPort.Close(this, null);
                    __svc__.RestReceiptDocumentInsetPort = null;
                }
                if (__svc__.RestLoanQueryPort != null)
                {
                    __svc__.RestLoanQueryPort.Close(this, null);
                    __svc__.RestLoanQueryPort = null;
                }
                if (__svc__.RestCheckListContentDocumentQueryPort != null)
                {
                    __svc__.RestCheckListContentDocumentQueryPort.Close(this, null);
                    __svc__.RestCheckListContentDocumentQueryPort = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper1;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper2;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper3;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper4;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper5;
        }


        [System.SerializableAttribute]
        public class __UploadParentLogic_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __UploadParentLogic_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "UploadParentLogic")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadParentLogic __svc__ = (UploadParentLogic)_service;
                __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__DocumentUploadRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadRequestMsg);
                    __ctx1__.__DocumentUploadRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__DocumentUploadResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadResponseMsg);
                    __ctx1__.__DocumentUploadResponseMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__Description = null;
                if (__ctx1__ != null)
                    __ctx1__.__Message = null;
                if (__ctx1__ != null)
                    __ctx1__.__MessageTemp = null;
                if (__ctx1__ != null)
                    __ctx1__.__Stage = null;
                if (__ctx1__ != null)
                    __ctx1__.__Status = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesForceObjectName = null;
                if (__ctx1__ != null)
                    __ctx1__.__Title = null;
                if (__ctx1__ != null)
                    __ctx1__.__FinalTempDocResponseXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationNumber = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesForceObjectId = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestCheckListItemUpdateSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempFaultResponse = null;
                if (__ctx1__ != null)
                    __ctx1__.__DocMetaData = null;
                if (__ctx1__ != null)
                    __ctx1__.__CheckListcontentDocumentSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL_ContentDocument_QUERY = null;
                if (__ctx1__ != null)
                    __ctx1__.__LoanName = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL_LoanInfo_QUERY = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestReceiptSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__CheckListResponseStatus = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestCheckListItemUpdateException = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestReceiptException = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestCheckListItemUpdateMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__StatusCheckListResponse = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempMetaData = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestReceiptMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__ExistedCheckListItemDocumentContentSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL_APPLICATION_INFO_QUERY = null;
                if (__ctx1__ != null)
                    __ctx1__.__RECEIPTDOCUMENT_ID = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempMetadataXmlStr = null;
                if (__ctx1__ != null)
                    __ctx1__.__Empty = null;
                if (__ctx1__ != null)
                    __ctx1__.__LoanSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__MessageL = null;
                if (__ctx1__ != null)
                    __ctx1__.__FileExtension = null;
                if (__ctx1__ != null)
                    __ctx1__.__DocApplicationId = null;
                if (__ctx1__ != null)
                    __ctx1__.__PathOnClient = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempContentLinkRequest = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempDocResponseXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__CONTENTVERSION_DOCUMENTID = null;
                if (__ctx1__ != null)
                    __ctx1__.__ResponseStatus = null;
                if (__ctx1__ != null)
                    __ctx1__.__ContentDocumentlinkSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__ReasonForChange = null;
                if (__ctx1__ != null)
                    __ctx1__.__Data = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationID = null;
                if (__ctx1__ != null)
                    __ctx1__.__DocumentType_c = null;
                if (__ctx1__ != null)
                    __ctx1__.__DOCAPPLICANTID = null;
                if (__ctx1__ != null)
                    __ctx1__.__DOC_CONTENTS = null;
                if (__ctx1__ != null)
                    __ctx1__.__DocCheckListItemSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__DLAPUserID = null;
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("RestReceiptDocumentResponseMsg")]
            internal RestReceiptDocumentResponseType __RestReceiptDocumentResponseMsg;  // lock index = 10
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestReceiptDocumentRequestMsg")]
            internal RestReceiptDocumentRequestType __RestReceiptDocumentRequestMsg;  // lock index = 9
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestLoanQueryResponseMsg")]
            internal RestLoanQueryResponseType __RestLoanQueryResponseMsg;  // lock index = 7
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestLoanQueryRequestMsg")]
            internal RestLoanQueryRequestType __RestLoanQueryRequestMsg;  // lock index = 2
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentUploadRequestMsg")]
            internal DocumentUploadRequestType __DocumentUploadRequestMsg;  // lock index = 22
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentUploadResponseMsg")]
            internal DocumentUploadResponseType __DocumentUploadResponseMsg;  // lock index = 21
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentUploadFaultResponseMsg")]
            internal DocumentUploadFaultResponseType __DocumentUploadFaultResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("UploadMetaDataMsg")]
            internal UploadMetaDataType __UploadMetaDataMsg;  // lock index = 1
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestChecklistItemDocumentDetailsRequestMsg")]
            internal RestChecklistItemDocumentDetailsRequestType __RestChecklistItemDocumentDetailsRequestMsg;  // lock index = 34
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestChecklistItemDocumentDetailsResponseMsg")]
            internal RestChecklistItemDocumentDetailsResponseType __RestChecklistItemDocumentDetailsResponseMsg;  // lock index = 36
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestRestApplicationInfoRequestMsg")]
            internal RestApplicationInfoRequestType __RestRestApplicationInfoRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestRestApplicationInfoResponseMsg")]
            internal RestApplicationInfoResponseType __RestRestApplicationInfoResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestChecklistItemUpdateRequestMsg")]
            internal RestChecklistItemUpdateRequestType __RestChecklistItemUpdateRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestChecklistItemUpdateResponseMsg")]
            internal RestChecklistItemUpdateResponseType __RestChecklistItemUpdateResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("FinalTempDocResponseXml")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __FinalTempDocResponseXml;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ApplicationNumber")]
            internal System.String __ApplicationNumber;  // lock index = 26
            [Microsoft.XLANGs.Core.UserVariableAttribute("MessageTemp")]
            internal System.String __MessageTemp;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Message")]
            internal System.String __Message;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SalesForceObjectId")]
            internal System.String __SalesForceObjectId;  // lock index = 29
            [Microsoft.XLANGs.Core.UserVariableAttribute("SalesForceObjectName")]
            internal System.String __SalesForceObjectName;  // lock index = 30
            [Microsoft.XLANGs.Core.UserVariableAttribute("Stage")]
            internal System.String __Stage;  // lock index = 31
            [Microsoft.XLANGs.Core.UserVariableAttribute("Status")]
            internal System.String __Status;  // lock index = 32
            [Microsoft.XLANGs.Core.UserVariableAttribute("Flag")]
            internal System.Boolean __Flag;  // lock index = 20
            [Microsoft.XLANGs.Core.UserVariableAttribute("OrchestrationInstanceId")]
            internal System.Guid __OrchestrationInstanceId;  // lock index = 28
            [Microsoft.XLANGs.Core.UserVariableAttribute("ApplicationExistsFlag")]
            internal System.Boolean __ApplicationExistsFlag;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Title")]
            internal System.String __Title;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Description")]
            internal System.String __Description;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Data")]
            internal System.String __Data;
            [Microsoft.XLANGs.Core.UserVariableAttribute("PathOnClient")]
            internal System.String __PathOnClient;
            [Microsoft.XLANGs.Core.UserVariableAttribute("FileExtension")]
            internal System.String __FileExtension;
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentType_c")]
            internal System.String __DocumentType_c;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ReasonForChange")]
            internal System.String __ReasonForChange;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ApplicationID")]
            internal System.String __ApplicationID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempDocResponseXml")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __TempDocResponseXml;  // lock index = 24
            [Microsoft.XLANGs.Core.UserVariableAttribute("DOCAPPLICANTID")]
            internal System.String __DOCAPPLICANTID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("DOC_CONTENTS")]
            internal System.String __DOC_CONTENTS;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RequestStatus")]
            internal System.Boolean __RequestStatus;
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocApplicationId")]
            internal System.String __DocApplicationId;  // lock index = 25
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocCheckListItemSFID")]
            internal System.String __DocCheckListItemSFID;  // lock index = 33
            [Microsoft.XLANGs.Core.UserVariableAttribute("ApplicationSFID")]
            internal System.String __ApplicationSFID;  // lock index = 16
            [Microsoft.XLANGs.Core.UserVariableAttribute("DLAPUserID")]
            internal System.String __DLAPUserID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempContentLinkRequest")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __TempContentLinkRequest;
            [Microsoft.XLANGs.Core.UserVariableAttribute("CONTENTVERSION_DOCUMENTID")]
            internal System.String __CONTENTVERSION_DOCUMENTID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ResponseStatus")]
            internal System.String __ResponseStatus;  // lock index = 19
            [Microsoft.XLANGs.Core.UserVariableAttribute("ContentDocumentlinkSFID")]
            internal System.String __ContentDocumentlinkSFID;  // lock index = 18
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempFaultResponse")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __TempFaultResponse;
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocMetaData")]
            internal System.String __DocMetaData;  // lock index = 0
            [Microsoft.XLANGs.Core.UserVariableAttribute("RECEIPTDOCUMENT_ID")]
            internal System.String __RECEIPTDOCUMENT_ID;  // lock index = 14
            [Microsoft.XLANGs.Core.UserVariableAttribute("LoanSFID")]
            internal System.String __LoanSFID;  // lock index = 8
            [Microsoft.XLANGs.Core.UserVariableAttribute("MessageL")]
            internal System.String __MessageL;  // lock index = 27
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempMetaData")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __TempMetaData;  // lock index = 3
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempMetadataXmlStr")]
            internal System.String __TempMetadataXmlStr;  // lock index = 4
            [Microsoft.XLANGs.Core.UserVariableAttribute("Empty")]
            internal System.String __Empty;  // lock index = 17
            [Microsoft.XLANGs.Core.UserVariableAttribute("StatusCheckListResponse")]
            internal System.String __StatusCheckListResponse;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ExistedCheckListItemDocumentContentSFID")]
            internal System.String __ExistedCheckListItemDocumentContentSFID;  // lock index = 37
            [Microsoft.XLANGs.Core.UserVariableAttribute("CheckListDocumentCount")]
            internal System.Int32 __CheckListDocumentCount;  // lock index = 38
            [Microsoft.XLANGs.Core.UserVariableAttribute("CheckListDocumentStatus")]
            internal System.Boolean __CheckListDocumentStatus;  // lock index = 39
            [Microsoft.XLANGs.Core.UserVariableAttribute("CheckListItemFlag")]
            internal System.Boolean __CheckListItemFlag;  // lock index = 11
            [Microsoft.XLANGs.Core.UserVariableAttribute("CheckListResponseStatus")]
            internal System.String __CheckListResponseStatus;  // lock index = 23
            [Microsoft.XLANGs.Core.UserVariableAttribute("CheckListcontentDocumentSFID")]
            internal System.String __CheckListcontentDocumentSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SOQL_ContentDocument_QUERY")]
            internal System.String __SOQL_ContentDocument_QUERY;  // lock index = 35
            [Microsoft.XLANGs.Core.UserVariableAttribute("SOQL_APPLICATION_INFO_QUERY")]
            internal System.String __SOQL_APPLICATION_INFO_QUERY;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestCheckListItemUpdateMessage")]
            internal System.String __RestCheckListItemUpdateMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestCheckListItemUpdateSFID")]
            internal System.String __RestCheckListItemUpdateSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestCheckListItemUpdateException")]
            internal System.Exception __RestCheckListItemUpdateException;
            [Microsoft.XLANGs.Core.UserVariableAttribute("LoanName")]
            internal System.String __LoanName;  // lock index = 5
            [Microsoft.XLANGs.Core.UserVariableAttribute("SOQL_LoanInfo_QUERY")]
            internal System.String __SOQL_LoanInfo_QUERY;  // lock index = 6
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestReceiptMessage")]
            internal System.String __RestReceiptMessage;  // lock index = 12
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestReceiptSFID")]
            internal System.String __RestReceiptSFID;  // lock index = 13
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestReceiptException")]
            internal System.Exception __RestReceiptException;  // lock index = 15
        }


        [System.SerializableAttribute]
        public class ____scope36_2 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope36_2(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope36")
            {
            }

            public override int Index { get { return 2; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[2]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[2]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Microsoft.XLANGs.Core.Segment __seg__;
                Microsoft.XLANGs.Core.FaultReceiveException __fault__;

                __exv__ = _exception;
                if (!(__exv__ is Microsoft.XLANGs.Core.UnknownException))
                {
                    __fault__ = __exv__ as Microsoft.XLANGs.Core.FaultReceiveException;
                    if ((__fault__ == null) && (__exv__ is System.Exception))
                    {
                        __seg__ = _service._segments[7];
                        __seg__.Reset(1);
                        __seg__.PredecessorDone(_service);
                        return true;
                    }
                }

                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadParentLogic __svc__ = (UploadParentLogic)_service;
                __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)(__svc__._stateMgrs[0]);
                __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)(__svc__._stateMgrs[1]);
                ____scope36_2 __ctx2__ = (____scope36_2)(__svc__._stateMgrs[2]);

                if (__ctx1__ != null && __ctx1__.__DocumentUploadFaultResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadFaultResponseMsg);
                    __ctx1__.__DocumentUploadFaultResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestRestApplicationInfoRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestRestApplicationInfoRequestMsg);
                    __ctx1__.__RestRestApplicationInfoRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestRestApplicationInfoResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestRestApplicationInfoResponseMsg);
                    __ctx1__.__RestRestApplicationInfoResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestChecklistItemUpdateResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemUpdateResponseMsg);
                    __ctx1__.__RestChecklistItemUpdateResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestChecklistItemUpdateRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemUpdateRequestMsg);
                    __ctx1__.__RestChecklistItemUpdateRequestMsg = null;
                }
                if (__ctx0__ != null && __ctx0__.__subWrapper1 != null)
                {
                    __ctx0__.__subWrapper1.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper1 = null;
                }
                if (__ctx0__ != null && __ctx0__.__subWrapper5 != null)
                {
                    __ctx0__.__subWrapper5.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper5 = null;
                }
                if (__ctx2__ != null)
                    __ctx2__.__UEx_0 = null;
                base.Finally();
            }

            internal object __exv__;
            internal System.Exception __UEx_0
            {
                get { return (System.Exception)__exv__; }
                set { __exv__ = value; }
            }
        }


        [System.SerializableAttribute]
        public class ____scope37_3 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope37_3(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope37")
            {
            }

            public override int Index { get { return 3; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[4]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[4]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadParentLogic __svc__ = (UploadParentLogic)_service;
                __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)(__svc__._stateMgrs[0]);
                __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__RestLoanQueryRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestLoanQueryRequestMsg);
                    __ctx1__.__RestLoanQueryRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestLoanQueryResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestLoanQueryResponseMsg);
                    __ctx1__.__RestLoanQueryResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestReceiptDocumentResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestReceiptDocumentResponseMsg);
                    __ctx1__.__RestReceiptDocumentResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestReceiptDocumentRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestReceiptDocumentRequestMsg);
                    __ctx1__.__RestReceiptDocumentRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__UploadMetaDataMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__UploadMetaDataMsg);
                    __ctx1__.__UploadMetaDataMsg = null;
                }
                if (__ctx0__ != null && __ctx0__.__subWrapper2 != null)
                {
                    __ctx0__.__subWrapper2.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper2 = null;
                }
                if (__ctx0__ != null && __ctx0__.__subWrapper3 != null)
                {
                    __ctx0__.__subWrapper3.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper3 = null;
                }
                base.Finally();
            }

        }


        [System.SerializableAttribute]
        public class ____scope38_4 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public ____scope38_4(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "??__scope38")
            {
            }

            public override int Index { get { return 4; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[6]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[6]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadParentLogic __svc__ = (UploadParentLogic)_service;
                __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)(__svc__._stateMgrs[0]);
                __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)(__svc__._stateMgrs[1]);

                if (__ctx1__ != null && __ctx1__.__RestChecklistItemDocumentDetailsRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemDocumentDetailsRequestMsg);
                    __ctx1__.__RestChecklistItemDocumentDetailsRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestChecklistItemDocumentDetailsResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemDocumentDetailsResponseMsg);
                    __ctx1__.__RestChecklistItemDocumentDetailsResponseMsg = null;
                }
                if (__ctx0__ != null && __ctx0__.__subWrapper4 != null)
                {
                    __ctx0__.__subWrapper4.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper4 = null;
                }
                base.Finally();
            }

        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eImplements
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("DocumentUploadPort")]
        internal DocumentUploadPortType DocumentUploadPort;
        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestApplicationIdQueryPort")]
        internal RestApplicationIdQueryPortType RestApplicationIdQueryPort;
        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestLoanQueryPort")]
        internal RestLoanQueryPortType RestLoanQueryPort;
        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestReceiptDocumentInsetPort")]
        internal RestReceiptDocumentInsetPortType RestReceiptDocumentInsetPort;
        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestCheckListContentDocumentQueryPort")]
        internal RestCheckListContentDocumentQueryPortType RestCheckListContentDocumentQueryPort;
        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestCheckListItemUpdatePort")]
        internal RestCheckListItemUpdatePortType RestCheckListItemUpdatePort;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {DocumentUploadPortType.Operation},
                                               typeof(UploadParentLogic).GetField("DocumentUploadPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.implements,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadParentLogic), "DocumentUploadPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestApplicationIdQueryPortType.Operation},
                                               typeof(UploadParentLogic).GetField("RestApplicationIdQueryPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadParentLogic), "RestApplicationIdQueryPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestLoanQueryPortType.Operation},
                                               typeof(UploadParentLogic).GetField("RestLoanQueryPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadParentLogic), "RestLoanQueryPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestReceiptDocumentInsetPortType.Operation},
                                               typeof(UploadParentLogic).GetField("RestReceiptDocumentInsetPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadParentLogic), "RestReceiptDocumentInsetPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestCheckListContentDocumentQueryPortType.Operation},
                                               typeof(UploadParentLogic).GetField("RestCheckListContentDocumentQueryPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadParentLogic), "RestCheckListContentDocumentQueryPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestCheckListItemUpdatePortType.Operation},
                                               typeof(UploadParentLogic).GetField("RestCheckListItemUpdatePort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadParentLogic), "RestCheckListItemUpdatePort"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                h[_portInfo[2].Name] = _portInfo[2];
                h[_portInfo[3].Name] = _portInfo[3];
                h[_portInfo[4].Name] = _portInfo[4];
                h[_portInfo[5].Name] = _portInfo[5];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                    typeof(DLAPDocument.UploadUpdatingCheckListItemDocumentProccessingLogic),
                    typeof(DLAPDocument.UploadChildLogic),
                    typeof(DLAPDocument.UploadEventRequest)                    
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static object[] StaticSubscriptionsInformation {
            get {
                return new object[1]{
                     new object[5] { _portInfo[0], 0, null , -1, true }
                };
            }
        }

        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "6cdb4b01-7d0f-41b6-b317-85aa0c028995", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "6cdb4b01-7d0f-41b6-b317-85aa0c028995", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "1d5bce14-9cc5-493d-a7b6-41a27b6d0e5b", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "00000000-0000-0000-0000-000000000000", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "eb857257-5ac5-4d1d-a878-2ecd591e600e", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "eb857257-5ac5-4d1d-a878-2ecd591e600e", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "32870cd1-9e5a-4e68-ba45-e016938d1da5", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "32870cd1-9e5a-4e68-ba45-e016938d1da5", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "00a593ff-dc6e-4a01-a73a-bf0f81420453", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "00a593ff-dc6e-4a01-a73a-bf0f81420453", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "f3e1b349-3856-46be-a56c-fe95d7c84236", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "f3e1b349-3856-46be-a56c-fe95d7c84236", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "00000000-0000-0000-0000-000000000000", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "aea2b1c3-f70d-456e-bbb9-e65674a7f5fb", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "5968b282-cb3e-4ab8-9274-cc0e29665eb6", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "5968b282-cb3e-4ab8-9274-cc0e29665eb6", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "f64c14db-fe25-47d8-a1ec-353e35f84d20", 3, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "00000000-0000-0000-0000-000000000000", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "b73de793-2243-4efa-b541-530630b13fe4", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "653f6c1d-001f-4afc-9cb4-260141371fcd", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "653f6c1d-001f-4afc-9cb4-260141371fcd", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "c603d4d2-c04b-4bae-8047-d17c96b71815", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "c603d4d2-c04b-4bae-8047-d17c96b71815", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "844cc5cf-0dfb-40e4-aa0d-388e93fd01e0", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(26, "844cc5cf-0dfb-40e4-aa0d-388e93fd01e0", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(27, "68e99b21-8d70-48be-ae7e-0a7fe44b2cb8", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(28, "68e99b21-8d70-48be-ae7e-0a7fe44b2cb8", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(29, "6e6b0685-d971-4990-8e1a-c6c2365d4297", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(30, "2b3b8436-c7b3-4809-ada5-d3264e00898a", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(31, "2b3b8436-c7b3-4809-ada5-d3264e00898a", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(32, "dcf557aa-cefe-462b-b5d1-7ae0fab8e62c", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(33, "dcf557aa-cefe-462b-b5d1-7ae0fab8e62c", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(34, "7a47b4b6-331e-4c6c-a010-128ccb3e982c", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(35, "7a47b4b6-331e-4c6c-a010-128ccb3e982c", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(36, "3e544756-1c0d-4436-baf3-8fdf01c1a5b2", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(37, "3e544756-1c0d-4436-baf3-8fdf01c1a5b2", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(38, "00000000-0000-0000-0000-000000000000", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(39, "748c57bf-ae22-4eb0-8690-20e038dc3340", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(40, "f425504d-980f-42b0-bc27-c73efe57562c", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(41, "f425504d-980f-42b0-bc27-c73efe57562c", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(42, "170b70a1-d0f8-4eeb-8499-858ab1dece05", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(43, "748c57bf-ae22-4eb0-8690-20e038dc3340", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(44, "c7df9373-bb19-4748-ac1d-16837666c0b9", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(45, "c7df9373-bb19-4748-ac1d-16837666c0b9", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(46, "78699d93-ce52-4af1-9ed1-dce39fecd976", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(47, "78699d93-ce52-4af1-9ed1-dce39fecd976", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(48, "f8a4d0f2-4220-4d4f-984b-a98ecaf6088c", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(49, "f8a4d0f2-4220-4d4f-984b-a98ecaf6088c", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(50, "6e6b0685-d971-4990-8e1a-c6c2365d4297", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(51, "3e82c6e5-7b51-4706-9e11-227b98b2c528", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(52, "3e82c6e5-7b51-4706-9e11-227b98b2c528", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(53, "01479499-ba17-40bc-ab88-f1328daea0e2", 4, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(54, "01479499-ba17-40bc-ab88-f1328daea0e2", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(55, "b73de793-2243-4efa-b541-530630b13fe4", 4, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(56, "f64c14db-fe25-47d8-a1ec-353e35f84d20", 3, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(57, "62004d06-e837-426a-8c98-1a4e7ebe55b9", 5, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(58, "00000000-0000-0000-0000-000000000000", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(59, "7149b1d3-f7da-45ac-aca8-8029f1f00803", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(60, "3b32c034-68ad-4e02-b6bc-e932b2889a48", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(61, "3b32c034-68ad-4e02-b6bc-e932b2889a48", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(62, "b51ab617-4c1d-4bde-a6dd-3716ccdafc5d", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(63, "b51ab617-4c1d-4bde-a6dd-3716ccdafc5d", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(64, "9bb29ffc-1fa7-4ef0-8625-c7c553fa124d", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(65, "9bb29ffc-1fa7-4ef0-8625-c7c553fa124d", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(66, "6a957d47-0636-4cec-9633-983e36832521", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(67, "6a957d47-0636-4cec-9633-983e36832521", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(68, "00000000-0000-0000-0000-000000000000", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(69, "083779eb-2fb2-4975-acd8-0632eada672d", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(70, "fb894cf1-41cb-4c73-a856-98ae84e5beb5", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(71, "fb894cf1-41cb-4c73-a856-98ae84e5beb5", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(72, "65101213-93c3-4fc8-a143-7d85dd7d0f23", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(73, "65101213-93c3-4fc8-a143-7d85dd7d0f23", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(74, "083779eb-2fb2-4975-acd8-0632eada672d", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(75, "edbe7f9b-24b2-4882-ac1d-c6e4a2658447", 6, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(76, "edbe7f9b-24b2-4882-ac1d-c6e4a2658447", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(77, "7149b1d3-f7da-45ac-aca8-8029f1f00803", 6, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(78, "62004d06-e837-426a-8c98-1a4e7ebe55b9", 5, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(79, "aa683018-93b4-489b-9755-9b414f46e8d3", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(80, "aa683018-93b4-489b-9755-9b414f46e8d3", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(81, "bf700bcc-c26d-4669-98da-1365d4e6de45", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(82, "bf700bcc-c26d-4669-98da-1365d4e6de45", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(83, "aea2b1c3-f70d-456e-bbb9-e65674a7f5fb", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(84, "b020d6d5-e782-4437-8d03-2e6cd8d0420a", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(85, "8c8395f0-500a-4966-9504-f7c3962b8049", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(86, "22f236be-2203-4d54-8927-940430615854", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(87, "22f236be-2203-4d54-8927-940430615854", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(88, "d3b559f2-c3a4-4c02-8525-eec6113794d0", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(89, "d3b559f2-c3a4-4c02-8525-eec6113794d0", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(90, "b1327f04-c213-490c-9ef4-c4ae4706fbf2", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(91, "b1327f04-c213-490c-9ef4-c4ae4706fbf2", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(92, "c36020a1-7200-4f52-9064-c218d3b2b115", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(93, "c36020a1-7200-4f52-9064-c218d3b2b115", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(94, "43333bdd-d4a4-4d41-be13-3cb02bee5426", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(95, "327d9500-082c-4950-9cd0-2608a6277124", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(96, "327d9500-082c-4950-9cd0-2608a6277124", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(97, "2cde09a1-9b41-4859-947e-15f9f8f37630", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(98, "43333bdd-d4a4-4d41-be13-3cb02bee5426", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(99, "8c8395f0-500a-4966-9504-f7c3962b8049", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(100, "7740c3e1-c54c-4f33-842b-a13e512a50e5", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(101, "7740c3e1-c54c-4f33-842b-a13e512a50e5", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(102, "ada471d7-cb3a-48f6-bc63-a51150f9bea7", 2, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(103, "ada471d7-cb3a-48f6-bc63-a51150f9bea7", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(104, "b020d6d5-e782-4437-8d03-2e6cd8d0420a", 2, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(105, "00b68701-1c9c-4a27-942a-af2d766b3340", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(106, "d8362836-01b5-47a4-94ab-dc42abeaf90c", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(107, "00000000-0000-0000-0000-000000000000", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(108, "00000000-0000-0000-0000-000000000000", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(109, "d8362836-01b5-47a4-94ab-dc42abeaf90c", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(110, "0c6969d3-155f-4f72-a714-179417935893", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(111, "0c6969d3-155f-4f72-a714-179417935893", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(112, "fb9c136f-ae5d-4f55-aafc-e4649c4bc821", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(113, "fb9c136f-ae5d-4f55-aafc-e4649c4bc821", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(114, "5764a00c-21c0-4342-a654-3a159ef2a9e4", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(115, "5764a00c-21c0-4342-a654-3a159ef2a9e4", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(116, "135509e6-3bc5-4be0-b621-38ab6db3eb90", 7, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(117, "00b68701-1c9c-4a27-942a-af2d766b3340", 7, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(118, "1d5bce14-9cc5-493d-a7b6-41a27b6d0e5b", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(119, "019728bc-357d-47d9-bf2f-6708c3ae5e4d", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(120, "5dd0f130-68c0-405f-a7e7-e0b2960bc932", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(121, "5dd0f130-68c0-405f-a7e7-e0b2960bc932", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(122, "f263f485-9bb4-4197-a6aa-de1fb059be25", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(123, "f263f485-9bb4-4197-a6aa-de1fb059be25", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(124, "019728bc-357d-47d9-bf2f-6708c3ae5e4d", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(125, "092d5d55-4599-4602-9664-2674f9fb7a38", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(126, "092d5d55-4599-4602-9664-2674f9fb7a38", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(127, "84453f61-57a9-4fd0-8ecb-a9af8852e9c7", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(128, "84453f61-57a9-4fd0-8ecb-a9af8852e9c7", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Parallel),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Call),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Scope),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Parallel),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Catch),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,3,3,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,118,119,119,120,120,121,119,122,122,123,124,125,125,125,126,127,127,128,3,3,3,3,};
        public static int[] __progressLocation2 = new int[] { 6,6,6,7,8,8,8,9,10,10,11,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,15,15,16,17,17,15,79,79,80,81,81,82,82,82,82,82,82,82,82,83,84,84,85,85,86,86,87,88,88,88,89,90,90,91,92,92,93,93,94,94,95,95,96,97,97,98,99,100,100,101,101,101,101,101,101,101,84,102,102,103,103,104,104,104,104,};
        public static int[] __progressLocation3 = new int[] { 18,18,18,56,17,};
        public static int[] __progressLocation4 = new int[] { 20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,22,23,23,23,24,25,25,26,27,27,28,29,29,30,30,31,32,32,32,33,34,34,35,36,36,37,37,37,37,39,39,40,40,41,42,42,43,44,44,45,29,46,46,47,48,48,49,49,49,49,49,49,49,49,50,20,51,51,52,53,53,54,55,55,55,55,};
        public static int[] __progressLocation5 = new int[] { 57,57,57,78,17,};
        public static int[] __progressLocation6 = new int[] { 59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,61,62,62,62,63,64,64,65,66,66,67,67,67,67,67,67,67,67,67,69,69,70,70,71,69,72,72,73,74,59,75,75,76,76,77,77,77,77,};
        public static int[] __progressLocation7 = new int[] { 105,105,106,106,106,106,106,106,106,106,106,109,109,109,109,109,109,110,110,111,112,112,112,113,114,114,115,116,116,117,117,};

        public static int[][] __progressLocations = new int[8] [] {__progressLocation0,__progressLocation1,__progressLocation2,__progressLocation3,__progressLocation4,__progressLocation5,__progressLocation6,__progressLocation7};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)_stateMgrs[0];
            __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)_stateMgrs[1];

            switch (__seg__.Progress)
            {
            case 0:
                DocumentUploadPort = new DocumentUploadPortType(0, this);
                RestApplicationIdQueryPort = new RestApplicationIdQueryPortType(1, this);
                RestReceiptDocumentInsetPort = new RestReceiptDocumentInsetPortType(3, this);
                RestLoanQueryPort = new RestLoanQueryPortType(2, this);
                RestCheckListItemUpdatePort = new RestCheckListItemUpdatePortType(5, this);
                RestCheckListContentDocumentQueryPort = new RestCheckListContentDocumentQueryPortType(4, this);
                __ctx__.PrologueCompleted = true;
                __ctx0__.__subWrapper0 = new Microsoft.XLANGs.Core.SubscriptionWrapper(ActivationSubGuids[0], DocumentUploadPort, this);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __UploadParentLogic_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)_stateMgrs[0];
            __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)_stateMgrs[1];
            ____scope36_2 __ctx2__ = (____scope36_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__FinalTempDocResponseXml = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx1__.__ApplicationNumber = default(System.String);
                __ctx1__.__MessageTemp = default(System.String);
                __ctx1__.__Message = default(System.String);
                __ctx1__.__SalesForceObjectId = default(System.String);
                __ctx1__.__SalesForceObjectName = default(System.String);
                __ctx1__.__Stage = default(System.String);
                __ctx1__.__Status = default(System.String);
                __ctx1__.__Flag = default(System.Boolean);
                __ctx1__.__OrchestrationInstanceId = default(System.Guid);
                __ctx1__.__ApplicationExistsFlag = default(System.Boolean);
                __ctx1__.__Title = default(System.String);
                __ctx1__.__Description = default(System.String);
                __ctx1__.__Data = default(System.String);
                __ctx1__.__PathOnClient = default(System.String);
                __ctx1__.__FileExtension = default(System.String);
                __ctx1__.__DocumentType_c = default(System.String);
                __ctx1__.__ReasonForChange = default(System.String);
                __ctx1__.__ApplicationID = default(System.String);
                __ctx1__.__TempDocResponseXml = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx1__.__DOCAPPLICANTID = default(System.String);
                __ctx1__.__DOC_CONTENTS = default(System.String);
                __ctx1__.__RequestStatus = default(System.Boolean);
                __ctx1__.__DocApplicationId = default(System.String);
                __ctx1__.__DocCheckListItemSFID = default(System.String);
                __ctx1__.__ApplicationSFID = default(System.String);
                __ctx1__.__DLAPUserID = default(System.String);
                __ctx1__.__TempContentLinkRequest = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx1__.__CONTENTVERSION_DOCUMENTID = default(System.String);
                __ctx1__.__ResponseStatus = default(System.String);
                __ctx1__.__ContentDocumentlinkSFID = default(System.String);
                __ctx1__.__TempFaultResponse = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx1__.__DocMetaData = default(System.String);
                __ctx1__.__RECEIPTDOCUMENT_ID = default(System.String);
                __ctx1__.__LoanSFID = default(System.String);
                __ctx1__.__MessageL = default(System.String);
                __ctx1__.__TempMetaData = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx1__.__TempMetadataXmlStr = default(System.String);
                __ctx1__.__Empty = default(System.String);
                __ctx1__.__StatusCheckListResponse = default(System.String);
                __ctx1__.__ExistedCheckListItemDocumentContentSFID = default(System.String);
                __ctx1__.__CheckListDocumentCount = default(System.Int32);
                __ctx1__.__CheckListDocumentStatus = default(System.Boolean);
                __ctx1__.__CheckListItemFlag = default(System.Boolean);
                __ctx1__.__CheckListResponseStatus = default(System.String);
                __ctx1__.__CheckListcontentDocumentSFID = default(System.String);
                __ctx1__.__SOQL_ContentDocument_QUERY = default(System.String);
                __ctx1__.__SOQL_APPLICATION_INFO_QUERY = default(System.String);
                __ctx1__.__RestCheckListItemUpdateMessage = default(System.String);
                __ctx1__.__RestCheckListItemUpdateSFID = default(System.String);
                __ctx1__.__RestCheckListItemUpdateException = default(System.Exception);
                __ctx1__.__LoanName = default(System.String);
                __ctx1__.__SOQL_LoanInfo_QUERY = default(System.String);
                __ctx1__.__RestReceiptMessage = default(System.String);
                __ctx1__.__RestReceiptSFID = default(System.String);
                __ctx1__.__RestReceiptException = default(System.Exception);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                if (!DocumentUploadPort.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx1__.__DocumentUploadRequestMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadRequestMsg);
                __ctx1__.__DocumentUploadRequestMsg = new DocumentUploadRequestType("DocumentUploadRequestMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__DocumentUploadRequestMsg);
                DocumentUploadPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__DocumentUploadRequestMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadRequestMsg);
                    __edata.PortName = @"DocumentUploadPort";
                    Tracker.FireEvent(__eventLocations[2],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                __ctx1__.__FinalTempDocResponseXml.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx1__.__ApplicationNumber = "";
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.__MessageTemp = "";
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__Message = "";
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                __ctx1__.__SalesForceObjectId = "";
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                __ctx1__.__SalesForceObjectName = "";
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                __ctx1__.__Stage = "";
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                __ctx1__.__Status = "";
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                __ctx1__.__Flag = true;
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                __ctx1__.__ApplicationExistsFlag = true;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                __ctx1__.__Title = "";
                if (__ctx1__ != null)
                    __ctx1__.__Title = null;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                __ctx1__.__Description = "";
                if (__ctx1__ != null)
                    __ctx1__.__Description = null;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                __ctx1__.__Data = "";
                if (__ctx1__ != null)
                    __ctx1__.__Data = null;
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                __ctx1__.__PathOnClient = "";
                if (__ctx1__ != null)
                    __ctx1__.__PathOnClient = null;
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                __ctx1__.__FileExtension = "";
                if (__ctx1__ != null)
                    __ctx1__.__FileExtension = null;
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                __ctx1__.__DocumentType_c = "";
                if (__ctx1__ != null)
                    __ctx1__.__DocumentType_c = null;
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                __ctx1__.__ReasonForChange = "";
                if (__ctx1__ != null)
                    __ctx1__.__ReasonForChange = null;
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                __ctx1__.__ApplicationID = "";
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationID = null;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                __ctx1__.__TempDocResponseXml.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                __ctx1__.__DOCAPPLICANTID = "";
                if (__ctx1__ != null)
                    __ctx1__.__DOCAPPLICANTID = null;
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                __ctx1__.__DOC_CONTENTS = "";
                if (__ctx1__ != null)
                    __ctx1__.__DOC_CONTENTS = null;
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                __ctx1__.__RequestStatus = true;
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                __ctx1__.__DocApplicationId = "";
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                __ctx1__.__DocCheckListItemSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 29;
            case 29:
                __ctx1__.__ApplicationSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 30;
            case 30:
                __ctx1__.__DLAPUserID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                __ctx1__.__TempContentLinkRequest.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if (__ctx1__ != null)
                    __ctx1__.__TempContentLinkRequest = null;
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 32:
                __ctx1__.__CONTENTVERSION_DOCUMENTID = "";
                if (__ctx1__ != null)
                    __ctx1__.__CONTENTVERSION_DOCUMENTID = null;
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 33;
            case 33:
                __ctx1__.__ResponseStatus = "";
                if ( !PostProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 34;
            case 34:
                __ctx1__.__ContentDocumentlinkSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 35;
            case 35:
                __ctx1__.__TempFaultResponse.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if ( !PostProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 36;
            case 36:
                __ctx1__.__DocMetaData = "";
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                __ctx1__.__RECEIPTDOCUMENT_ID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 38:
                __ctx1__.__LoanSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 39:
                __ctx1__.__MessageL = "";
                if ( !PostProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 40;
            case 40:
                __ctx1__.__TempMetaData.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if ( !PostProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 41;
            case 41:
                __ctx1__.__TempMetadataXmlStr = "";
                if ( !PostProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 42;
            case 42:
                __ctx1__.__Empty = "";
                if ( !PostProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 43;
            case 43:
                __ctx1__.__StatusCheckListResponse = "";
                if (__ctx1__ != null)
                    __ctx1__.__StatusCheckListResponse = null;
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 44;
            case 44:
                __ctx1__.__ExistedCheckListItemDocumentContentSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 45;
            case 45:
                __ctx1__.__CheckListDocumentStatus = true;
                if ( !PostProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 46;
            case 46:
                __ctx1__.__CheckListItemFlag = true;
                if ( !PostProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 47;
            case 47:
                __ctx1__.__CheckListResponseStatus = "";
                if ( !PostProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 48;
            case 48:
                __ctx1__.__CheckListcontentDocumentSFID = "";
                if (__ctx1__ != null)
                    __ctx1__.__CheckListcontentDocumentSFID = null;
                if ( !PostProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 49;
            case 49:
                __ctx1__.__SOQL_ContentDocument_QUERY = "";
                if ( !PostProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 50;
            case 50:
                __ctx1__.__SOQL_APPLICATION_INFO_QUERY = "";
                if ( !PostProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 51;
            case 51:
                __ctx1__.__RestCheckListItemUpdateMessage = "";
                if ( !PostProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 52;
            case 52:
                __ctx1__.__RestCheckListItemUpdateSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 53;
            case 53:
                __ctx1__.__RestCheckListItemUpdateException = new System.Exception();
                if ( !PostProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 54;
            case 54:
                __ctx1__.__LoanName = "";
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 55:
                __ctx1__.__SOQL_LoanInfo_QUERY = "";
                if ( !PostProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 56;
            case 56:
                __ctx1__.__RestReceiptMessage = "";
                if ( !PostProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 57;
            case 57:
                __ctx1__.__RestReceiptSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 58;
            case 58:
                __ctx1__.__RestReceiptException = new System.Exception();
                if ( !PostProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 59;
            case 59:
                if ( !PreProgressInc( __seg__, __ctx__, 60 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 60;
            case 60:
                __ctx2__ = new ____scope36_2(this);
                _stateMgrs[2] = __ctx2__;
                if ( !PostProgressInc( __seg__, __ctx__, 61 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 61;
            case 61:
                __ctx1__.StartContext(__seg__, __ctx2__);
                if ( !PostProgressInc( __seg__, __ctx__, 62 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 62:
                if ( !PreProgressInc( __seg__, __ctx__, 63 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__RestReceiptException = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestReceiptSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestReceiptMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL_LoanInfo_QUERY = null;
                if (__ctx1__ != null)
                    __ctx1__.__LoanName = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestCheckListItemUpdateException = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestCheckListItemUpdateSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestCheckListItemUpdateMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL_APPLICATION_INFO_QUERY = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL_ContentDocument_QUERY = null;
                if (__ctx1__ != null)
                    __ctx1__.__ExistedCheckListItemDocumentContentSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempMetadataXmlStr = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempMetaData = null;
                if (__ctx1__ != null)
                    __ctx1__.__LoanSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RECEIPTDOCUMENT_ID = null;
                if (__ctx1__ != null)
                    __ctx1__.__DocMetaData = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempFaultResponse = null;
                if (__ctx1__ != null)
                    __ctx1__.__ContentDocumentlinkSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__DLAPUserID = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__DocCheckListItemSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__DocApplicationId = null;
                if (__ctx1__ != null)
                    __ctx1__.__MessageTemp = null;
                if (__ctx1__ != null && __ctx1__.__DocumentUploadRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadRequestMsg);
                    __ctx1__.__DocumentUploadRequestMsg = null;
                }
                if (RestCheckListContentDocumentQueryPort != null)
                {
                    RestCheckListContentDocumentQueryPort.Close(__ctx1__, __seg__);
                    RestCheckListContentDocumentQueryPort = null;
                }
                if (RestCheckListItemUpdatePort != null)
                {
                    RestCheckListItemUpdatePort.Close(__ctx1__, __seg__);
                    RestCheckListItemUpdatePort = null;
                }
                if (RestLoanQueryPort != null)
                {
                    RestLoanQueryPort.Close(__ctx1__, __seg__);
                    RestLoanQueryPort = null;
                }
                if (RestReceiptDocumentInsetPort != null)
                {
                    RestReceiptDocumentInsetPort.Close(__ctx1__, __seg__);
                    RestReceiptDocumentInsetPort = null;
                }
                if (RestApplicationIdQueryPort != null)
                {
                    RestApplicationIdQueryPort.Close(__ctx1__, __seg__);
                    RestApplicationIdQueryPort = null;
                }
                Tracker.FireEvent(__eventLocations[118],__eventData[13],_stateMgrs[1].TrackDataStream );
                __ctx2__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 63;
            case 63:
                if ( !PreProgressInc( __seg__, __ctx__, 64 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[119],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 64;
            case 64:
                __condition__ = (((__ctx1__.__Flag) && (__ctx1__.__ResponseStatus == "Success")) && ((__ctx1__.__Flag) && (__ctx1__.__CheckListResponseStatus == "Success")));
                if (__ctx1__ != null)
                    __ctx1__.__CheckListResponseStatus = null;
                if (__ctx1__ != null)
                    __ctx1__.__ResponseStatus = null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 69 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 69;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 65 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 65;
            case 65:
                if ( !PreProgressInc( __seg__, __ctx__, 66 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[120],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 66;
            case 66:
                {
                    DocumentUploadResponseType __DocumentUploadResponseMsg = new DocumentUploadResponseType("DocumentUploadResponseMsg", __ctx1__);

                    __ctx1__.__FinalTempDocResponseXml.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__TempDocResponseXml.UnderlyingXmlDocument.LoadXml(@"<ns0:DOCUMENTRESPONSE xmlns:ns0='http://DocumentUploadDefinition.DocumentUpload'><Upload_Status>" + "Success" + "</Upload_Status><Upload_Status_Details>" + "File Uploaded Successfully" + "</Upload_Status_Details></ns0:DOCUMENTRESPONSE>");
                    __DocumentUploadResponseMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempDocResponseXml.UnderlyingXmlDocument);

                    if (__ctx1__.__DocumentUploadResponseMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadResponseMsg);
                    __ctx1__.__DocumentUploadResponseMsg = __DocumentUploadResponseMsg;
                    __ctx1__.RefMessage(__ctx1__.__DocumentUploadResponseMsg);
                }
                __ctx1__.__DocumentUploadResponseMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 67 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 67;
            case 67:
                if ( !PreProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    Tracker.FireEvent(__eventLocations[121],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 68;
            case 68:
                if ( !PostProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 72;
            case 69:
                if ( !PreProgressInc( __seg__, __ctx__, 70 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[122],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 70;
            case 70:
                {
                    DocumentUploadResponseType __DocumentUploadResponseMsg = new DocumentUploadResponseType("DocumentUploadResponseMsg", __ctx1__);

                    __ctx1__.__TempDocResponseXml.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__TempDocResponseXml.UnderlyingXmlDocument.LoadXml(@"<ns0:DOCUMENTRESPONSE xmlns:ns0='http://DocumentUploadDefinition.DocumentUpload'><Upload_Status>" + "FAILED" + "</Upload_Status><Upload_Status_Details>" + "Exception: File wasn’t saved  " + __ctx1__.__MessageL + "</Upload_Status_Details></ns0:DOCUMENTRESPONSE>");
                    __DocumentUploadResponseMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempDocResponseXml.UnderlyingXmlDocument);

                    if (__ctx1__.__DocumentUploadResponseMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadResponseMsg);
                    __ctx1__.__DocumentUploadResponseMsg = __DocumentUploadResponseMsg;
                    __ctx1__.RefMessage(__ctx1__.__DocumentUploadResponseMsg);
                }
                __ctx1__.__DocumentUploadResponseMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 71 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 71;
            case 71:
                if ( !PreProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    Tracker.FireEvent(__eventLocations[123],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 72;
            case 72:
                if ( !PreProgressInc( __seg__, __ctx__, 73 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__MessageL = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempDocResponseXml = null;
                if (__ctx1__ != null)
                    __ctx1__.__FinalTempDocResponseXml = null;
                Tracker.FireEvent(__eventLocations[124],__eventData[8],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 73;
            case 73:
                if ( !PreProgressInc( __seg__, __ctx__, 74 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[125],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 74;
            case 74:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 75;
            case 75:
                if ( !PreProgressInc( __seg__, __ctx__, 76 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                DocumentUploadPort.SendMessage(0, __ctx1__.__DocumentUploadResponseMsg, null, null, __ctx1__, __seg__ , Microsoft.XLANGs.Core.ActivityFlags.None );
                if (DocumentUploadPort != null)
                {
                    DocumentUploadPort.Close(__ctx1__, __seg__);
                    DocumentUploadPort = null;
                }
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingResp) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingResp;
                goto case 76;
            case 76:
                if ( !PreProgressInc( __seg__, __ctx__, 77 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    __edata.PortName = @"DocumentUploadPort";
                    Tracker.FireEvent(__eventLocations[126],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__DocumentUploadResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadResponseMsg);
                    __ctx1__.__DocumentUploadResponseMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 77;
            case 77:
                if ( !PreProgressInc( __seg__, __ctx__, 78 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[127],__eventData[11],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 78;
            case 78:
                {
                    Microsoft.XLANGs.Core.Service svc = new DLAPDocument.UploadEventRequest(10, InstanceId, this);
                    _stateMgrs[10] = svc;
                    __ctx1__.StartCall(__seg__, svc, __eventLocations[127],new object[] {__ctx1__.__ApplicationNumber, __ctx1__.__SalesForceObjectId, __ctx1__.__Message, __ctx1__.__SalesForceObjectName, __ctx1__.__Stage, __ctx1__.__Status, __ctx1__.__Empty, __ctx1__.__OrchestrationInstanceId});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 79 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 79:
                if ( !PreProgressInc( __seg__, __ctx__, 80 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[10]).Args;
                }
                if (__ctx1__ != null)
                    __ctx1__.__Empty = null;
                if (__ctx1__ != null)
                    __ctx1__.__Status = null;
                if (__ctx1__ != null)
                    __ctx1__.__Stage = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesForceObjectName = null;
                if (__ctx1__ != null)
                    __ctx1__.__SalesForceObjectId = null;
                if (__ctx1__ != null)
                    __ctx1__.__Message = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationNumber = null;
                Tracker.FireEvent(__eventLocations[128],__eventData[12],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 80;
            case 80:
                if ( !PreProgressInc( __seg__, __ctx__, 81 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[3],__eventData[18],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 81;
            case 81:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 82 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 82;
            case 82:
                if ( !PreProgressInc( __seg__, __ctx__, 83 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 83;
            case 83:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment2(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[2];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)_stateMgrs[0];
            __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)_stateMgrs[1];
            ____scope36_2 __ctx2__ = (____scope36_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                {
                    RestApplicationInfoRequestType __RestRestApplicationInfoRequestMsg = new RestApplicationInfoRequestType("RestRestApplicationInfoRequestMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.DLAPDocumentUpload.Logic.MakeSalesforceQueryApplicantIdRequest), new object[] {__RestRestApplicationInfoRequestMsg.MessagePart}, new object[] {__ctx1__.__DocumentUploadRequestMsg.MessagePart});
                    __ctx1__.__ApplicationNumber = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__DocumentUploadRequestMsg.MessagePart, "string(/*[local-name()='DOCUMENT' and namespace-uri()='http://DocumentUploadDefinition.DocumentUpload']/*[local-name()='APPLICATION_NUMBER' and namespace-uri()=''])", typeof(System.String));
                    __ctx1__.__SOQL_APPLICATION_INFO_QUERY = @"Select Id, Name  FROM Application__c WHERE Name IN " + "('" + __ctx1__.__ApplicationNumber + "') AND Name != NULL";
                    __RestRestApplicationInfoRequestMsg.SetPropertyValue(typeof(DLAPDocumentUploadSalesForceDefinition.Rest.SOQL_ApplicationInfo_Query), __ctx1__.__SOQL_APPLICATION_INFO_QUERY);

                    if (__ctx1__.__RestRestApplicationInfoRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestRestApplicationInfoRequestMsg);
                    __ctx1__.__RestRestApplicationInfoRequestMsg = __RestRestApplicationInfoRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestRestApplicationInfoRequestMsg);
                }
                __ctx1__.__RestRestApplicationInfoRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestRestApplicationInfoRequestMsg);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadRequestMsg);
                    Tracker.FireEvent(__eventLocations[7],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                if ( !PreProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 5;
            case 5:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestApplicationIdQueryPort.SendMessage(0, __ctx1__.__RestRestApplicationInfoRequestMsg, null, null, out __ctx0__.__subWrapper1, __ctx2__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 7;
            case 7:
                if ( !PreProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestRestApplicationInfoRequestMsg);
                    __edata.PortName = @"RestApplicationIdQueryPort";
                    Tracker.FireEvent(__eventLocations[9],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestRestApplicationInfoRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestRestApplicationInfoRequestMsg);
                    __ctx1__.__RestRestApplicationInfoRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[1],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if (!RestApplicationIdQueryPort.GetMessageId(__ctx0__.__subWrapper1.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[0]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper1 != null)
                {
                    __ctx0__.__subWrapper1.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper1 = null;
                }
                if (__ctx1__.__RestRestApplicationInfoResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestRestApplicationInfoResponseMsg);
                __ctx1__.__RestRestApplicationInfoResponseMsg = new RestApplicationInfoResponseType("RestRestApplicationInfoResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestRestApplicationInfoResponseMsg);
                RestApplicationIdQueryPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestRestApplicationInfoResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[2], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestRestApplicationInfoResponseMsg);
                    __edata.PortName = @"RestApplicationIdQueryPort";
                    Tracker.FireEvent(__eventLocations[11],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx1__.__DocApplicationId = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__DocumentUploadRequestMsg.MessagePart, "string(/*[local-name()='DOCUMENT' and namespace-uri()='http://DocumentUploadDefinition.DocumentUpload']/*[local-name()='APPLICATION_NUMBER' and namespace-uri()=''])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                __ctx1__.__DocCheckListItemSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__DocumentUploadRequestMsg.MessagePart, "string(/*[local-name()='DOCUMENT' and namespace-uri()='http://DocumentUploadDefinition.DocumentUpload']/*[local-name()='ACTION_ID' and namespace-uri()=''])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                __ctx1__.__DLAPUserID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__DocumentUploadRequestMsg.MessagePart, "string(/*[local-name()='DOCUMENT' and namespace-uri()='http://DocumentUploadDefinition.DocumentUpload']/*[local-name()='USER_ID' and namespace-uri()=''])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                __ctx1__.__ApplicationSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestRestApplicationInfoResponseMsg.MessagePart, "string(/*[local-name()='QueryResult' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/Query/ApplicationInfo']/*[local-name()='records' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/Query/ApplicationInfo']/*[local-name()='Id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/Query/ApplicationInfo'])", typeof(System.String));
                if (__ctx1__ != null && __ctx1__.__RestRestApplicationInfoResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestRestApplicationInfoResponseMsg);
                    __ctx1__.__RestRestApplicationInfoResponseMsg = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                __ctx1__.__DocMetaData = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__DocumentUploadRequestMsg.MessagePart, "string(/*[local-name()='DOCUMENT' and namespace-uri()='http://DocumentUploadDefinition.DocumentUpload']/*[local-name()='DOCUMENT_METADATA' and namespace-uri()=''])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[5],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__ApplicationSFID);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 27;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[5],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                __condition__ = !System.String.IsNullOrEmpty(__ctx1__.__DLAPUserID);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 24;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                __ctx1__.__RequestStatus = true;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 24:
                __ctx1__.__RequestStatus = false;
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 27:
                __ctx1__.__RequestStatus = false;
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                __condition__ = __ctx1__.__RequestStatus;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 35;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                if ( !PreProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[9],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 32;
            case 32:
                __seg__.RunSegments(new Microsoft.XLANGs.Core.Segment[] {_segments[3], _segments[5]}, this);
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[17],__eventData[14],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                if ( !PostProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 48;
            case 35:
                if ( !PreProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[79],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 36;
            case 36:
                {
                    DocumentUploadResponseType __DocumentUploadResponseMsg = new DocumentUploadResponseType("DocumentUploadResponseMsg", __ctx1__);

                    __ctx1__.__TempDocResponseXml.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__TempDocResponseXml.UnderlyingXmlDocument.LoadXml(@"<ns0:DOCUMENTRESPONSE xmlns:ns0='http://DocumentUploadDefinition.DocumentUpload'><Upload_Status>" + "FAILED" + "</Upload_Status><Upload_Status_Details>" + "Exception:ApplicationNumber(or)ActionId(or)DLAPUserID couldn’t be found thus the file wasn’t saved" + "</Upload_Status_Details></ns0:DOCUMENTRESPONSE>");
                    __DocumentUploadResponseMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempDocResponseXml.UnderlyingXmlDocument);

                    if (__ctx1__.__DocumentUploadResponseMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadResponseMsg);
                    __ctx1__.__DocumentUploadResponseMsg = __DocumentUploadResponseMsg;
                    __ctx1__.RefMessage(__ctx1__.__DocumentUploadResponseMsg);
                }
                __ctx1__.__DocumentUploadResponseMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                if ( !PreProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    Tracker.FireEvent(__eventLocations[80],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 38;
            case 38:
                if ( !PreProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[81],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 39;
            case 39:
                __ctx1__.__ApplicationNumber = __ctx1__.__DocApplicationId;
                if ( !PostProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 40;
            case 40:
                if ( !PreProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[82],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 41;
            case 41:
                __ctx1__.__Message = "DLAP Document Upload Exception:- DOC APPLICANT ID or DOC_CONTENTS couldn’t be found on the DLAP Request";
                if ( !PostProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 42;
            case 42:
                __ctx1__.__OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;
                if ( !PostProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 43;
            case 43:
                __ctx1__.__SalesForceObjectId = "";
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 44;
            case 44:
                __ctx1__.__SalesForceObjectName = "Appplication";
                if ( !PostProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 45;
            case 45:
                __ctx1__.__Stage = "Document Received";
                if ( !PostProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 46;
            case 46:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 47;
            case 47:
                __ctx1__.__Flag = false;
                if ( !PostProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 48;
            case 48:
                if ( !PreProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[83],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 49;
            case 49:
                if ( !PreProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[84],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 50;
            case 50:
                __condition__ = (((__ctx1__.__Flag) && (__ctx1__.__ResponseStatus == "Success")) && ((__ctx1__.__Flag) && (__ctx1__.__CheckListResponseStatus == "Success")));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 86 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 86;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 51;
            case 51:
                if ( !PreProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[85],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 52;
            case 52:
                __condition__ = __ctx1__.__DocCheckListItemSFID != "0";
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 75 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 75;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 53;
            case 53:
                if ( !PreProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[86],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 54;
            case 54:
                {
                    RestChecklistItemUpdateRequestType __RestChecklistItemUpdateRequestMsg = new RestChecklistItemUpdateRequestType("RestChecklistItemUpdateRequestMsg", __ctx1__);

                    ApplyTransform(typeof(DLAPDocumentUploadLogic.MakeCheckListItemUpdateRequest), new object[] {__RestChecklistItemUpdateRequestMsg.MessagePart}, new object[] {__ctx1__.__DocumentUploadRequestMsg.MessagePart});

                    if (__ctx1__.__RestChecklistItemUpdateRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemUpdateRequestMsg);
                    __ctx1__.__RestChecklistItemUpdateRequestMsg = __RestChecklistItemUpdateRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestChecklistItemUpdateRequestMsg);
                }
                __ctx1__.__RestChecklistItemUpdateRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 55:
                if ( !PreProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestChecklistItemUpdateRequestMsg);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadRequestMsg);
                    Tracker.FireEvent(__eventLocations[87],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 56;
            case 56:
                if ( !PreProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[88],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 57;
            case 57:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 58;
            case 58:
                if ( !PreProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestCheckListItemUpdatePort.SendMessage(0, __ctx1__.__RestChecklistItemUpdateRequestMsg, null, null, out __ctx0__.__subWrapper5, __ctx2__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 59;
            case 59:
                if ( !PreProgressInc( __seg__, __ctx__, 60 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestChecklistItemUpdateRequestMsg);
                    __edata.PortName = @"RestCheckListItemUpdatePort";
                    Tracker.FireEvent(__eventLocations[89],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestChecklistItemUpdateRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemUpdateRequestMsg);
                    __ctx1__.__RestChecklistItemUpdateRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 60;
            case 60:
                if ( !PreProgressInc( __seg__, __ctx__, 61 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[90],__eventData[1],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 61;
            case 61:
                if (!RestCheckListItemUpdatePort.GetMessageId(__ctx0__.__subWrapper5.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[1]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper5 != null)
                {
                    __ctx0__.__subWrapper5.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper5 = null;
                }
                if (__ctx1__.__RestChecklistItemUpdateResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemUpdateResponseMsg);
                __ctx1__.__RestChecklistItemUpdateResponseMsg = new RestChecklistItemUpdateResponseType("RestChecklistItemUpdateResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestChecklistItemUpdateResponseMsg);
                RestCheckListItemUpdatePort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestChecklistItemUpdateResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[2], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 62 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 62;
            case 62:
                if ( !PreProgressInc( __seg__, __ctx__, 63 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestChecklistItemUpdateResponseMsg);
                    __edata.PortName = @"RestCheckListItemUpdatePort";
                    Tracker.FireEvent(__eventLocations[91],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 63;
            case 63:
                if ( !PreProgressInc( __seg__, __ctx__, 64 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[92],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 64;
            case 64:
                __ctx1__.__RestCheckListItemUpdateMessage = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestChecklistItemUpdateResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem']/*[local-name()='errors' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem']/*[local-name()='message' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 65 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 65;
            case 65:
                if ( !PreProgressInc( __seg__, __ctx__, 66 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[93],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 66;
            case 66:
                __ctx1__.__RestCheckListItemUpdateSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestChecklistItemUpdateResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem']/*[local-name()='id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/UPDATE/RestChecklistItem'])", typeof(System.String));
                if (__ctx1__ != null && __ctx1__.__RestChecklistItemUpdateResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemUpdateResponseMsg);
                    __ctx1__.__RestChecklistItemUpdateResponseMsg = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 67 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 67;
            case 67:
                if ( !PreProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[94],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 68;
            case 68:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__RestCheckListItemUpdateMessage) && (__ctx1__.__RestCheckListItemUpdateSFID.Length == 0);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 74 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 74;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 69 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 69;
            case 69:
                if ( !PreProgressInc( __seg__, __ctx__, 70 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[95],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 70;
            case 70:
                __ctx1__.__RestCheckListItemUpdateException = new System.Exception("DLAP Document Upload Rest Exception Occurred- " + __ctx1__.__RestCheckListItemUpdateMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 71 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 71;
            case 71:
                if ( !PreProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[96],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 72;
            case 72:
                if ( !PreProgressInc( __seg__, __ctx__, 73 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[97],__eventData[10],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 73;
            case 73:
                throw __ctx1__.__RestCheckListItemUpdateException;
            case 74:
                if ( !PreProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[98],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 75;
            case 75:
                if ( !PreProgressInc( __seg__, __ctx__, 76 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[99],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 76;
            case 76:
                if ( !PreProgressInc( __seg__, __ctx__, 77 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[100],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 77;
            case 77:
                __ctx1__.__ApplicationNumber = __ctx1__.__DocApplicationId;
                if ( !PostProgressInc( __seg__, __ctx__, 78 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 78;
            case 78:
                if ( !PreProgressInc( __seg__, __ctx__, 79 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[101],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 79;
            case 79:
                __ctx1__.__SalesForceObjectName = "Appplication";
                if ( !PostProgressInc( __seg__, __ctx__, 80 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 80;
            case 80:
                __ctx1__.__SalesForceObjectId = __ctx1__.__ContentDocumentlinkSFID;
                if ( !PostProgressInc( __seg__, __ctx__, 81 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 81;
            case 81:
                __ctx1__.__OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;
                if ( !PostProgressInc( __seg__, __ctx__, 82 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 82;
            case 82:
                __ctx1__.__Stage = "Document Received";
                if ( !PostProgressInc( __seg__, __ctx__, 83 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 83;
            case 83:
                __ctx1__.__Status = "Success";
                if ( !PostProgressInc( __seg__, __ctx__, 84 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 84;
            case 84:
                __ctx1__.__Message = "DLAP Document Sucessfully Uploaded";
                if ( !PostProgressInc( __seg__, __ctx__, 85 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 85;
            case 85:
                if ( !PostProgressInc( __seg__, __ctx__, 90 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 90;
            case 86:
                if ( !PreProgressInc( __seg__, __ctx__, 87 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[102],__eventData[5],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 87;
            case 87:
                __ctx1__.__OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;
                if ( !PostProgressInc( __seg__, __ctx__, 88 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 88;
            case 88:
                if ( !PreProgressInc( __seg__, __ctx__, 89 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[103],__eventData[6],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 89;
            case 89:
                __ctx1__.__Message = "DLAP Document Upload Failed  " + __ctx1__.__MessageL;
                if ( !PostProgressInc( __seg__, __ctx__, 90 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 90;
            case 90:
                if ( !PreProgressInc( __seg__, __ctx__, 91 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[104],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 91;
            case 91:
                if (!__ctx2__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 92 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 92;
            case 92:
                if ( !PreProgressInc( __seg__, __ctx__, 93 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx2__.OnCommit();
                goto case 93;
            case 93:
                __seg__.SegmentDone();
                _segments[1].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment3(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[3];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            ____scope36_2 __ctx2__ = (____scope36_2)_stateMgrs[2];
            ____scope37_3 __ctx3__ = (____scope37_3)_stateMgrs[3];

            switch (__seg__.Progress)
            {
            case 0:
                if ( !PreProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 1;
            case 1:
                __ctx3__ = new ____scope37_3(this);
                _stateMgrs[3] = __ctx3__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.StartContext(__seg__, __ctx3__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[56],__eventData[13],_stateMgrs[2].TrackDataStream );
                __ctx3__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                __seg__.SegmentDone();
                _segments[2].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment4(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[4];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[3];
            __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)_stateMgrs[0];
            __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)_stateMgrs[1];
            ____scope36_2 __ctx2__ = (____scope36_2)_stateMgrs[2];
            ____scope37_3 __ctx3__ = (____scope37_3)_stateMgrs[3];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if (__ctx3__.LockWrite(0, _segments[4]) == false)  // __UploadParentLogic_1.__DocMetaData
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if (__ctx3__.LockWrite(1, _segments[4]) == false)  // __UploadParentLogic_1.__UploadMetaDataMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if (__ctx3__.LockWrite(2, _segments[4]) == false)  // __UploadParentLogic_1.__RestLoanQueryRequestMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if (__ctx3__.LockWrite(3, _segments[4]) == false)  // __UploadParentLogic_1.__TempMetaData
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if (__ctx3__.LockWrite(4, _segments[4]) == false)  // __UploadParentLogic_1.__TempMetadataXmlStr
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if (__ctx3__.LockWrite(5, _segments[4]) == false)  // __UploadParentLogic_1.__LoanName
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if (__ctx3__.LockWrite(6, _segments[4]) == false)  // __UploadParentLogic_1.__SOQL_LoanInfo_QUERY
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if (__ctx3__.LockWrite(7, _segments[4]) == false)  // __UploadParentLogic_1.__RestLoanQueryResponseMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if (__ctx3__.LockWrite(8, _segments[4]) == false)  // __UploadParentLogic_1.__LoanSFID
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if (__ctx3__.LockWrite(9, _segments[4]) == false)  // __UploadParentLogic_1.__RestReceiptDocumentRequestMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if (__ctx3__.LockWrite(10, _segments[4]) == false)  // __UploadParentLogic_1.__RestReceiptDocumentResponseMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if (__ctx3__.LockWrite(11, _segments[4]) == false)  // __UploadParentLogic_1.__CheckListItemFlag
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if (__ctx3__.LockWrite(12, _segments[4]) == false)  // __UploadParentLogic_1.__RestReceiptMessage
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if (__ctx3__.LockWrite(13, _segments[4]) == false)  // __UploadParentLogic_1.__RestReceiptSFID
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if (__ctx3__.LockWrite(14, _segments[4]) == false)  // __UploadParentLogic_1.__RECEIPTDOCUMENT_ID
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if (__ctx3__.LockWrite(15, _segments[4]) == false)  // __UploadParentLogic_1.__RestReceiptException
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                if (__ctx3__.LockRead(16, _segments[4]) == false)  // __UploadParentLogic_1.__ApplicationSFID
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if (__ctx3__.LockRead(17, _segments[4]) == false)  // __UploadParentLogic_1.__Empty
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if (__ctx3__.LockWrite(18, _segments[4]) == false)  // __UploadParentLogic_1.__ContentDocumentlinkSFID
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if (__ctx3__.LockWrite(19, _segments[4]) == false)  // __UploadParentLogic_1.__ResponseStatus
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                if (__ctx3__.LockWrite(20, _segments[4]) == false)  // __UploadParentLogic_1.__Flag
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 23;
            case 23:
                if (__ctx3__.LockWrite(21, _segments[4]) == false)  // __UploadParentLogic_1.__DocumentUploadResponseMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                if (__ctx3__.LockRead(22, _segments[4]) == false)  // __UploadParentLogic_1.__DocumentUploadRequestMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 25;
            case 25:
                if (__ctx3__.LockWrite(23, _segments[4]) == false)  // __UploadParentLogic_1.__CheckListResponseStatus
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                if (__ctx3__.LockWrite(24, _segments[4]) == false)  // __UploadParentLogic_1.__TempDocResponseXml
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 27;
            case 27:
                if (__ctx3__.LockRead(25, _segments[4]) == false)  // __UploadParentLogic_1.__DocApplicationId
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                if (__ctx3__.LockWrite(26, _segments[4]) == false)  // __UploadParentLogic_1.__ApplicationNumber
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 29;
            case 29:
                if (__ctx3__.LockWrite(27, _segments[4]) == false)  // __UploadParentLogic_1.__MessageL
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 30;
            case 30:
                if (__ctx3__.LockWrite(28, _segments[4]) == false)  // __UploadParentLogic_1.__OrchestrationInstanceId
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                if (__ctx3__.LockWrite(29, _segments[4]) == false)  // __UploadParentLogic_1.__SalesForceObjectId
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 32:
                if (__ctx3__.LockWrite(30, _segments[4]) == false)  // __UploadParentLogic_1.__SalesForceObjectName
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 33;
            case 33:
                if (__ctx3__.LockWrite(31, _segments[4]) == false)  // __UploadParentLogic_1.__Stage
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 34;
            case 34:
                if (__ctx3__.LockWrite(32, _segments[4]) == false)  // __UploadParentLogic_1.__Status
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 35;
            case 35:
                if (__ctx3__.LockWrite(40, _segments[4]) == false)  // .Operation
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 36;
            case 36:
                if (__ctx3__.LockWrite(41, _segments[4]) == false)  // .Operation
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                __condition__ = __ctx1__.__DocMetaData.Contains("ReceiptMetaData");
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 96 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 96;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 38:
                if ( !PreProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[21],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 39;
            case 39:
                {
                    UploadMetaDataType __UploadMetaDataMsg = new UploadMetaDataType("UploadMetaDataMsg", __ctx1__);
                    RestLoanQueryRequestType __RestLoanQueryRequestMsg = new RestLoanQueryRequestType("RestLoanQueryRequestMsg", __ctx1__);

                    __ctx1__.__TempMetaData.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__TempMetadataXmlStr = __ctx1__.__DocMetaData.Replace("<![CDATA[", "");
                    __ctx1__.__TempMetadataXmlStr = __ctx1__.__TempMetadataXmlStr.Replace("]]>", "");
                    __ctx1__.__TempMetaData.UnderlyingXmlDocument.LoadXml(__ctx1__.__TempMetadataXmlStr);
                    __UploadMetaDataMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempMetaData.UnderlyingXmlDocument);
                    ApplyTransform(typeof(DLAPDocumentUploadLogic.MakeLoanRequestMsg), new object[] {__RestLoanQueryRequestMsg.MessagePart}, new object[] {__UploadMetaDataMsg.MessagePart});
                    __ctx1__.__LoanName = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__RestLoanQueryRequestMsg.MessagePart, "string(/*[local-name()='Request' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan']/*[local-name()='SOQL_Loan_Query' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan'])", typeof(System.String));
                    __ctx1__.__SOQL_LoanInfo_QUERY = @"SELECT Id, Name FROM Loan__c WHERE Name IN " + "(" + "'" + __ctx1__.__LoanName + "'" + ")";
                    __RestLoanQueryRequestMsg.SetPropertyValue(typeof(DLAPDocumentUploadSalesForceDefinition.Rest.SOQL_Loan_Query), __ctx1__.__SOQL_LoanInfo_QUERY);

                    if (__ctx1__.__UploadMetaDataMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__UploadMetaDataMsg);
                    __ctx1__.__UploadMetaDataMsg = __UploadMetaDataMsg;
                    __ctx1__.RefMessage(__ctx1__.__UploadMetaDataMsg);
                    if (__ctx1__.__RestLoanQueryRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestLoanQueryRequestMsg);
                    __ctx1__.__RestLoanQueryRequestMsg = __RestLoanQueryRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestLoanQueryRequestMsg);
                }
                __ctx1__.__UploadMetaDataMsg.ConstructionCompleteEvent(true);
                __ctx1__.__RestLoanQueryRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 40;
            case 40:
                if ( !PreProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__UploadMetaDataMsg);
                    __edata.Messages.Add(__ctx1__.__RestLoanQueryRequestMsg);
                    Tracker.FireEvent(__eventLocations[22],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 41;
            case 41:
                if ( !PreProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[23],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 42;
            case 42:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 43;
            case 43:
                if ( !PreProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestLoanQueryPort.SendMessage(0, __ctx1__.__RestLoanQueryRequestMsg, null, null, out __ctx0__.__subWrapper2, __ctx3__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 44;
            case 44:
                if ( !PreProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestLoanQueryRequestMsg);
                    __edata.PortName = @"RestLoanQueryPort";
                    Tracker.FireEvent(__eventLocations[24],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestLoanQueryRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestLoanQueryRequestMsg);
                    __ctx1__.__RestLoanQueryRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 45;
            case 45:
                if ( !PreProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[25],__eventData[1],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 46;
            case 46:
                if (!RestLoanQueryPort.GetMessageId(__ctx0__.__subWrapper2.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[2]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper2 != null)
                {
                    __ctx0__.__subWrapper2.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper2 = null;
                }
                if (__ctx1__.__RestLoanQueryResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestLoanQueryResponseMsg);
                __ctx1__.__RestLoanQueryResponseMsg = new RestLoanQueryResponseType("RestLoanQueryResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestLoanQueryResponseMsg);
                RestLoanQueryPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestLoanQueryResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[3], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 47;
            case 47:
                if ( !PreProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestLoanQueryResponseMsg);
                    __edata.PortName = @"RestLoanQueryPort";
                    Tracker.FireEvent(__eventLocations[26],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 48;
            case 48:
                if ( !PreProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[27],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 49;
            case 49:
                __ctx1__.__LoanSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestLoanQueryResponseMsg.MessagePart, "string(/*[local-name()='QueryResult' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan']/*[local-name()='records' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan']/*[local-name()='Id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/Loan'])", typeof(System.String));
                if (__ctx1__ != null && __ctx1__.__RestLoanQueryResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestLoanQueryResponseMsg);
                    __ctx1__.__RestLoanQueryResponseMsg = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 50;
            case 50:
                if ( !PreProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[28],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 51;
            case 51:
                if ( !PreProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[29],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 52;
            case 52:
                __condition__ = (!System.String.IsNullOrWhiteSpace(__ctx1__.__LoanSFID));
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 81 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 81;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 53;
            case 53:
                if ( !PreProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[30],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 54;
            case 54:
                {
                    RestReceiptDocumentRequestType __RestReceiptDocumentRequestMsg = new RestReceiptDocumentRequestType("RestReceiptDocumentRequestMsg", __ctx1__);

                    ApplyTransform(typeof(DLAPDocumentUploadLogic.MakeReceiptDocumentRequestMsg), new object[] {__RestReceiptDocumentRequestMsg.MessagePart}, new object[] {__ctx1__.__UploadMetaDataMsg.MessagePart});
                    __RestReceiptDocumentRequestMsg.MessagePart.XPathStore(__ctx1__.__LoanSFID, "/*[local-name()='SaveRequest' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument']/*[local-name()='records' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument']/*[local-name()='Loan__c' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument']");

                    if (__ctx1__.__RestReceiptDocumentRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestReceiptDocumentRequestMsg);
                    __ctx1__.__RestReceiptDocumentRequestMsg = __RestReceiptDocumentRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestReceiptDocumentRequestMsg);
                }
                __ctx1__.__RestReceiptDocumentRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 55:
                if ( !PreProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestReceiptDocumentRequestMsg);
                    __edata.Messages.Add(__ctx1__.__UploadMetaDataMsg);
                    Tracker.FireEvent(__eventLocations[31],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 56;
            case 56:
                if ( !PreProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[32],__eventData[4],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 57;
            case 57:
                if (!__ctx3__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 58;
            case 58:
                if ( !PreProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestReceiptDocumentInsetPort.SendMessage(0, __ctx1__.__RestReceiptDocumentRequestMsg, null, null, out __ctx0__.__subWrapper3, __ctx3__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 59;
            case 59:
                if ( !PreProgressInc( __seg__, __ctx__, 60 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestReceiptDocumentRequestMsg);
                    __edata.PortName = @"RestReceiptDocumentInsetPort";
                    Tracker.FireEvent(__eventLocations[33],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestReceiptDocumentRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestReceiptDocumentRequestMsg);
                    __ctx1__.__RestReceiptDocumentRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 60;
            case 60:
                if ( !PreProgressInc( __seg__, __ctx__, 61 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[34],__eventData[1],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 61;
            case 61:
                if (!RestReceiptDocumentInsetPort.GetMessageId(__ctx0__.__subWrapper3.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[3]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper3 != null)
                {
                    __ctx0__.__subWrapper3.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper3 = null;
                }
                if (__ctx1__.__RestReceiptDocumentResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestReceiptDocumentResponseMsg);
                __ctx1__.__RestReceiptDocumentResponseMsg = new RestReceiptDocumentResponseType("RestReceiptDocumentResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestReceiptDocumentResponseMsg);
                RestReceiptDocumentInsetPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestReceiptDocumentResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[3], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 62 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 62;
            case 62:
                if ( !PreProgressInc( __seg__, __ctx__, 63 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestReceiptDocumentResponseMsg);
                    __edata.PortName = @"RestReceiptDocumentInsetPort";
                    Tracker.FireEvent(__eventLocations[35],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 63;
            case 63:
                if ( !PreProgressInc( __seg__, __ctx__, 64 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[36],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 64;
            case 64:
                __ctx1__.__CheckListItemFlag = false;
                if ( !PostProgressInc( __seg__, __ctx__, 65 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 65;
            case 65:
                if ( !PreProgressInc( __seg__, __ctx__, 66 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[37],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 66;
            case 66:
                __ctx1__.__RestReceiptMessage = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestReceiptDocumentResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument']/*[local-name()='errors' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument']/*[local-name()='message' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 67 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 67;
            case 67:
                __ctx1__.__RestReceiptSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestReceiptDocumentResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument']/*[local-name()='id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestReceiptDocument'])", typeof(System.String));
                if (__ctx1__ != null && __ctx1__.__RestReceiptDocumentResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestReceiptDocumentResponseMsg);
                    __ctx1__.__RestReceiptDocumentResponseMsg = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 68;
            case 68:
                __ctx1__.__RECEIPTDOCUMENT_ID = __ctx1__.__RestReceiptSFID;
                if ( !PostProgressInc( __seg__, __ctx__, 69 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 69;
            case 69:
                if ( !PreProgressInc( __seg__, __ctx__, 70 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[39],__eventData[7],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 70;
            case 70:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__RestReceiptMessage) && (__ctx1__.__RestReceiptSFID.Length == 0);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 76 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 76;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 71 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 71;
            case 71:
                if ( !PreProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[40],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 72;
            case 72:
                __ctx1__.__RestReceiptException = new System.Exception("DLAP Document Upload Recepit Rest Exception  -  " + __ctx1__.__RestReceiptMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 73 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 73;
            case 73:
                if ( !PreProgressInc( __seg__, __ctx__, 74 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[41],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 74;
            case 74:
                if ( !PreProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[42],__eventData[10],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 75;
            case 75:
                throw __ctx1__.__RestReceiptException;
            case 76:
                if ( !PreProgressInc( __seg__, __ctx__, 77 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[43],__eventData[8],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 77;
            case 77:
                if ( !PreProgressInc( __seg__, __ctx__, 78 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[44],__eventData[11],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 78;
            case 78:
                {
                    Microsoft.XLANGs.Core.Service svc = new DLAPDocument.UploadChildLogic(5, InstanceId, this);
                    _stateMgrs[5] = svc;
                    __ctx3__.StartCall(__seg__, svc, __eventLocations[44],new object[] {__ctx1__.__ApplicationSFID, __ctx1__.__RECEIPTDOCUMENT_ID, __ctx1__.__Empty, null, null, null, new Microsoft.XLANGs.Core.MessageTuple((Microsoft.XLANGs.Core.Context)_stateMgrs[1], null), __ctx1__.__DocumentUploadRequestMsg, __ctx1__.__CheckListItemFlag, null});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 79 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 79:
                if ( !PreProgressInc( __seg__, __ctx__, 80 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[5]).Args;
                    __ctx1__.__ContentDocumentlinkSFID = (System.String)args[3];
                    __ctx1__.__ResponseStatus = (System.String)args[4];
                    __ctx1__.__Flag = (System.Boolean)args[5];
                    __ctx1__.__DocumentUploadResponseMsg = (DocumentUploadResponseType)((Microsoft.XLANGs.Core.MessageTuple)(args[6])).message;
                    __ctx1__.__DocumentUploadResponseMsg.MessageName = "DocumentUploadResponseMsg";
                    __ctx1__.__CheckListResponseStatus = (System.String)args[9];
                }
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadRequestMsg);
                    Tracker.FireEvent(__eventLocations[45],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 80;
            case 80:
                if ( !PostProgressInc( __seg__, __ctx__, 94 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 94;
            case 81:
                if ( !PreProgressInc( __seg__, __ctx__, 82 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[46],__eventData[3],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 82;
            case 82:
                {
                    DocumentUploadResponseType __DocumentUploadResponseMsg = new DocumentUploadResponseType("DocumentUploadResponseMsg", __ctx1__);

                    __ctx1__.__TempDocResponseXml.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__TempDocResponseXml.UnderlyingXmlDocument.LoadXml(@"<ns0:DOCUMENTRESPONSE xmlns:ns0='http://DocumentUploadDefinition.DocumentUpload'><Upload_Status>" + "FAILED" + "</Upload_Status><Upload_Status_Details>" + "Exception:Loan Number couldn’t be found thus the file wasn’t saved" + "</Upload_Status_Details></ns0:DOCUMENTRESPONSE>");
                    __DocumentUploadResponseMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempDocResponseXml.UnderlyingXmlDocument);

                    if (__ctx1__.__DocumentUploadResponseMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadResponseMsg);
                    __ctx1__.__DocumentUploadResponseMsg = __DocumentUploadResponseMsg;
                    __ctx1__.RefMessage(__ctx1__.__DocumentUploadResponseMsg);
                }
                __ctx1__.__DocumentUploadResponseMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 83 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 83;
            case 83:
                if ( !PreProgressInc( __seg__, __ctx__, 84 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    Tracker.FireEvent(__eventLocations[47],__edata,_stateMgrs[3].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 84;
            case 84:
                if ( !PreProgressInc( __seg__, __ctx__, 85 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[48],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 85;
            case 85:
                __ctx1__.__ApplicationNumber = __ctx1__.__DocApplicationId;
                if ( !PostProgressInc( __seg__, __ctx__, 86 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 86;
            case 86:
                if ( !PreProgressInc( __seg__, __ctx__, 87 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[49],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 87;
            case 87:
                __ctx1__.__MessageL = "DLAP Document Upload Exception: Loan Number couldn’t be found on the DLAP Document Metadata Request";
                if ( !PostProgressInc( __seg__, __ctx__, 88 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 88;
            case 88:
                __ctx1__.__OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;
                if ( !PostProgressInc( __seg__, __ctx__, 89 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 89;
            case 89:
                __ctx1__.__SalesForceObjectId = "";
                if ( !PostProgressInc( __seg__, __ctx__, 90 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 90;
            case 90:
                __ctx1__.__SalesForceObjectName = "Appplication";
                if ( !PostProgressInc( __seg__, __ctx__, 91 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 91;
            case 91:
                __ctx1__.__Stage = "Document Received";
                if ( !PostProgressInc( __seg__, __ctx__, 92 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 92;
            case 92:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 93 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 93;
            case 93:
                __ctx1__.__Flag = false;
                if ( !PostProgressInc( __seg__, __ctx__, 94 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 94;
            case 94:
                if ( !PreProgressInc( __seg__, __ctx__, 95 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null && __ctx1__.__UploadMetaDataMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__UploadMetaDataMsg);
                    __ctx1__.__UploadMetaDataMsg = null;
                }
                Tracker.FireEvent(__eventLocations[50],__eventData[8],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 95;
            case 95:
                if ( !PostProgressInc( __seg__, __ctx__, 102 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 102;
            case 96:
                if ( !PreProgressInc( __seg__, __ctx__, 97 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[51],__eventData[5],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 97;
            case 97:
                __ctx1__.__CheckListItemFlag = false;
                if ( !PostProgressInc( __seg__, __ctx__, 98 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 98;
            case 98:
                if ( !PreProgressInc( __seg__, __ctx__, 99 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[52],__eventData[6],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 99;
            case 99:
                if ( !PreProgressInc( __seg__, __ctx__, 100 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[53],__eventData[11],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 100;
            case 100:
                {
                    Microsoft.XLANGs.Core.Service svc = new DLAPDocument.UploadChildLogic(6, InstanceId, this);
                    _stateMgrs[6] = svc;
                    __ctx3__.StartCall(__seg__, svc, __eventLocations[53],new object[] {__ctx1__.__ApplicationSFID, __ctx1__.__RECEIPTDOCUMENT_ID, __ctx1__.__Empty, null, null, null, new Microsoft.XLANGs.Core.MessageTuple((Microsoft.XLANGs.Core.Context)_stateMgrs[1], null), __ctx1__.__DocumentUploadRequestMsg, __ctx1__.__CheckListItemFlag, null});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 101 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 101:
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[6]).Args;
                    __ctx1__.__ContentDocumentlinkSFID = (System.String)args[3];
                    __ctx1__.__ResponseStatus = (System.String)args[4];
                    __ctx1__.__Flag = (System.Boolean)args[5];
                    __ctx1__.__DocumentUploadResponseMsg = (DocumentUploadResponseType)((Microsoft.XLANGs.Core.MessageTuple)(args[6])).message;
                    __ctx1__.__DocumentUploadResponseMsg.MessageName = "DocumentUploadResponseMsg";
                    __ctx1__.__CheckListResponseStatus = (System.String)args[9];
                }
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadRequestMsg);
                    Tracker.FireEvent(__eventLocations[54],__edata,_stateMgrs[3].TrackDataStream );
                }
                if ( !PostProgressInc( __seg__, __ctx__, 102 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 102;
            case 102:
                if ( !PreProgressInc( __seg__, __ctx__, 103 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[55],__eventData[8],_stateMgrs[3].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 103;
            case 103:
                if (!__ctx3__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 104 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 104;
            case 104:
                if ( !PreProgressInc( __seg__, __ctx__, 105 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx3__.OnCommit();
                goto case 105;
            case 105:
                __seg__.SegmentDone();
                _segments[3].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment5(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[5];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            ____scope38_4 __ctx4__ = (____scope38_4)_stateMgrs[4];
            ____scope36_2 __ctx2__ = (____scope36_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                if ( !PreProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[57],__eventData[2],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 1;
            case 1:
                __ctx4__ = new ____scope38_4(this);
                _stateMgrs[4] = __ctx4__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx2__.StartContext(__seg__, __ctx4__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if ( !PreProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[78],__eventData[13],_stateMgrs[2].TrackDataStream );
                __ctx4__.Finally();
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 4;
            case 4:
                __seg__.SegmentDone();
                _segments[2].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment6(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[6];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[4];
            ____scope38_4 __ctx4__ = (____scope38_4)_stateMgrs[4];
            __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)_stateMgrs[0];
            __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)_stateMgrs[1];
            ____scope36_2 __ctx2__ = (____scope36_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[59],__eventData[7],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if (__ctx4__.LockWrite(11, _segments[6]) == false)  // __UploadParentLogic_1.__CheckListItemFlag
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 3;
            case 3:
                if (__ctx4__.LockRead(17, _segments[6]) == false)  // __UploadParentLogic_1.__Empty
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                if (__ctx4__.LockWrite(18, _segments[6]) == false)  // __UploadParentLogic_1.__ContentDocumentlinkSFID
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                if (__ctx4__.LockWrite(19, _segments[6]) == false)  // __UploadParentLogic_1.__ResponseStatus
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if (__ctx4__.LockWrite(20, _segments[6]) == false)  // __UploadParentLogic_1.__Flag
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if (__ctx4__.LockWrite(21, _segments[6]) == false)  // __UploadParentLogic_1.__DocumentUploadResponseMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if (__ctx4__.LockWrite(22, _segments[6]) == false)  // __UploadParentLogic_1.__DocumentUploadRequestMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                if (__ctx4__.LockWrite(23, _segments[6]) == false)  // __UploadParentLogic_1.__CheckListResponseStatus
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if (__ctx4__.LockRead(33, _segments[6]) == false)  // __UploadParentLogic_1.__DocCheckListItemSFID
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if (__ctx4__.LockWrite(34, _segments[6]) == false)  // __UploadParentLogic_1.__RestChecklistItemDocumentDetailsRequestMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if (__ctx4__.LockWrite(35, _segments[6]) == false)  // __UploadParentLogic_1.__SOQL_ContentDocument_QUERY
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if (__ctx4__.LockWrite(36, _segments[6]) == false)  // __UploadParentLogic_1.__RestChecklistItemDocumentDetailsResponseMsg
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if (__ctx4__.LockWrite(37, _segments[6]) == false)  // __UploadParentLogic_1.__ExistedCheckListItemDocumentContentSFID
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if (__ctx4__.LockWrite(38, _segments[6]) == false)  // __UploadParentLogic_1.__CheckListDocumentCount
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                if (__ctx4__.LockWrite(39, _segments[6]) == false)  // __UploadParentLogic_1.__CheckListDocumentStatus
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if (__ctx4__.LockWrite(42, _segments[6]) == false)  // .Operation
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                __condition__ = (!System.String.IsNullOrWhiteSpace(__ctx1__.__DocCheckListItemSFID)) && (__ctx1__.__DocCheckListItemSFID != "0");
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 51 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 51;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[60],__eventData[3],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                {
                    RestChecklistItemDocumentDetailsRequestType __RestChecklistItemDocumentDetailsRequestMsg = new RestChecklistItemDocumentDetailsRequestType("RestChecklistItemDocumentDetailsRequestMsg", __ctx1__);

                    ApplyTransform(typeof(DLAPDocumentUploadLogic.MakeContentDocumentLinkSelectCheckListItemRequest), new object[] {__RestChecklistItemDocumentDetailsRequestMsg.MessagePart}, new object[] {__ctx1__.__DocumentUploadRequestMsg.MessagePart});
                    __ctx1__.__SOQL_ContentDocument_QUERY = @"SELECT LinkedEntityId,ContentDocument.Id,ContentDocument.LatestPublishedVersion.Id FROM ContentDocumentLink WHERE LinkedEntityId IN " + "(" + "'" + __ctx1__.__DocCheckListItemSFID + "'" + ")";
                    __RestChecklistItemDocumentDetailsRequestMsg.SetPropertyValue(typeof(DLAPDocumentUploadSalesForceDefinition.Rest.SOQL_ContentDocument_Query), __ctx1__.__SOQL_ContentDocument_QUERY);

                    if (__ctx1__.__RestChecklistItemDocumentDetailsRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemDocumentDetailsRequestMsg);
                    __ctx1__.__RestChecklistItemDocumentDetailsRequestMsg = __RestChecklistItemDocumentDetailsRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestChecklistItemDocumentDetailsRequestMsg);
                }
                __ctx1__.__RestChecklistItemDocumentDetailsRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestChecklistItemDocumentDetailsRequestMsg);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadRequestMsg);
                    Tracker.FireEvent(__eventLocations[61],__edata,_stateMgrs[4].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[62],__eventData[4],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                if (!__ctx4__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestCheckListContentDocumentQueryPort.SendMessage(0, __ctx1__.__RestChecklistItemDocumentDetailsRequestMsg, null, null, out __ctx0__.__subWrapper4, __ctx4__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestChecklistItemDocumentDetailsRequestMsg);
                    __edata.PortName = @"RestCheckListContentDocumentQueryPort";
                    Tracker.FireEvent(__eventLocations[63],__edata,_stateMgrs[4].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestChecklistItemDocumentDetailsRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemDocumentDetailsRequestMsg);
                    __ctx1__.__RestChecklistItemDocumentDetailsRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                if ( !PreProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[64],__eventData[1],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 27;
            case 27:
                if (!RestCheckListContentDocumentQueryPort.GetMessageId(__ctx0__.__subWrapper4.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[4]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper4 != null)
                {
                    __ctx0__.__subWrapper4.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper4 = null;
                }
                if (__ctx1__.__RestChecklistItemDocumentDetailsResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemDocumentDetailsResponseMsg);
                __ctx1__.__RestChecklistItemDocumentDetailsResponseMsg = new RestChecklistItemDocumentDetailsResponseType("RestChecklistItemDocumentDetailsResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestChecklistItemDocumentDetailsResponseMsg);
                RestCheckListContentDocumentQueryPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestChecklistItemDocumentDetailsResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[4], __seg__);
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestChecklistItemDocumentDetailsResponseMsg);
                    __edata.PortName = @"RestCheckListContentDocumentQueryPort";
                    Tracker.FireEvent(__eventLocations[65],__edata,_stateMgrs[4].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[66],__eventData[5],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                __ctx1__.__ExistedCheckListItemDocumentContentSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestChecklistItemDocumentDetailsResponseMsg.MessagePart, "string(/*[local-name()='QueryResult' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument']/*[local-name()='records' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument']/*[local-name()='ContentDocument' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument']/*[local-name()='Id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 31;
            case 31:
                if ( !PreProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[67],__eventData[6],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 32;
            case 32:
                __ctx1__.__CheckListDocumentCount = (System.Int32)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestChecklistItemDocumentDetailsResponseMsg.MessagePart, "string(/*[local-name()='QueryResult' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument']/*[local-name()='totalSize' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/ContentDocument'])", typeof(System.Int32));
                if (__ctx1__ != null && __ctx1__.__RestChecklistItemDocumentDetailsResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestChecklistItemDocumentDetailsResponseMsg);
                    __ctx1__.__RestChecklistItemDocumentDetailsResponseMsg = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 33;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[58],__eventData[7],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                __condition__ = __ctx1__.__CheckListDocumentCount != 0;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 37;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 35;
            case 35:
                __ctx1__.__CheckListDocumentStatus = true;
                if ( !PostProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 36;
            case 36:
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 37:
                __ctx1__.__CheckListDocumentStatus = false;
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 38:
                if ( !PreProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[68],__eventData[8],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 39;
            case 39:
                __ctx1__.__CheckListItemFlag = true;
                if ( !PostProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 40;
            case 40:
                if ( !PreProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[69],__eventData[7],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 41;
            case 41:
                __condition__ = __ctx1__.__CheckListDocumentStatus;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 46 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 46;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 42;
            case 42:
                if ( !PreProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[70],__eventData[11],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 43;
            case 43:
                {
                    Microsoft.XLANGs.Core.Service svc = new DLAPDocument.UploadUpdatingCheckListItemDocumentProccessingLogic(7, InstanceId, this);
                    _stateMgrs[7] = svc;
                    __ctx4__.StartCall(__seg__, svc, __eventLocations[70],new object[] {new Microsoft.XLANGs.Core.MessageTuple((Microsoft.XLANGs.Core.Context)_stateMgrs[1], null), __ctx1__.__DocumentUploadRequestMsg, null, null, __ctx1__.__DocCheckListItemSFID, __ctx1__.__ExistedCheckListItemDocumentContentSFID});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 44:
                if ( !PreProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[7]).Args;
                    __ctx1__.__DocumentUploadResponseMsg = (DocumentUploadResponseType)((Microsoft.XLANGs.Core.MessageTuple)(args[0])).message;
                    __ctx1__.__DocumentUploadResponseMsg.MessageName = "DocumentUploadResponseMsg";
                    __ctx1__.__Flag = (System.Boolean)args[2];
                    __ctx1__.__CheckListResponseStatus = (System.String)args[3];
                }
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadRequestMsg);
                    Tracker.FireEvent(__eventLocations[71],__edata,_stateMgrs[4].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 45;
            case 45:
                if ( !PostProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 49;
            case 46:
                if ( !PreProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[72],__eventData[11],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 47;
            case 47:
                {
                    Microsoft.XLANGs.Core.Service svc = new DLAPDocument.UploadChildLogic(8, InstanceId, this);
                    _stateMgrs[8] = svc;
                    __ctx4__.StartCall(__seg__, svc, __eventLocations[72],new object[] {__ctx1__.__Empty, __ctx1__.__Empty, __ctx1__.__DocCheckListItemSFID, null, null, null, new Microsoft.XLANGs.Core.MessageTuple((Microsoft.XLANGs.Core.Context)_stateMgrs[1], null), __ctx1__.__DocumentUploadRequestMsg, __ctx1__.__CheckListItemFlag, null});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 48:
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[8]).Args;
                    __ctx1__.__ContentDocumentlinkSFID = (System.String)args[3];
                    __ctx1__.__ResponseStatus = (System.String)args[4];
                    __ctx1__.__Flag = (System.Boolean)args[5];
                    __ctx1__.__DocumentUploadResponseMsg = (DocumentUploadResponseType)((Microsoft.XLANGs.Core.MessageTuple)(args[6])).message;
                    __ctx1__.__DocumentUploadResponseMsg.MessageName = "DocumentUploadResponseMsg";
                    __ctx1__.__CheckListResponseStatus = (System.String)args[9];
                }
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Call);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadResponseMsg);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadRequestMsg);
                    Tracker.FireEvent(__eventLocations[73],__edata,_stateMgrs[4].TrackDataStream );
                }
                if ( !PostProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 49;
            case 49:
                if ( !PreProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[74],__eventData[8],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 50;
            case 50:
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 51:
                if ( !PreProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[75],__eventData[5],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 52;
            case 52:
                __ctx1__.__Flag = true;
                if ( !PostProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 53;
            case 53:
                if ( !PreProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[76],__eventData[6],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 54;
            case 54:
                __ctx1__.__CheckListResponseStatus = "Success";
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 55:
                if ( !PreProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[77],__eventData[8],_stateMgrs[4].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 56;
            case 56:
                if (!__ctx4__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 57;
            case 57:
                if ( !PreProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx4__.OnCommit();
                goto case 58;
            case 58:
                __seg__.SegmentDone();
                _segments[5].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment7(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[7];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[2];
            __UploadParentLogic_root_0 __ctx0__ = (__UploadParentLogic_root_0)_stateMgrs[0];
            __UploadParentLogic_1 __ctx1__ = (__UploadParentLogic_1)_stateMgrs[1];
            ____scope36_2 __ctx2__ = (____scope36_2)_stateMgrs[2];

            switch (__seg__.Progress)
            {
            case 0:
                OnBeginCatchHandler(2);
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                if ( !PreProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[105],__eventData[15],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[106],__eventData[7],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __condition__ = __ctx2__.__UEx_0.InnerException != null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 8;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.__MessageTemp = __ctx2__.__UEx_0.InnerException.ToString();
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx1__.__Message = __ctx1__.__MessageTemp.Substring(0, System.Convert.ToInt32(System.Math.Min(900U, __ctx1__.__MessageTemp.Length))) + "Total String Length:" + __ctx1__.__MessageTemp.Length.ToString();
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                System.Diagnostics.EventLog.WriteEntry("DLAP Document Upload Exception ", __ctx1__.__Message, System.Diagnostics.EventLogEntryType.Error);
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 8:
                __ctx1__.__MessageTemp = __ctx2__.__UEx_0.Message.ToString();
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                __ctx1__.__Message = __ctx1__.__MessageTemp.Substring(0, System.Convert.ToInt32(System.Math.Min(900U, __ctx1__.__MessageTemp.Length))) + "Total String Length:" + __ctx1__.__MessageTemp.Length.ToString();
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                System.Diagnostics.EventLog.WriteEntry("DLAP Document Upload Exception", __ctx1__.__Message, System.Diagnostics.EventLogEntryType.Error);
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx2__ != null)
                    __ctx2__.__UEx_0 = null;
                Tracker.FireEvent(__eventLocations[109],__eventData[8],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                __ctx1__.__ApplicationNumber = __ctx1__.__DocApplicationId;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                __ctx1__.__OrchestrationInstanceId = Microsoft.XLANGs.Core.Service.RootService.InstanceId;
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                __ctx1__.__SalesForceObjectName = "Appplication";
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                __ctx1__.__Stage = "Document Received";
                if ( !PostProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 16;
            case 16:
                __ctx1__.__Status = "Error";
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[110],__eventData[3],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                {
                    DocumentUploadFaultResponseType __DocumentUploadFaultResponseMsg = new DocumentUploadFaultResponseType("DocumentUploadFaultResponseMsg", __ctx1__);

                    __ctx1__.__TempFaultResponse.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__TempFaultResponse.UnderlyingXmlDocument.LoadXml(@"<ns0:Fault xmlns:ns0='http://SBA.gov/DLAPDocumentUploadDefinition/Fault'><FaultString>Exception:Internal Error</FaultString><FaultCode>An error occurred while processing the DLAP Document Upload</FaultCode></ns0:Fault>");
                    __DocumentUploadFaultResponseMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempFaultResponse.UnderlyingXmlDocument);

                    if (__ctx1__.__DocumentUploadFaultResponseMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadFaultResponseMsg);
                    __ctx1__.__DocumentUploadFaultResponseMsg = __DocumentUploadFaultResponseMsg;
                    __ctx1__.RefMessage(__ctx1__.__DocumentUploadFaultResponseMsg);
                }
                __ctx1__.__DocumentUploadFaultResponseMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadFaultResponseMsg);
                    Tracker.FireEvent(__eventLocations[111],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[112],__eventData[4],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                if (!__ctx2__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                DocumentUploadPort.SendFault(0, 0, __ctx1__.__DocumentUploadFaultResponseMsg, null, null, __ctx2__, __seg__);
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingResp) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingResp;
                goto case 23;
            case 23:
                if ( !PreProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__DocumentUploadFaultResponseMsg);
                    __edata.PortName = @"DocumentUploadPort";
                    Tracker.FireEvent(__eventLocations[113],__edata,_stateMgrs[2].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__DocumentUploadFaultResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__DocumentUploadFaultResponseMsg);
                    __ctx1__.__DocumentUploadFaultResponseMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 24;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[114],__eventData[11],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                {
                    Microsoft.XLANGs.Core.Service svc = new DLAPDocument.UploadEventRequest(9, InstanceId, this);
                    _stateMgrs[9] = svc;
                    __ctx2__.StartCall(__seg__, svc, __eventLocations[114],new object[] {__ctx1__.__ApplicationNumber, __ctx1__.__SalesForceObjectId, __ctx1__.__Message, __ctx1__.__SalesForceObjectName, __ctx1__.__Stage, __ctx1__.__Status, __ctx1__.__Empty, __ctx1__.__OrchestrationInstanceId});
                }
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 26:
                if ( !PreProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    object[] args = ((Microsoft.XLANGs.Core.Service)_stateMgrs[9]).Args;
                }
                Tracker.FireEvent(__eventLocations[115],__eventData[12],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[116],__eventData[16],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                RequestTerminate(__ctx2__,"An error occurred while processing the Salesfroce DLAP Document Upload");
                __seg__.SegmentDone();
                break;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[117],__eventData[17],_stateMgrs[2].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                __ctx2__.__exv__ = null;
                OnEndCatchHandler(2, __seg__);
                __seg__.SegmentDone();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
        private static Microsoft.XLANGs.Core.CachedObject[] _locations = new Microsoft.XLANGs.Core.CachedObject[] {
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{1DB5A601-0E19-46A5-9923-49E4388DE0E8}")),
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{260EFACE-6E05-4500-AC24-EB4303623388}")),
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{053B072B-265A-4CE4-9D63-731CF15D5CBA}")),
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{6FD0C22B-C07C-4AD2-9ED1-7DA9C76FD0A2}")),
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{6763E8E4-9B88-4E3A-84F9-E53BE51496A6}"))
        };

    }
    //#line 312 "C:\Users\skyeniga\Source\Repos\Biztalk\DLAP Document Upload\DLAP Document Upload Logic\Updating CheckList Item Document Proccessing Logic.odx"
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(DLAPDocument.RestCheckListItemContentVersionInsertPortType)
        },
        new System.String[] {
            "RestCheckListItemContentVersionInsertPort"
        },
        new System.Type[] {
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eCallable
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class UploadUpdatingCheckListItemDocumentProccessingLogic : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eHasRequestResponse
,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy(
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eMessage, "") ] out DLAPDocument.DocumentUploadResponseType ActualDocumentUploadResponse,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eMessage, "") ] DLAPDocument.DocumentUploadRequestType ActualDocumentUploadRequest,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] out System.Boolean Flag,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] out System.String CheckListResponseStatus,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String DocCheckListItemSFID,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String ExistedCheckListItemConentSFID)
        {
            ActualDocumentUploadResponse = default(DLAPDocument.DocumentUploadResponseType);
            Flag = default(System.Boolean);
            CheckListResponseStatus = default(System.String);
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(UploadUpdatingCheckListItemDocumentProccessingLogic));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return false; } }

        internal bool IsExeced = false;

        static UploadUpdatingCheckListItemDocumentProccessingLogic()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1)
            };

            _Locks = 0;
            _rootContext = new __UploadUpdatingCheckListItemDocumentProccessingLogic_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[2];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public UploadUpdatingCheckListItemDocumentProccessingLogic(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "UploadUpdatingCheckListItemDocumentProccessingLogic", tracker)
        {
            ConstructorHelper();
        }

        public UploadUpdatingCheckListItemDocumentProccessingLogic(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "UploadUpdatingCheckListItemDocumentProccessingLogic")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>510f44fc-c657-47e8-890e-a40e7f806635</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>66458c32-f7d8-4d50-a9fe-5cba8be56449</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>ActualDocumentUploadResponse</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>fe4bfed7-3184-44e6-b1ea-339f7427c791</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>ActualDocumentUploadRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>6b89b51a-0279-49e1-a1f2-504cfed0aeda</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>90d260e7-645d-49e7-a6e2-7973b3fae4cd</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>CheckListResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>ccc1044f-d07c-4a80-a89f-a3194a36fedc</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>DocCheckListItemSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>afde37af-519f-4b2e-bdd3-77ad060ef0af</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>ExistedCheckListItemConentSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>55b16d24-6edc-4105-bd6e-ea5a6e2360ba</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>DLAP Document Upload Processing</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>2de8697f-2ac8-4537-a29e-455c7bc548f2</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Content Version Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>28c3bb01-4c04-4e9f-a299-c002163c38e9</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>dd662d62-e07c-4ba6-81f3-e47e7a645763</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Content Version Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>86136452-5bee-4cd8-a486-4ba513bd7b79</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>8f69c324-70ec-4a1e-a5ed-4124746312b6</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>0972dc65-ea5b-49a1-ae9e-2bdf59a6fb1a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Inject CheckList Item Conent Document Id</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>100c0bcd-8e94-407e-9f24-7c17ae52c5bb</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send ContentVersion CheckList Update Document Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>95aec90f-e578-4e40-810c-14a656641a36</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Rest ContenVersion Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>8affc51b-3a63-4d79-8202-317bc07de6ea</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Extract Rest Response Values</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>4f4ac997-d4d9-4eb9-abf6-6dc7e628bf2c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Valid Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>9aa38de8-6c2e-44f0-95c4-fb106019f17a</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>6b4ab8e3-16f9-422e-b55d-d2d5118cdcde</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ThrowShape</shapeType>      <ShapeID>c93d66ee-7af7-4789-925c-aa63989d6367</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Error </shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>d3109cac-e9ed-43af-82dc-d37122d8b216</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>ab8ad6fb-13be-4655-9a4e-bf3d4afd7f24</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>74b60f2b-fdde-4217-9e0c-442cb6ee3d28</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Document Upload Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>cc51879b-98e2-441a-8a1e-7cd8be2c41a0</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Document Upload Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>28af9b84-de41-40b9-9adb-30c7970dc0ac</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_4</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>96b3a494-f3fb-43c1-ab1e-10f22e34e81f</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_3</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>743da04d-2e11-4439-b90d-3cd4b1b353a6</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>f13f4375-98aa-4e2b-8bd5-4146177330cc</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'UploadUpdatingCheckListItemDocumentProccessingLogic'</ActionName><IsAtomic>0</IsAtomic><Line>312</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
<Messages>
	<MsgInfo><name>ActualDocumentUploadResponse</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>ActualDocumentUploadRequest</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>329</Line><Position>13</Position><ShapeID>'2de8697f-2ac8-4537-a29e-455c7bc548f2'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion+SaveRequest</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>ActualDocumentUploadRequest</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>337</Line><Position>13</Position><ShapeID>'100c0bcd-8e94-407e-9f24-7c17ae52c5bb'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion+SaveRequest</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>339</Line><Position>13</Position><ShapeID>'95aec90f-e578-4e40-810c-14a656641a36'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion+results</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>341</Line><Position>42</Position><ShapeID>'8affc51b-3a63-4d79-8202-317bc07de6ea'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>345</Line><Position>13</Position><ShapeID>'4f4ac997-d4d9-4eb9-abf6-6dc7e628bf2c'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>348</Line><Position>34</Position><ShapeID>'6b4ab8e3-16f9-422e-b55d-d2d5118cdcde'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>350</Line><Position>17</Position><ShapeID>'c93d66ee-7af7-4789-925c-aa63989d6367'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>352</Line><Position>17</Position><ShapeID>'d3109cac-e9ed-43af-82dc-d37122d8b216'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>355</Line><Position>13</Position><ShapeID>'74b60f2b-fdde-4217-9e0c-442cb6ee3d28'</ShapeID>
<Messages>
	<MsgInfo><name>ActualDocumentUploadResponse</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>RestContentVersionResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion+results</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>361</Line><Position>18</Position><ShapeID>'f13f4375-98aa-4e2b-8bd5-4146177330cc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='7327d164-3582-48ce-b65d-b425c5342446' LowerBound='1.1' HigherBound='69.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='DLAPDocument' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='PortType' OID='0467fb79-6682-434b-9b6d-a7c7da47f3f0' ParentLink='Module_PortType' LowerBound='4.1' HigherBound='11.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestCheckListItemContentVersionInsertPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='ea95849f-087b-4f3c-98fa-4161f6cee7bf' ParentLink='PortType_OperationDeclaration' LowerBound='6.1' HigherBound='10.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='38284902-03af-45fd-a413-c49136666dab' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='8.13' HigherBound='8.42'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestContentVersionRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='39862a0a-5dfc-4fd9-9ce4-6ec9bef8e8ae' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='8.44' HigherBound='8.74'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestContentVersionResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='ServiceDeclaration' OID='264cab93-c8c1-4c40-b6b9-07aef41806e6' ParentLink='Module_ServiceDeclaration' LowerBound='11.1' HigherBound='68.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='UploadUpdatingCheckListItemDocumentProccessingLogic' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='0afd8877-0776-4532-a644-eb58fe5e0618' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='20.1' HigherBound='21.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCliContentVersionMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='b1863722-8ac2-4763-9167-4e16e08062cf' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='21.1' HigherBound='22.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCliContentVersionSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='877bc841-9a16-4623-b19f-f89503b065c2' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='22.1' HigherBound='23.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Exception' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCliException' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='748c5282-a4aa-4d32-a055-4292e2a983b7' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='16.1' HigherBound='17.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestContentVersionResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='5e490a31-8940-44cc-9ba3-d459c686de45' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='17.1' HigherBound='18.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestContentVersionRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='31e49b26-0d9b-4587-94db-42702b497d43' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='18.1' HigherBound='19.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentVersionResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentVersionResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='acd1802c-3945-411f-8598-677598113b46' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='19.1' HigherBound='20.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentVersionRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentVersionRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='510f44fc-c657-47e8-890e-a40e7f806635' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='MessageDeclaration' OID='66458c32-f7d8-4d50-a9fe-5cba8be56449' ParentLink='ServiceBody_Declaration' LowerBound='23.15' HigherBound='23.82'>
                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadResponseType' />
                    <om:Property Name='ParamDirection' Value='Out' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ActualDocumentUploadResponse' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageDeclaration' OID='fe4bfed7-3184-44e6-b1ea-339f7427c791' ParentLink='ServiceBody_Declaration' LowerBound='23.84' HigherBound='23.145'>
                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadRequestType' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ActualDocumentUploadRequest' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='6b89b51a-0279-49e1-a1f2-504cfed0aeda' ParentLink='ServiceBody_Declaration' LowerBound='23.147' HigherBound='23.170'>
                    <om:Property Name='InitialValue' Value='true' />
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.Boolean' />
                    <om:Property Name='ParamDirection' Value='Out' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Flag' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='90d260e7-645d-49e7-a6e2-7973b3fae4cd' ParentLink='ServiceBody_Declaration' LowerBound='23.172' HigherBound='23.213'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='Out' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='CheckListResponseStatus' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='ccc1044f-d07c-4a80-a89f-a3194a36fedc' ParentLink='ServiceBody_Declaration' LowerBound='23.215' HigherBound='23.249'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='DocCheckListItemSFID' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='afde37af-519f-4b2e-bdd3-77ad060ef0af' ParentLink='ServiceBody_Declaration' LowerBound='23.251' HigherBound='23.295'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ExistedCheckListItemConentSFID' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Task' OID='55b16d24-6edc-4105-bd6e-ea5a6e2360ba' ParentLink='ServiceBody_Statement' LowerBound='28.1' HigherBound='66.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='DLAP Document Upload Processing' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='Construct' OID='2de8697f-2ac8-4537-a29e-455c7bc548f2' ParentLink='ComplexStatement_Statement' LowerBound='28.1' HigherBound='36.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Construct Content Version Request' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='MessageRef' OID='28c3bb01-4c04-4e9f-a299-c002163c38e9' ParentLink='Construct_MessageRef' LowerBound='29.23' HigherBound='29.51'>
                            <om:Property Name='Ref' Value='RestContentVersionRequestMsg' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Transform' OID='dd662d62-e07c-4ba6-81f3-e47e7a645763' ParentLink='ComplexStatement_Statement' LowerBound='31.1' HigherBound='33.1'>
                            <om:Property Name='ClassName' Value='DLAPDocumentUploadLogic.MakeUpdateCheckListItemDocumentContentVersionRequest' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Make Content Version Request' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessagePartRef' OID='86136452-5bee-4cd8-a486-4ba513bd7b79' ParentLink='Transform_OutputMessagePartRef' LowerBound='32.28' HigherBound='32.68'>
                                <om:Property Name='MessageRef' Value='RestContentVersionRequestMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_2' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessagePartRef' OID='8f69c324-70ec-4a1e-a5ed-4124746312b6' ParentLink='Transform_InputMessagePartRef' LowerBound='32.150' HigherBound='32.189'>
                                <om:Property Name='MessageRef' Value='ActualDocumentUploadRequest' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_1' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='MessageAssignment' OID='0972dc65-ea5b-49a1-ae9e-2bdf59a6fb1a' ParentLink='ComplexStatement_Statement' LowerBound='33.1' HigherBound='35.1'>
                            <om:Property Name='Expression' Value='xpath(RestContentVersionRequestMsg.MessagePart,&quot;/*[local-name()=&apos;SaveRequest&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;ContentDocumentId&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]&quot;) = ExistedCheckListItemConentSFID;' />
                            <om:Property Name='ReportToAnalyst' Value='False' />
                            <om:Property Name='Name' Value='Inject CheckList Item Conent Document Id' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Send' OID='100c0bcd-8e94-407e-9f24-7c17ae52c5bb' ParentLink='ComplexStatement_Statement' LowerBound='36.1' HigherBound='38.1'>
                        <om:Property Name='PortName' Value='RestCheckListItemContentVersionInsertPort' />
                        <om:Property Name='MessageName' Value='RestContentVersionRequestMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Request' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Send ContentVersion CheckList Update Document Request' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Receive' OID='95aec90f-e578-4e40-810c-14a656641a36' ParentLink='ComplexStatement_Statement' LowerBound='38.1' HigherBound='40.1'>
                        <om:Property Name='Activate' Value='False' />
                        <om:Property Name='PortName' Value='RestCheckListItemContentVersionInsertPort' />
                        <om:Property Name='MessageName' Value='RestContentVersionResponseMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Response' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Receive Rest ContenVersion Response' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='8affc51b-3a63-4d79-8202-317bc07de6ea' ParentLink='ComplexStatement_Statement' LowerBound='40.1' HigherBound='44.1'>
                        <om:Property Name='Expression' Value='RestCliContentVersionMessage = xpath(RestContentVersionResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;errors&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;message&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;RestCliContentVersionSFID = xpath(RestContentVersionResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;])&quot;);' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Extract Rest Response Values' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Decision' OID='4f4ac997-d4d9-4eb9-abf6-6dc7e628bf2c' ParentLink='ComplexStatement_Statement' LowerBound='44.1' HigherBound='54.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Valid Response' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='9aa38de8-6c2e-44f0-95c4-fb106019f17a' ParentLink='ReallyComplexStatement_Branch' LowerBound='45.13' HigherBound='54.1'>
                            <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(RestCliContentVersionMessage) &amp;&amp; (RestCliContentVersionSFID.Length == 0)' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Error' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='6b4ab8e3-16f9-422e-b55d-d2d5118cdcde' ParentLink='ComplexStatement_Statement' LowerBound='47.1' HigherBound='49.1'>
                                <om:Property Name='Expression' Value='RestCliException = new System.Exception(&quot;DLAP Document Upload Checklist Item Content Version Rest Exception Occurred- &quot;+RestCliContentVersionMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Rest Exception' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Throw' OID='c93d66ee-7af7-4789-925c-aa63989d6367' ParentLink='ComplexStatement_Statement' LowerBound='49.1' HigherBound='51.1'>
                                <om:Property Name='ThrownReference' Value='RestCliException' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Rest Error ' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Terminate' OID='d3109cac-e9ed-43af-82dc-d37122d8b216' ParentLink='ComplexStatement_Statement' LowerBound='51.1' HigherBound='53.1'>
                                <om:Property Name='ErrorMessage' Value='&quot;DLAP Document Upload Rest Exception Occurred&quot;;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Terminate' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='ab8ad6fb-13be-4655-9a4e-bf3d4afd7f24' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Construct' OID='74b60f2b-fdde-4217-9e0c-442cb6ee3d28' ParentLink='ComplexStatement_Statement' LowerBound='54.1' HigherBound='60.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Construct Document Upload Response' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Transform' OID='cc51879b-98e2-441a-8a1e-7cd8be2c41a0' ParentLink='ComplexStatement_Statement' LowerBound='57.1' HigherBound='59.1'>
                            <om:Property Name='ClassName' Value='DLAPDocumentUploadLogic.MakeCheckLIstItemDocumentUpdateUploadResponse' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Make Document Upload Response' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessagePartRef' OID='28af9b84-de41-40b9-9adb-30c7970dc0ac' ParentLink='Transform_OutputMessagePartRef' LowerBound='58.28' HigherBound='58.68'>
                                <om:Property Name='MessageRef' Value='ActualDocumentUploadResponse' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_4' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessagePartRef' OID='96b3a494-f3fb-43c1-ab1e-10f22e34e81f' ParentLink='Transform_InputMessagePartRef' LowerBound='58.143' HigherBound='58.184'>
                                <om:Property Name='MessageRef' Value='RestContentVersionResponseMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_3' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='MessageRef' OID='743da04d-2e11-4439-b90d-3cd4b1b353a6' ParentLink='Construct_MessageRef' LowerBound='55.23' HigherBound='55.51'>
                            <om:Property Name='Ref' Value='ActualDocumentUploadResponse' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='f13f4375-98aa-4e2b-8bd5-4146177330cc' ParentLink='ComplexStatement_Statement' LowerBound='60.1' HigherBound='66.1'>
                        <om:Property Name='Expression' Value='Flag = true;&#xD;&#xA;&#xD;&#xA;CheckListResponseStatus = xpath(ActualDocumentUploadResponse.MessagePart, &quot;string(/*[local-name()=&apos;DOCUMENTRESPONSE&apos; and namespace-uri()=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;]/*[local-name()=&apos;Upload_Status&apos; and namespace-uri()=&apos;&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;//ContentDocumentlinkSFID = &quot;1&quot;;' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Flag' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='0d3a4d78-cac5-4cc9-a540-8eb4cb9a5bb8' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='14.1' HigherBound='16.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestCheckListItemContentVersionInsertPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestCheckListItemContentVersionInsertPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='34f3e3f0-df29-44f1-9f71-5a4d82c54047' ParentLink='PortDeclaration_CLRAttribute' LowerBound='14.1' HigherBound='15.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __UploadUpdatingCheckListItemDocumentProccessingLogic_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __UploadUpdatingCheckListItemDocumentProccessingLogic_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "UploadUpdatingCheckListItemDocumentProccessingLogic")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadUpdatingCheckListItemDocumentProccessingLogic __svc__ = (UploadUpdatingCheckListItemDocumentProccessingLogic)_service;
                __UploadUpdatingCheckListItemDocumentProccessingLogic_root_0 __ctx0__ = (__UploadUpdatingCheckListItemDocumentProccessingLogic_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.RestCheckListItemContentVersionInsertPort != null)
                {
                    __svc__.RestCheckListItemContentVersionInsertPort.Close(this, null);
                    __svc__.RestCheckListItemContentVersionInsertPort = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
        }


        [System.SerializableAttribute]
        public class __UploadUpdatingCheckListItemDocumentProccessingLogic_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __UploadUpdatingCheckListItemDocumentProccessingLogic_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "UploadUpdatingCheckListItemDocumentProccessingLogic")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadUpdatingCheckListItemDocumentProccessingLogic __svc__ = (UploadUpdatingCheckListItemDocumentProccessingLogic)_service;
                __UploadUpdatingCheckListItemDocumentProccessingLogic_1 __ctx1__ = (__UploadUpdatingCheckListItemDocumentProccessingLogic_1)(__svc__._stateMgrs[1]);
                __UploadUpdatingCheckListItemDocumentProccessingLogic_root_0 __ctx0__ = (__UploadUpdatingCheckListItemDocumentProccessingLogic_root_0)(__svc__._stateMgrs[0]);

                if (__ctx1__ != null && __ctx1__.__RestContentVersionResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionResponseMsg);
                    __ctx1__.__RestContentVersionResponseMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__RestCliContentVersionMessage = null;
                if (__ctx1__ != null && __ctx1__.__ActualDocumentUploadRequest != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ActualDocumentUploadRequest);
                    __ctx1__.__ActualDocumentUploadRequest = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__RestCliContentVersionSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestCliException = null;
                if (__ctx1__ != null)
                    __ctx1__.__ExistedCheckListItemConentSFID = null;
                if (__ctx1__ != null && __ctx1__.__RestContentVersionRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionRequestMsg);
                    __ctx1__.__RestContentVersionRequestMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__DocCheckListItemSFID = null;
                if (__ctx0__ != null && __ctx0__.__subWrapper0 != null)
                {
                    __ctx0__.__subWrapper0.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper0 = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionResponseMsg")]
            internal RestContentVersionResponseType __RestContentVersionResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionRequestMsg")]
            internal RestContentVersionRequestType __RestContentVersionRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ActualDocumentUploadResponse")]
            internal DocumentUploadResponseType __ActualDocumentUploadResponse;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ActualDocumentUploadRequest")]
            internal DocumentUploadRequestType __ActualDocumentUploadRequest;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestCliContentVersionMessage")]
            internal System.String __RestCliContentVersionMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestCliContentVersionSFID")]
            internal System.String __RestCliContentVersionSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestCliException")]
            internal System.Exception __RestCliException;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Flag")]
            internal System.Boolean __Flag;
            [Microsoft.XLANGs.Core.UserVariableAttribute("CheckListResponseStatus")]
            internal System.String __CheckListResponseStatus;
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocCheckListItemSFID")]
            internal System.String __DocCheckListItemSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ExistedCheckListItemConentSFID")]
            internal System.String __ExistedCheckListItemConentSFID;
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestCheckListItemContentVersionInsertPort")]
        internal RestCheckListItemContentVersionInsertPortType RestCheckListItemContentVersionInsertPort;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestCheckListItemContentVersionInsertPortType.Operation},
                                               typeof(UploadUpdatingCheckListItemDocumentProccessingLogic).GetField("RestCheckListItemContentVersionInsertPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadUpdatingCheckListItemDocumentProccessingLogic), "RestCheckListItemContentVersionInsertPort"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }


        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "2de8697f-2ac8-4537-a29e-455c7bc548f2", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "2de8697f-2ac8-4537-a29e-455c7bc548f2", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "100c0bcd-8e94-407e-9f24-7c17ae52c5bb", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "100c0bcd-8e94-407e-9f24-7c17ae52c5bb", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "95aec90f-e578-4e40-810c-14a656641a36", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "95aec90f-e578-4e40-810c-14a656641a36", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "8affc51b-3a63-4d79-8202-317bc07de6ea", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "8affc51b-3a63-4d79-8202-317bc07de6ea", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "4f4ac997-d4d9-4eb9-abf6-6dc7e628bf2c", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "6b4ab8e3-16f9-422e-b55d-d2d5118cdcde", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "6b4ab8e3-16f9-422e-b55d-d2d5118cdcde", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "c93d66ee-7af7-4789-925c-aa63989d6367", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "d3109cac-e9ed-43af-82dc-d37122d8b216", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "4f4ac997-d4d9-4eb9-abf6-6dc7e628bf2c", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "74b60f2b-fdde-4217-9e0c-442cb6ee3d28", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "74b60f2b-fdde-4217-9e0c-442cb6ee3d28", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "f13f4375-98aa-4e2b-8bd5-4146177330cc", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "f13f4375-98aa-4e2b-8bd5-4146177330cc", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,1,1,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,1,1,2,2,3,4,4,4,5,6,6,7,8,8,9,9,10,10,11,11,12,13,13,14,14,15,16,16,17,18,18,19,19,1,1,1,1,1,};

        public static int[][] __progressLocations = new int[2] [] {__progressLocation0,__progressLocation1};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __UploadUpdatingCheckListItemDocumentProccessingLogic_1 __ctx1__ = (__UploadUpdatingCheckListItemDocumentProccessingLogic_1)_stateMgrs[1];
            __UploadUpdatingCheckListItemDocumentProccessingLogic_root_0 __ctx0__ = (__UploadUpdatingCheckListItemDocumentProccessingLogic_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                RestCheckListItemContentVersionInsertPort = new RestCheckListItemContentVersionInsertPortType(0, this);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __UploadUpdatingCheckListItemDocumentProccessingLogic_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __UploadUpdatingCheckListItemDocumentProccessingLogic_1 __ctx1__ = (__UploadUpdatingCheckListItemDocumentProccessingLogic_1)_stateMgrs[1];
            __UploadUpdatingCheckListItemDocumentProccessingLogic_root_0 __ctx0__ = (__UploadUpdatingCheckListItemDocumentProccessingLogic_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__DocCheckListItemSFID = (System.String)Args[4];
                __ctx1__.__ExistedCheckListItemConentSFID = (System.String)Args[5];
                __ctx1__.__ActualDocumentUploadResponse = null;
                __ctx1__.__ActualDocumentUploadRequest = new DocumentUploadRequestType("ActualDocumentUploadRequest", __ctx1__);
                __ctx1__.__ActualDocumentUploadRequest.CopyFrom((Microsoft.XLANGs.Core.XMessage)Args[1]);
                __ctx1__.RefMessage(__ctx1__.__ActualDocumentUploadRequest);
                __ctx1__.__ActualDocumentUploadRequest.ConstructionCompleteEvent();
                if (__ctx1__ != null)
                    __ctx1__.__DocCheckListItemSFID = null;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx1__.__RestCliContentVersionMessage = default(System.String);
                __ctx1__.__RestCliContentVersionSFID = default(System.String);
                __ctx1__.__RestCliException = default(System.Exception);
                __ctx1__.__Flag = default(System.Boolean);
                __ctx1__.__CheckListResponseStatus = default(System.String);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__RestCliContentVersionMessage = "";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.__RestCliContentVersionSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx1__.__RestCliException = new System.Exception();
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                if ( !PreProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[2],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 7;
            case 7:
                {
                    RestContentVersionRequestType __RestContentVersionRequestMsg = new RestContentVersionRequestType("RestContentVersionRequestMsg", __ctx1__);

                    ApplyTransform(typeof(DLAPDocumentUploadLogic.MakeUpdateCheckListItemDocumentContentVersionRequest), new object[] {__RestContentVersionRequestMsg.MessagePart}, new object[] {__ctx1__.__ActualDocumentUploadRequest.MessagePart});
                    __RestContentVersionRequestMsg.MessagePart.XPathStore(__ctx1__.__ExistedCheckListItemConentSFID, "/*[local-name()='SaveRequest' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='records' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='ContentDocumentId' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']");
                    if (__ctx1__ != null)
                        __ctx1__.__ExistedCheckListItemConentSFID = null;

                    if (__ctx1__.__RestContentVersionRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionRequestMsg);
                    __ctx1__.__RestContentVersionRequestMsg = __RestContentVersionRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestContentVersionRequestMsg);
                }
                __ctx1__.__RestContentVersionRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionRequestMsg);
                    __edata.Messages.Add(__ctx1__.__ActualDocumentUploadRequest);
                    Tracker.FireEvent(__eventLocations[3],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                if ( !PreProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 10;
            case 10:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestCheckListItemContentVersionInsertPort.SendMessage(0, __ctx1__.__RestContentVersionRequestMsg, null, null, out __ctx0__.__subWrapper0, __ctx1__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionRequestMsg);
                    __edata.PortName = @"RestCheckListItemContentVersionInsertPort";
                    Tracker.FireEvent(__eventLocations[5],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestContentVersionRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionRequestMsg);
                    __ctx1__.__RestContentVersionRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 14;
            case 14:
                if (!RestCheckListItemContentVersionInsertPort.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[0]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper0 != null)
                {
                    __ctx0__.__subWrapper0.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper0 = null;
                }
                if (__ctx1__.__RestContentVersionResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionResponseMsg);
                __ctx1__.__RestContentVersionResponseMsg = new RestContentVersionResponseType("RestContentVersionResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestContentVersionResponseMsg);
                RestCheckListItemContentVersionInsertPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestContentVersionResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (RestCheckListItemContentVersionInsertPort != null)
                {
                    RestCheckListItemContentVersionInsertPort.Close(__ctx1__, __seg__);
                    RestCheckListItemContentVersionInsertPort = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionResponseMsg);
                    __edata.PortName = @"RestCheckListItemContentVersionInsertPort";
                    Tracker.FireEvent(__eventLocations[7],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if ( !PreProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 17;
            case 17:
                __ctx1__.__RestCliContentVersionMessage = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestContentVersionResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='errors' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='message' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __ctx1__.__RestCliContentVersionSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestContentVersionResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__RestCliContentVersionMessage) && (__ctx1__.__RestCliContentVersionSFID.Length == 0);
                if (__ctx1__ != null)
                    __ctx1__.__RestCliContentVersionSFID = null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 29;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                __ctx1__.__RestCliException = new System.Exception("DLAP Document Upload Checklist Item Content Version Rest Exception Occurred- " + __ctx1__.__RestCliContentVersionMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                if ( !PreProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[8],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 26;
            case 26:
                throw __ctx1__.__RestCliException;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[9],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                RequestTerminate(__ctx1__,"DLAP Document Upload Rest Exception Occurred");
                __seg__.SegmentDone();
                break;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__RestCliException = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestCliContentVersionMessage = null;
                Tracker.FireEvent(__eventLocations[15],__eventData[10],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                {
                    DocumentUploadResponseType __ActualDocumentUploadResponse = new DocumentUploadResponseType("ActualDocumentUploadResponse", __ctx1__);

                    ApplyTransform(typeof(DLAPDocumentUploadLogic.MakeCheckLIstItemDocumentUpdateUploadResponse), new object[] {__ActualDocumentUploadResponse.MessagePart}, new object[] {__ctx1__.__RestContentVersionResponseMsg.MessagePart});

                    if (__ctx1__.__ActualDocumentUploadResponse != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ActualDocumentUploadResponse);
                    __ctx1__.__ActualDocumentUploadResponse = __ActualDocumentUploadResponse;
                    __ctx1__.RefMessage(__ctx1__.__ActualDocumentUploadResponse);
                }
                __ctx1__.__ActualDocumentUploadResponse.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 32:
                if ( !PreProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ActualDocumentUploadResponse);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionResponseMsg);
                    Tracker.FireEvent(__eventLocations[17],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestContentVersionResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionResponseMsg);
                    __ctx1__.__RestContentVersionResponseMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 33;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                __ctx1__.__Flag = true;
                if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 35;
            case 35:
                if ( !PreProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[19],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 36;
            case 36:
                __ctx1__.__CheckListResponseStatus = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__ActualDocumentUploadResponse.MessagePart, "string(/*[local-name()='DOCUMENTRESPONSE' and namespace-uri()='http://DocumentUploadDefinition.DocumentUpload']/*[local-name()='Upload_Status' and namespace-uri()=''])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 37;
            case 37:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body);
                    __edata.Messages.Add(__ctx1__.__ActualDocumentUploadResponse);
                    __edata.Messages.Add(__ctx1__.__ActualDocumentUploadRequest);
                    Tracker.FireEvent(__eventLocations[0],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__ActualDocumentUploadRequest != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ActualDocumentUploadRequest);
                    __ctx1__.__ActualDocumentUploadRequest = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 38:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 39;
            case 39:
                if ( !PreProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 40;
            case 40:
                Args[2] = __ctx1__.__Flag;
                Args[3] = __ctx1__.__CheckListResponseStatus;
                ((Microsoft.XLANGs.Core.MessageTuple)(Args[0])).message = __ctx1__.__ActualDocumentUploadResponse;
                ((Microsoft.XLANGs.Core.MessageTuple)(Args[0])).context.RefMessage(__ctx1__.__ActualDocumentUploadResponse);
                if ( !PostProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 41;
            case 41:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
        private static Microsoft.XLANGs.Core.CachedObject[] _locations = new Microsoft.XLANGs.Core.CachedObject[] {
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{324EC32A-9CCD-4065-B738-C34A29F3C04E}"))
        };

    }
    //#line 982 "C:\Users\skyeniga\Source\Repos\Biztalk\DLAP Document Upload\DLAP Document Upload Logic\Documents Processing Logic.odx"
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses,
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(DLAPDocument.RestContentVersionInsertPortType),
            typeof(DLAPDocument.RestContentVersionDocumentIdQueryPortType),
            typeof(DLAPDocument.RestContentDocumentlinkInsertPortType)
        },
        new System.String[] {
            "RestContentVersionInsertPort",
            "RestContentVersionDocumentIdQueryPort",
            "RestContentDocumentlinkInsertPort"
        },
        new System.Type[] {
            null,
            null,
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eCallable
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class UploadChildLogic : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = false;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eHasRequestResponse
,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy(
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String ApplicationSFID,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String RECEIPTDOCUMENT_ID,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String DocCheckListItemSFID,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] out System.String ContentDocumentlinkSFID,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] out System.String ResponseStatus,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] out System.Boolean Flag,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eMessage, "") ] out DLAPDocument.DocumentUploadResponseType ActualDocumentUploadResponse,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eMessage, "") ] DLAPDocument.DocumentUploadRequestType ActualDocumentUploadRequest,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.Boolean CheckListItemFlag,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] out System.String CheckListResponseStatus)
        {
            ContentDocumentlinkSFID = default(System.String);
            ResponseStatus = default(System.String);
            Flag = default(System.Boolean);
            ActualDocumentUploadResponse = default(DLAPDocument.DocumentUploadResponseType);
            CheckListResponseStatus = default(System.String);
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(UploadChildLogic));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return false; } }

        internal bool IsExeced = false;

        static UploadChildLogic()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1)
            };

            _Locks = 0;
            _rootContext = new __UploadChildLogic_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[2];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public UploadChildLogic(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "UploadChildLogic", tracker)
        {
            ConstructorHelper();
        }

        public UploadChildLogic(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "UploadChildLogic")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>94f062a0-e4ed-48e5-9f0f-841984d7773c</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>d108f241-1f9e-4987-9996-a08f2b143d64</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>ApplicationSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>7898a11e-b6c9-49f0-aa2a-b6ad7e2d1576</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>RECEIPTDOCUMENT_ID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>413ae0de-0335-47f8-8684-979e70957c4f</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>DocCheckListItemSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>5824f3d0-6dc9-45c0-94e1-500506d0a5d7</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>ContentDocumentlinkSFID</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>9753de4d-148d-41f5-8e6c-996f7099d584</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>ResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>437d2057-0efb-42c7-81de-cb001b14609c</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>3f9e7edf-2d9b-452a-b9ba-d6072b4bb9ca</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>ActualDocumentUploadResponse</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageDeclarationShape</shapeType>      <ShapeID>4e8417e8-ccdb-47b9-b069-662e0674a8b6</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>ActualDocumentUploadRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>3e6d89da-bf3c-41cb-8e7f-6ad09daf6e6f</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>CheckListItemFlag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>f2f78181-5126-415c-81e5-4b9e6a6b1860</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>CheckListResponseStatus</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TaskShape</shapeType>      <ShapeID>30e97066-156b-4024-a098-9dc8257d4cad</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>DLAP Document Upload Processing</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>56452ac1-085f-477d-a32a-4c941c798e8a</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Content Version Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>b2b191bc-8c35-4d8c-b309-4c1afd9af9b1</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>2fac2956-d092-409d-922e-2be78a37ff79</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Content Version Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>c2457c76-7a22-4987-8d91-8938253e3631</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_2</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>77c733ff-5065-4dbf-886f-eeaa9ff281de</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_1</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>d9d3e49d-6764-47dd-a613-6d30fcee6466</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Content Version Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>3ac19178-5637-4ba3-9087-bfe79efb1e97</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Content Version Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>c647a4b5-e5dd-4374-be2c-2b7b8e300c9f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Extract Rest Response Values</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>554d96a4-88f3-4a81-a166-16f84f272876</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Valid Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>2c483500-a3fc-4733-9487-93066636177a</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>8969165b-c22c-4e21-82d6-93f707582f14</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ThrowShape</shapeType>      <ShapeID>75c0e9e1-16aa-4357-8ece-a4638ae05f1d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Error </shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>f235a667-81a0-41b4-ab26-8a7174b0d33e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>3e687b0c-c968-4339-a1fe-e95e1b479b32</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>4f5220b4-0441-4d4e-942c-1c1177c9ea30</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Content Version DocumentId Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>05732519-e068-4913-83e8-68320dc3bf66</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>9f191379-2a2b-4f6e-bdd7-f89352a3dac3</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Content Version DocumentId Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>52e65d0a-e74a-4148-8abf-df0ec9f8d12e</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_5</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>5b725554-da1a-400c-9ea7-57e165f063a4</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_6</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>2d566223-cace-43f8-afd7-e28642022cbe</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make SOQL</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>5b592078-251c-404c-89a3-fab968492913</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Content Version DocumentId Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>06f44513-aebf-4db1-9d77-7579e670d5c5</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Content Version DocumentId Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>14c92355-76c3-4cf3-bb3a-48baae82c828</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Document Link Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>97e8ff82-86f3-4c30-9e50-c6158ea0a51c</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Temp ConentLink Values</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>bbcf482a-13c6-4a8d-b05c-f517c7050b8c</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_4</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>b94c4ce6-38cc-485a-95de-14429b5fa133</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_3</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>08881154-3f7d-48d6-a76b-20c7b1c1026f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Injecting Data Into Temp ContentLinkRequest</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>905dc99f-838e-4407-a5b8-ff45dcbd5821</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Document Link Request</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>bf530e82-d4fe-4421-a60e-c091a3a787ff</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_8</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>455d475e-5455-4026-9dc8-e4966a960448</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_7</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>4a92a17a-d59c-491c-a0b8-6e4728006a11</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>ad99d186-d6d3-4d7c-9647-b200186d5cdf</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>ce076642-7fcc-4aae-96ff-ef5da23f3bba</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Send Document Link Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>f456982f-7f3e-4c2a-b1d9-9a21e45498cd</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Receive Document Link Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>ee4f3b36-d67b-493a-b542-c684d8770d2d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Extract Rest Response Values</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>da68ad36-ff62-4c9d-8c6d-a7e14256a3cc</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Valid Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>fb9404cc-ebdb-432c-b542-a858ac287756</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>4916d6dc-f424-42a6-af91-5cf5065fa698</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ThrowShape</shapeType>      <ShapeID>b1f5ff79-6f6c-4599-9a37-02485e1adc05</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Error </shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>TerminateShape</shapeType>      <ShapeID>f0a37590-08b6-4355-bef6-f48e37ffab2e</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Terminate</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>13446516-cee7-4e9f-b0ee-6456634fee95</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>e79b8255-81ec-41ea-9e32-292341e1ded4</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Construct Document Upload Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>TransformShape</shapeType>      <ShapeID>3e042f56-05eb-492b-ba43-329e4d1a1247</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Document Upload Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>c499a615-dcb8-4ee2-afa6-4c1642849c8e</ShapeID>      <ParentLink>Transform_OutputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_10</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessagePartRefShape</shapeType>      <ShapeID>785e1f08-2857-4474-af06-07b4d4042101</ShapeID>      <ParentLink>Transform_InputMessagePartRef</ParentLink>                <shapeText>MessagePartReference_9</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>b3a6f550-6cd4-44d3-818d-13ab0c97bc4e</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>cbe4b196-3759-4e19-9d26-8de53900bf9f</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Flag</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'UploadChildLogic'</ActionName><IsAtomic>0</IsAtomic><Line>982</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
<Messages>
	<MsgInfo><name>ActualDocumentUploadResponse</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>ActualDocumentUploadRequest</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1027</Line><Position>13</Position><ShapeID>'56452ac1-085f-477d-a32a-4c941c798e8a'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion+SaveRequest</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>ActualDocumentUploadRequest</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENT</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1033</Line><Position>13</Position><ShapeID>'d9d3e49d-6764-47dd-a613-6d30fcee6466'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion+SaveRequest</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1035</Line><Position>13</Position><ShapeID>'3ac19178-5637-4ba3-9087-bfe79efb1e97'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion+results</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1037</Line><Position>47</Position><ShapeID>'c647a4b5-e5dd-4374-be2c-2b7b8e300c9f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1041</Line><Position>13</Position><ShapeID>'554d96a4-88f3-4a81-a166-16f84f272876'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1044</Line><Position>49</Position><ShapeID>'8969165b-c22c-4e21-82d6-93f707582f14'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1046</Line><Position>17</Position><ShapeID>'75c0e9e1-16aa-4357-8ece-a4638ae05f1d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1048</Line><Position>17</Position><ShapeID>'f235a667-81a0-41b4-ab26-8a7174b0d33e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1051</Line><Position>13</Position><ShapeID>'4f5220b4-0441-4d4e-942c-1c1177c9ea30'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionQueryRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery+Request</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>RestContentVersionRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion+SaveRequest</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1065</Line><Position>13</Position><ShapeID>'5b592078-251c-404c-89a3-fab968492913'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionQueryRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery+Request</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1067</Line><Position>13</Position><ShapeID>'06f44513-aebf-4db1-9d77-7579e670d5c5'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentVersionQueryResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery+QueryResult</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1069</Line><Position>13</Position><ShapeID>'14c92355-76c3-4cf3-bb3a-48baae82c828'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentDocumentLinkRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink+SaveRequest</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>ContentLinkRequestInfoMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.ContentLinkRequestInfo</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>RestContentVersionQueryResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery+QueryResult</schema><direction>In</direction></MsgInfo>
	<MsgInfo><name>ContentLinkRequestInfoMsg</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.ContentLinkRequestInfo</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1090</Line><Position>13</Position><ShapeID>'ce076642-7fcc-4aae-96ff-ef5da23f3bba'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentDocumentLinkRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink+SaveRequest</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1092</Line><Position>13</Position><ShapeID>'f456982f-7f3e-4c2a-b1d9-9a21e45498cd'</ShapeID>
<Messages>
	<MsgInfo><name>RestContentDocumentLinkResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink+results</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1094</Line><Position>44</Position><ShapeID>'ee4f3b36-d67b-493a-b542-c684d8770d2d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1098</Line><Position>13</Position><ShapeID>'da68ad36-ff62-4c9d-8c6d-a7e14256a3cc'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1101</Line><Position>49</Position><ShapeID>'4916d6dc-f424-42a6-af91-5cf5065fa698'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1103</Line><Position>17</Position><ShapeID>'b1f5ff79-6f6c-4599-9a37-02485e1adc05'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1105</Line><Position>17</Position><ShapeID>'f0a37590-08b6-4355-bef6-f48e37ffab2e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1108</Line><Position>13</Position><ShapeID>'e79b8255-81ec-41ea-9e32-292341e1ded4'</ShapeID>
<Messages>
	<MsgInfo><name>ActualDocumentUploadResponse</name><part>MessagePart</part><schema>SBA.DLAPDocumentUpload.Definition.DocumentUpload+DOCUMENTRESPONSE</schema><direction>Out</direction></MsgInfo>
	<MsgInfo><name>RestContentDocumentLinkResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink+results</schema><direction>In</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>1114</Line><Position>18</Position><ShapeID>'cbe4b196-3759-4e19-9d26-8de53900bf9f'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='cf153439-732a-4443-86ec-d9a86f132b95' LowerBound='1.1' HigherBound='233.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='DLAPDocument' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='PortType' OID='cb33b8a1-1dee-4860-bb58-6a98bf6bbaf7' ParentLink='Module_PortType' LowerBound='60.1' HigherBound='67.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentVersionInsertPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='9d2d134c-7856-45ee-82fa-68d11cc3572a' ParentLink='PortType_OperationDeclaration' LowerBound='62.1' HigherBound='66.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='c1d6f2b5-711a-4379-83ff-3e9adbe59681' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='64.44' HigherBound='64.74'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestContentVersionResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='ecd9fe2f-f544-40d1-a45b-c6e53da0f3e1' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='64.13' HigherBound='64.42'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestContentVersionRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='fd337e7d-fc37-43eb-bbd1-e946e7de42d2' ParentLink='Module_PortType' LowerBound='67.1' HigherBound='74.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentVersionDocumentIdQueryPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='d2fa4593-48cb-4f98-9301-c74a8ff03f60' ParentLink='PortType_OperationDeclaration' LowerBound='69.1' HigherBound='73.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='f1773254-f52b-478b-9091-3e1091dd9322' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='71.13' HigherBound='71.47'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestContentVersionQueryRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='643f92d8-65ee-452f-a705-1a1e2d129606' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='71.49' HigherBound='71.84'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestContentVersionQueryResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='PortType' OID='bfd6117a-2858-4cc3-b585-1ca9d3e643f4' ParentLink='Module_PortType' LowerBound='74.1' HigherBound='81.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentDocumentlinkInsertPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='d78bda1d-4ee1-49c0-8646-cc8e0c888bee' ParentLink='PortType_OperationDeclaration' LowerBound='76.1' HigherBound='80.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='f1d62e68-cec5-4485-895f-32e329177f68' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='78.13' HigherBound='78.47'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestContentDocumentLinkRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageRef' OID='02c71d31-b270-4d50-8a65-4b7ac72e1811' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='78.49' HigherBound='78.84'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestContentDocumentLinkResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='e4dceab4-84e8-4f0f-b758-5a47a5ca35a3' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentVersionQueryResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='179981da-d188-4c51-ba3f-8aa9cd25a293' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery.QueryResult' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='1b51888f-94f0-437e-9c3e-d53784726c30' ParentLink='Module_MessageType' LowerBound='8.1' HigherBound='12.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceInsertContentVersionRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='32ecd004-31f9-4894-a095-4859e22555b0' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='10.1' HigherBound='11.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.SalesForceDefinition.Salesforce_ContentVersion.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='0a7ab2f6-0b32-45d4-9d95-35c3ae7ef5e9' ParentLink='Module_MessageType' LowerBound='12.1' HigherBound='16.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceInsertContentVersionResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='32369fe1-c397-4138-8684-3a811b0aba8c' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='14.1' HigherBound='15.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.SalesForceDefinition.Salesforce_ContentVersion.Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='54308f8b-24bb-4d7f-a0d2-67a868f252c8' ParentLink='Module_MessageType' LowerBound='16.1' HigherBound='20.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryContentVersionDocumentIdRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='f2685230-564b-4c59-b808-9368efee9df5' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='18.1' HigherBound='19.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_ContentVersionDocumentId.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='aa504025-ae41-4a02-aa58-93f9e0c26e10' ParentLink='Module_MessageType' LowerBound='20.1' HigherBound='24.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceQueryContentVersionDocumentIdResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='f760f0bb-1370-419a-93e3-348c8e4351f2' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='22.1' HigherBound='23.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceQuery_ContentVersionDocumentId.Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='a3e8ee67-6813-4b2c-b8b8-127c3046be0e' ParentLink='Module_MessageType' LowerBound='24.1' HigherBound='28.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceInsertContentDocumentlinkRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='566cb9e5-97b6-4df9-9df0-1475110b38d3' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='26.1' HigherBound='27.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceInsert_ContentDocumentlink.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='0c7c94e1-a363-482d-9d65-94f4c62933fb' ParentLink='Module_MessageType' LowerBound='28.1' HigherBound='32.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='SalesforceInsertContentDocumentlinkResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='07b5138c-3440-4b1c-a684-afd55a8431d1' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='30.1' HigherBound='31.1'>
                <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.SalesForceDefinition.SalesforceInsert_ContentDocumentlink.Response' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='2dec5bcb-2693-458d-a3ef-f8ac3b0a4887' ParentLink='Module_MessageType' LowerBound='32.1' HigherBound='36.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentVersionRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='808cee5b-93cf-4dbd-abdb-fbe23208950e' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='34.1' HigherBound='35.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion.SaveRequest' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='a671e04a-3312-4098-a736-74fa910ae87b' ParentLink='Module_MessageType' LowerBound='36.1' HigherBound='40.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentVersionResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='2300bef9-a80b-48dc-9597-cb27d993e37e' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='38.1' HigherBound='39.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersion.results' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='adc594f2-7a42-4ae6-8549-09f2a3afc895' ParentLink='Module_MessageType' LowerBound='40.1' HigherBound='44.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentDocumentLinkRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='c320f0e7-612e-4a90-9371-24881c7feb90' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='42.1' HigherBound='43.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink.SaveRequest' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='47c0e396-e641-4fa5-a99c-19e454e79dc3' ParentLink='Module_MessageType' LowerBound='44.1' HigherBound='48.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentDocumentLinkResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='5ee2a4d6-6d8c-410d-a02e-ea1522ab3cbc' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='46.1' HigherBound='47.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestContentDocumentLink.results' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='7f4c9af1-792c-4636-828f-118904fac6de' ParentLink='Module_MessageType' LowerBound='48.1' HigherBound='52.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestChecklistItemRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='2b835460-7c68-42b0-94a0-3fb5774dbbe1' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='50.1' HigherBound='51.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.SaveRequest' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='f86bf63c-a73e-465c-8940-e945be3496f5' ParentLink='Module_MessageType' LowerBound='52.1' HigherBound='56.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestChecklistItemResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='4be2e7b9-5e3c-4509-ba54-0fbcd90966f3' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='54.1' HigherBound='55.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestChecklistItem.results' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='0e9d7ef2-e7b2-478c-b690-23df2abefc09' ParentLink='Module_MessageType' LowerBound='56.1' HigherBound='60.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestContentVersionQueryRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='ed075586-e4a2-4add-8a7f-55c8eedc5650' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='58.1' HigherBound='59.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestContentVersionQuery.Request' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='ServiceDeclaration' OID='efa378f0-d9c5-4c9c-ba91-d7e960402f9d' ParentLink='Module_ServiceDeclaration' LowerBound='81.1' HigherBound='232.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='UploadChildLogic' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='12a294e2-2ec9-421e-a219-6a52d49b6edd' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='106.1' HigherBound='107.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='CONTENTVERSION_DOCUMENTID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='a479ecea-7f22-4963-8e9c-300377d55a62' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='107.1' HigherBound='108.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Exception' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestDLAPDocumentUploadException' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='720cba8f-dd08-4dcb-a35c-2d0fd93df5d9' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='108.1' HigherBound='109.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionResponseMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='f026fc9a-0bc4-4aa6-a010-0604df6a6bf4' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='109.1' HigherBound='110.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='91ba658b-d009-4da0-9333-b3d077f8f109' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='110.1' HigherBound='111.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SOQL_ContentVersion_QUERY' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='55b1615a-83f4-444b-8acf-965256ce2ccf' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='111.1' HigherBound='112.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentResponseMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='98acf65b-a98c-4608-852f-fae9a867d010' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='112.1' HigherBound='113.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='a8c8315b-fc87-4f80-b984-51e427fc2f51' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='113.1' HigherBound='114.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentLinkResponseMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='5aad69f1-76da-4f4d-b6ed-46087332e1df' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='114.1' HigherBound='115.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentLinkSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='9e6eed41-8b93-4092-adf0-0ca0e16c34f2' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='90.1' HigherBound='91.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentVersionRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentVersionRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='91d263c8-851c-4b70-ba57-29aeeff54fdb' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='91.1' HigherBound='92.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentVersionResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentVersionResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='c90e261c-7c4b-4705-9b89-c5be59acfbd5' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='92.1' HigherBound='93.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryContentVersionDocumentIdRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryContentVersionDocumentIdRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='de6da6c8-2903-4c3d-8518-9a20b90f4287' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='93.1' HigherBound='94.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryContentVersionDocumentIdResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryContentVersionDocumentIdResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='4f8ed56c-29ba-45e0-976b-0c6c2c899730' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='94.1' HigherBound='95.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentDocumentlinkRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentDocumentlinkRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='120538d7-f8da-447f-a5d9-52b9fe783b8b' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='95.1' HigherBound='96.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceInsertContentDocumentlinkResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceInsertContentDocumentlinkResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='fc44253a-8c5d-4742-a65f-cb9276c730d7' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='96.1' HigherBound='97.1'>
                <om:Property Name='Type' Value='DLAPDocument.ContentLinkRequestInfoType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='ContentLinkRequestInfoMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='f2b0b0bf-cb0f-4d33-9be6-01cc0fdb0f11' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='97.1' HigherBound='98.1'>
                <om:Property Name='Type' Value='DLAPDocument.SalesforceQueryApplicationIdResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='SalesforceQueryApplicationIdResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='a2b01e76-0ec4-42f8-b129-6509ec22ae0c' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='98.1' HigherBound='99.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestContentVersionRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='f328097c-4de6-4d9f-a571-2f930c165f56' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='99.1' HigherBound='100.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestContentVersionResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='13935d87-d2af-45c0-99c2-061858585e2e' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='100.1' HigherBound='101.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestContentDocumentLinkRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentDocumentLinkRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='4bec27a7-9552-465a-834e-f9c525b74afd' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='101.1' HigherBound='102.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestContentDocumentLinkResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentDocumentLinkResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='351db0c8-d66b-46c7-8746-12f0f70da33a' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='102.1' HigherBound='103.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestChecklistItemRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestChecklistItemRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='7c591e5b-8e91-47d6-aabc-9835d1cda2b6' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='103.1' HigherBound='104.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestChecklistItemResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestChecklistItemResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='2fe0bd0a-0a7f-4ea8-b9be-f7fcc0db58b5' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='104.1' HigherBound='105.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestContentVersionQueryRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionQueryRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='e4771324-75f3-40ec-a10b-92e9673e5a31' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='105.1' HigherBound='106.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestContentVersionQueryResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionQueryResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='94f062a0-e4ed-48e5-9f0f-841984d7773c' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='VariableDeclaration' OID='d108f241-1f9e-4987-9996-a08f2b143d64' ParentLink='ServiceBody_Declaration' LowerBound='115.15' HigherBound='115.44'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ApplicationSFID' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='7898a11e-b6c9-49f0-aa2a-b6ad7e2d1576' ParentLink='ServiceBody_Declaration' LowerBound='115.46' HigherBound='115.78'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='RECEIPTDOCUMENT_ID' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='413ae0de-0335-47f8-8684-979e70957c4f' ParentLink='ServiceBody_Declaration' LowerBound='115.80' HigherBound='115.114'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='DocCheckListItemSFID' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='5824f3d0-6dc9-45c0-94e1-500506d0a5d7' ParentLink='ServiceBody_Declaration' LowerBound='115.116' HigherBound='115.157'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='Out' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ContentDocumentlinkSFID' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='9753de4d-148d-41f5-8e6c-996f7099d584' ParentLink='ServiceBody_Declaration' LowerBound='115.159' HigherBound='115.191'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='Out' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ResponseStatus' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='437d2057-0efb-42c7-81de-cb001b14609c' ParentLink='ServiceBody_Declaration' LowerBound='115.193' HigherBound='115.216'>
                    <om:Property Name='InitialValue' Value='true' />
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.Boolean' />
                    <om:Property Name='ParamDirection' Value='Out' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Flag' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageDeclaration' OID='3f9e7edf-2d9b-452a-b9ba-d6072b4bb9ca' ParentLink='ServiceBody_Declaration' LowerBound='115.218' HigherBound='115.285'>
                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadResponseType' />
                    <om:Property Name='ParamDirection' Value='Out' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ActualDocumentUploadResponse' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='MessageDeclaration' OID='4e8417e8-ccdb-47b9-b069-662e0674a8b6' ParentLink='ServiceBody_Declaration' LowerBound='115.287' HigherBound='115.348'>
                    <om:Property Name='Type' Value='DLAPDocument.DocumentUploadRequestType' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='ActualDocumentUploadRequest' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='3e6d89da-bf3c-41cb-8e7f-6ad09daf6e6f' ParentLink='ServiceBody_Declaration' LowerBound='115.350' HigherBound='115.382'>
                    <om:Property Name='InitialValue' Value='true' />
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.Boolean' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='CheckListItemFlag' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='f2f78181-5126-415c-81e5-4b9e6a6b1860' ParentLink='ServiceBody_Declaration' LowerBound='115.384' HigherBound='115.425'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='Out' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='CheckListResponseStatus' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Task' OID='30e97066-156b-4024-a098-9dc8257d4cad' ParentLink='ServiceBody_Statement' LowerBound='126.1' HigherBound='230.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='DLAP Document Upload Processing' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='Construct' OID='56452ac1-085f-477d-a32a-4c941c798e8a' ParentLink='ComplexStatement_Statement' LowerBound='126.1' HigherBound='132.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Construct Content Version Request' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='MessageRef' OID='b2b191bc-8c35-4d8c-b309-4c1afd9af9b1' ParentLink='Construct_MessageRef' LowerBound='127.23' HigherBound='127.51'>
                            <om:Property Name='Ref' Value='RestContentVersionRequestMsg' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Transform' OID='2fac2956-d092-409d-922e-2be78a37ff79' ParentLink='ComplexStatement_Statement' LowerBound='129.1' HigherBound='131.1'>
                            <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.Logic.MakeContentVersionRequest' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Make Content Version Request' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessagePartRef' OID='c2457c76-7a22-4987-8d91-8938253e3631' ParentLink='Transform_OutputMessagePartRef' LowerBound='130.28' HigherBound='130.68'>
                                <om:Property Name='MessageRef' Value='RestContentVersionRequestMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_2' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessagePartRef' OID='77c733ff-5065-4dbf-886f-eeaa9ff281de' ParentLink='Transform_InputMessagePartRef' LowerBound='130.128' HigherBound='130.167'>
                                <om:Property Name='MessageRef' Value='ActualDocumentUploadRequest' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_1' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Send' OID='d9d3e49d-6764-47dd-a613-6d30fcee6466' ParentLink='ComplexStatement_Statement' LowerBound='132.1' HigherBound='134.1'>
                        <om:Property Name='PortName' Value='RestContentVersionInsertPort' />
                        <om:Property Name='MessageName' Value='RestContentVersionRequestMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Request' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Send Content Version Request' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Receive' OID='3ac19178-5637-4ba3-9087-bfe79efb1e97' ParentLink='ComplexStatement_Statement' LowerBound='134.1' HigherBound='136.1'>
                        <om:Property Name='Activate' Value='False' />
                        <om:Property Name='PortName' Value='RestContentVersionInsertPort' />
                        <om:Property Name='MessageName' Value='RestContentVersionResponseMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Response' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Receive Content Version Response' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='c647a4b5-e5dd-4374-be2c-2b7b8e300c9f' ParentLink='ComplexStatement_Statement' LowerBound='136.1' HigherBound='140.1'>
                        <om:Property Name='Expression' Value='RestContentVersionResponseMessage = xpath(RestContentVersionResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;errors&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;message&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;RestContentVersionSFID = xpath(RestContentVersionResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;]/*[local-name()=&apos;id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion&apos;])&quot;);' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Extract Rest Response Values' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Decision' OID='554d96a4-88f3-4a81-a166-16f84f272876' ParentLink='ComplexStatement_Statement' LowerBound='140.1' HigherBound='150.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Valid Response' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='2c483500-a3fc-4733-9487-93066636177a' ParentLink='ReallyComplexStatement_Branch' LowerBound='141.13' HigherBound='150.1'>
                            <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(RestContentVersionResponseMessage) &amp;&amp; (RestContentVersionSFID.Length == 0)' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Error' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='8969165b-c22c-4e21-82d6-93f707582f14' ParentLink='ComplexStatement_Statement' LowerBound='143.1' HigherBound='145.1'>
                                <om:Property Name='Expression' Value='RestDLAPDocumentUploadException = new System.Exception(&quot;DLAP Document Upload Rest Exception Occurred- &quot;+RestContentVersionResponseMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Rest Exception' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='Throw' OID='75c0e9e1-16aa-4357-8ece-a4638ae05f1d' ParentLink='ComplexStatement_Statement' LowerBound='145.1' HigherBound='147.1'>
                                <om:Property Name='ThrownReference' Value='RestDLAPDocumentUploadException' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Rest Error ' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Terminate' OID='f235a667-81a0-41b4-ab26-8a7174b0d33e' ParentLink='ComplexStatement_Statement' LowerBound='147.1' HigherBound='149.1'>
                                <om:Property Name='ErrorMessage' Value='&quot;DLAP Document Upload Rest Exception Occurred&quot;;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Terminate' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='3e687b0c-c968-4339-a1fe-e95e1b479b32' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Construct' OID='4f5220b4-0441-4d4e-942c-1c1177c9ea30' ParentLink='ComplexStatement_Statement' LowerBound='150.1' HigherBound='164.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Construct Content Version DocumentId Request' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='MessageRef' OID='05732519-e068-4913-83e8-68320dc3bf66' ParentLink='Construct_MessageRef' LowerBound='151.23' HigherBound='151.56'>
                            <om:Property Name='Ref' Value='RestContentVersionQueryRequestMsg' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Transform' OID='9f191379-2a2b-4f6e-bdd7-f89352a3dac3' ParentLink='ComplexStatement_Statement' LowerBound='153.1' HigherBound='155.1'>
                            <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.Logic.MakeContentVersionDocumentIdRequest' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Make Content Version DocumentId Request' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessagePartRef' OID='52e65d0a-e74a-4148-8abf-df0ec9f8d12e' ParentLink='Transform_InputMessagePartRef' LowerBound='154.143' HigherBound='154.183'>
                                <om:Property Name='MessageRef' Value='RestContentVersionRequestMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_5' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessagePartRef' OID='5b725554-da1a-400c-9ea7-57e165f063a4' ParentLink='Transform_OutputMessagePartRef' LowerBound='154.28' HigherBound='154.73'>
                                <om:Property Name='MessageRef' Value='RestContentVersionQueryRequestMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_6' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='MessageAssignment' OID='2d566223-cace-43f8-afd7-e28642022cbe' ParentLink='ComplexStatement_Statement' LowerBound='155.1' HigherBound='163.1'>
                            <om:Property Name='Expression' Value='SOQL_ContentVersion_QUERY = @&quot;Select Id, ContentDocumentId from ContentVersion WHERE Id IN &quot;+&quot;(&quot;+&quot;&apos;&quot;+RestContentVersionSFID+&quot;&apos;&quot;+&quot;)&quot;;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;RestContentVersionQueryRequestMsg(DLAPDocumentUploadSalesForceDefinition.Rest.SOQL_ContentDocument_ID_Query) = SOQL_ContentVersion_QUERY; &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;' />
                            <om:Property Name='ReportToAnalyst' Value='False' />
                            <om:Property Name='Name' Value='Make SOQL' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Send' OID='5b592078-251c-404c-89a3-fab968492913' ParentLink='ComplexStatement_Statement' LowerBound='164.1' HigherBound='166.1'>
                        <om:Property Name='PortName' Value='RestContentVersionDocumentIdQueryPort' />
                        <om:Property Name='MessageName' Value='RestContentVersionQueryRequestMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Request' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Send Content Version DocumentId Request' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Receive' OID='06f44513-aebf-4db1-9d77-7579e670d5c5' ParentLink='ComplexStatement_Statement' LowerBound='166.1' HigherBound='168.1'>
                        <om:Property Name='Activate' Value='False' />
                        <om:Property Name='PortName' Value='RestContentVersionDocumentIdQueryPort' />
                        <om:Property Name='MessageName' Value='RestContentVersionQueryResponseMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Response' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Receive Content Version DocumentId Response' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Construct' OID='14c92355-76c3-4cf3-bb3a-48baae82c828' ParentLink='ComplexStatement_Statement' LowerBound='168.1' HigherBound='189.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Construct Document Link Request' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Transform' OID='97e8ff82-86f3-4c30-9e50-c6158ea0a51c' ParentLink='ComplexStatement_Statement' LowerBound='171.1' HigherBound='173.1'>
                            <om:Property Name='ClassName' Value='DLAPDocumentUploadLogic.MakeTempConentLinkValuesRequest' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Make Temp ConentLink Values' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='MessagePartRef' OID='bbcf482a-13c6-4a8d-b05c-f517c7050b8c' ParentLink='Transform_OutputMessagePartRef' LowerBound='172.28' HigherBound='172.65'>
                                <om:Property Name='MessageRef' Value='ContentLinkRequestInfoMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_4' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessagePartRef' OID='b94c4ce6-38cc-485a-95de-14429b5fa133' ParentLink='Transform_InputMessagePartRef' LowerBound='172.126' HigherBound='172.172'>
                                <om:Property Name='MessageRef' Value='RestContentVersionQueryResponseMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_3' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='MessageAssignment' OID='08881154-3f7d-48d6-a76b-20c7b1c1026f' ParentLink='ComplexStatement_Statement' LowerBound='173.1' HigherBound='186.1'>
                            <om:Property Name='Expression' Value='&#xD;&#xA;CONTENTVERSION_DOCUMENTID = xpath(RestContentVersionQueryResponseMsg.MessagePart,&quot;string(/*[local-name()=&apos;QueryResult&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/RestContentVersion&apos;]/*[local-name()=&apos;records&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/RestContentVersion&apos;]/*[local-name()=&apos;ContentDocumentId&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/QUERY/RestContentVersion&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;ContentLinkRequestInfoMsg.MessagePart.CONTENTVERSION_DOCUMENTID = CONTENTVERSION_DOCUMENTID;&#xD;&#xA;&#xD;&#xA;ContentLinkRequestInfoMsg.MessagePart.ACTION_ID = DocCheckListItemSFID;&#xD;&#xA;&#xD;&#xA;ContentLinkRequestInfoMsg.MessagePart.RECEIPTDOCUMENT_ID =RECEIPTDOCUMENT_ID;&#xD;&#xA;&#xD;&#xA;ContentLinkRequestInfoMsg.MessagePart.APPLICATIONSFID = ApplicationSFID;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;' />
                            <om:Property Name='ReportToAnalyst' Value='False' />
                            <om:Property Name='Name' Value='Injecting Data Into Temp ContentLinkRequest' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                        <om:Element Type='Transform' OID='905dc99f-838e-4407-a5b8-ff45dcbd5821' ParentLink='ComplexStatement_Statement' LowerBound='186.1' HigherBound='188.1'>
                            <om:Property Name='ClassName' Value='DLAPDocumentUploadLogic.MakeDocumentLinkRequest' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Make Document Link Request' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='MessagePartRef' OID='bf530e82-d4fe-4421-a60e-c091a3a787ff' ParentLink='Transform_OutputMessagePartRef' LowerBound='187.28' HigherBound='187.73'>
                                <om:Property Name='MessageRef' Value='RestContentDocumentLinkRequestMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_8' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessagePartRef' OID='455d475e-5455-4026-9dc8-e4966a960448' ParentLink='Transform_InputMessagePartRef' LowerBound='187.126' HigherBound='187.163'>
                                <om:Property Name='MessageRef' Value='ContentLinkRequestInfoMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_7' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='MessageRef' OID='4a92a17a-d59c-491c-a0b8-6e4728006a11' ParentLink='Construct_MessageRef' LowerBound='169.23' HigherBound='169.56'>
                            <om:Property Name='Ref' Value='RestContentDocumentLinkRequestMsg' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='MessageRef' OID='ad99d186-d6d3-4d7c-9647-b200186d5cdf' ParentLink='Construct_MessageRef' LowerBound='169.58' HigherBound='169.83'>
                            <om:Property Name='Ref' Value='ContentLinkRequestInfoMsg' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Send' OID='ce076642-7fcc-4aae-96ff-ef5da23f3bba' ParentLink='ComplexStatement_Statement' LowerBound='189.1' HigherBound='191.1'>
                        <om:Property Name='PortName' Value='RestContentDocumentlinkInsertPort' />
                        <om:Property Name='MessageName' Value='RestContentDocumentLinkRequestMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Request' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Send Document Link Request' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='Receive' OID='f456982f-7f3e-4c2a-b1d9-9a21e45498cd' ParentLink='ComplexStatement_Statement' LowerBound='191.1' HigherBound='193.1'>
                        <om:Property Name='Activate' Value='False' />
                        <om:Property Name='PortName' Value='RestContentDocumentlinkInsertPort' />
                        <om:Property Name='MessageName' Value='RestContentDocumentLinkResponseMsg' />
                        <om:Property Name='OperationName' Value='Operation' />
                        <om:Property Name='OperationMessageName' Value='Response' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Receive Document Link Response' />
                        <om:Property Name='Signal' Value='True' />
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='ee4f3b36-d67b-493a-b542-c684d8770d2d' ParentLink='ComplexStatement_Statement' LowerBound='193.1' HigherBound='197.1'>
                        <om:Property Name='Expression' Value='RestContentLinkResponseMessage = xpath(RestContentVersionResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink&apos;]/*[local-name()=&apos;errors&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink&apos;]/*[local-name()=&apos;message&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;RestContentLinkSFID = xpath(RestContentVersionResponseMsg.MessagePart, &quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink&apos;]/*[local-name()=&apos;id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink&apos;])&quot;);' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Extract Rest Response Values' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='Decision' OID='da68ad36-ff62-4c9d-8c6d-a7e14256a3cc' ParentLink='ComplexStatement_Statement' LowerBound='197.1' HigherBound='207.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Valid Response' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='DecisionBranch' OID='fb9404cc-ebdb-432c-b542-a858ac287756' ParentLink='ReallyComplexStatement_Branch' LowerBound='198.13' HigherBound='207.1'>
                            <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(RestContentLinkResponseMessage) &amp;&amp; (RestContentLinkSFID.Length == 0)' />
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Error' />
                            <om:Property Name='Signal' Value='True' />
                            <om:Element Type='VariableAssignment' OID='4916d6dc-f424-42a6-af91-5cf5065fa698' ParentLink='ComplexStatement_Statement' LowerBound='200.1' HigherBound='202.1'>
                                <om:Property Name='Expression' Value='RestDLAPDocumentUploadException = new System.Exception(&quot;DLAP Document Upload Rest Exception Occurred- &quot;+RestContentVersionResponseMessage);' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Rest Exception' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='Throw' OID='b1f5ff79-6f6c-4599-9a37-02485e1adc05' ParentLink='ComplexStatement_Statement' LowerBound='202.1' HigherBound='204.1'>
                                <om:Property Name='ThrownReference' Value='RestDLAPDocumentUploadException' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Rest Error ' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                            <om:Element Type='Terminate' OID='f0a37590-08b6-4355-bef6-f48e37ffab2e' ParentLink='ComplexStatement_Statement' LowerBound='204.1' HigherBound='206.1'>
                                <om:Property Name='ErrorMessage' Value='&quot;DLAP Document Upload Rest Exception Occurred&quot;;' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='Terminate' />
                                <om:Property Name='Signal' Value='True' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='DecisionBranch' OID='13446516-cee7-4e9f-b0ee-6456634fee95' ParentLink='ReallyComplexStatement_Branch'>
                            <om:Property Name='IsGhostBranch' Value='True' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Else' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='Construct' OID='e79b8255-81ec-41ea-9e32-292341e1ded4' ParentLink='ComplexStatement_Statement' LowerBound='207.1' HigherBound='213.1'>
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Construct Document Upload Response' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='Transform' OID='3e042f56-05eb-492b-ba43-329e4d1a1247' ParentLink='ComplexStatement_Statement' LowerBound='210.1' HigherBound='212.1'>
                            <om:Property Name='ClassName' Value='SBA.DLAPDocumentUpload.Logic.MakeDocumentUploadResponse' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Make Document Upload Response' />
                            <om:Property Name='Signal' Value='False' />
                            <om:Element Type='MessagePartRef' OID='c499a615-dcb8-4ee2-afa6-4c1642849c8e' ParentLink='Transform_OutputMessagePartRef' LowerBound='211.28' HigherBound='211.68'>
                                <om:Property Name='MessageRef' Value='ActualDocumentUploadResponse' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_10' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                            <om:Element Type='MessagePartRef' OID='785e1f08-2857-4474-af06-07b4d4042101' ParentLink='Transform_InputMessagePartRef' LowerBound='211.129' HigherBound='211.175'>
                                <om:Property Name='MessageRef' Value='RestContentDocumentLinkResponseMsg' />
                                <om:Property Name='PartRef' Value='MessagePart' />
                                <om:Property Name='ReportToAnalyst' Value='True' />
                                <om:Property Name='Name' Value='MessagePartReference_9' />
                                <om:Property Name='Signal' Value='False' />
                            </om:Element>
                        </om:Element>
                        <om:Element Type='MessageRef' OID='b3a6f550-6cd4-44d3-818d-13ab0c97bc4e' ParentLink='Construct_MessageRef' LowerBound='208.23' HigherBound='208.51'>
                            <om:Property Name='Ref' Value='ActualDocumentUploadResponse' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='VariableAssignment' OID='cbe4b196-3759-4e19-9d26-8de53900bf9f' ParentLink='ComplexStatement_Statement' LowerBound='213.1' HigherBound='230.1'>
                        <om:Property Name='Expression' Value='Flag = true;&#xD;&#xA;&#xD;&#xA;if(CheckListItemFlag != true)&#xD;&#xA;{&#xD;&#xA;ResponseStatus = xpath(ActualDocumentUploadResponse.MessagePart, &quot;string(/*[local-name()=&apos;DOCUMENTRESPONSE&apos; and namespace-uri()=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;]/*[local-name()=&apos;Upload_Status&apos; and namespace-uri()=&apos;&apos;])&quot;);&#xD;&#xA;CheckListResponseStatus = ResponseStatus;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;CheckListResponseStatus = xpath(ActualDocumentUploadResponse.MessagePart, &quot;string(/*[local-name()=&apos;DOCUMENTRESPONSE&apos; and namespace-uri()=&apos;http://DocumentUploadDefinition.DocumentUpload&apos;]/*[local-name()=&apos;Upload_Status&apos; and namespace-uri()=&apos;&apos;])&quot;);&#xD;&#xA;ResponseStatus =CheckListResponseStatus;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;ContentDocumentlinkSFID = RestContentLinkSFID;&#xD;&#xA;&#xD;&#xA;' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Flag' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='66ee43dd-012f-4d65-b33e-dafa24437cd5' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='84.1' HigherBound='86.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='15' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestContentVersionInsertPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionInsertPort' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='LogicalBindingAttribute' OID='85345ee1-2736-4497-886a-65d5bc62c2fa' ParentLink='PortDeclaration_CLRAttribute' LowerBound='84.1' HigherBound='85.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='4dc66240-4138-49c1-b7a6-38df9e4491af' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='86.1' HigherBound='88.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='89' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestContentDocumentlinkInsertPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentDocumentlinkInsertPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='1fa0ead7-b2c2-46b9-b773-414688987671' ParentLink='PortDeclaration_CLRAttribute' LowerBound='86.1' HigherBound='87.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='bbdd842b-4cf1-4846-ad2f-10d1c4921503' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='88.1' HigherBound='90.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='58' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestContentVersionDocumentIdQueryPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestContentVersionDocumentIdQueryPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='409efea0-71dd-4d08-a3d3-83510fadd982' ParentLink='PortDeclaration_CLRAttribute' LowerBound='88.1' HigherBound='89.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __UploadChildLogic_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __UploadChildLogic_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "UploadChildLogic")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadChildLogic __svc__ = (UploadChildLogic)_service;
                __UploadChildLogic_root_0 __ctx0__ = (__UploadChildLogic_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.RestContentVersionInsertPort != null)
                {
                    __svc__.RestContentVersionInsertPort.Close(this, null);
                    __svc__.RestContentVersionInsertPort = null;
                }
                if (__svc__.RestContentDocumentlinkInsertPort != null)
                {
                    __svc__.RestContentDocumentlinkInsertPort.Close(this, null);
                    __svc__.RestContentDocumentlinkInsertPort = null;
                }
                if (__svc__.RestContentVersionDocumentIdQueryPort != null)
                {
                    __svc__.RestContentVersionDocumentIdQueryPort.Close(this, null);
                    __svc__.RestContentVersionDocumentIdQueryPort = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper1;
            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper2;
        }


        [System.SerializableAttribute]
        public class __UploadChildLogic_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __UploadChildLogic_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "UploadChildLogic")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadChildLogic __svc__ = (UploadChildLogic)_service;
                __UploadChildLogic_1 __ctx1__ = (__UploadChildLogic_1)(__svc__._stateMgrs[1]);
                __UploadChildLogic_root_0 __ctx0__ = (__UploadChildLogic_root_0)(__svc__._stateMgrs[0]);

                if (__ctx1__ != null && __ctx1__.__RestContentVersionRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionRequestMsg);
                    __ctx1__.__RestContentVersionRequestMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__CONTENTVERSION_DOCUMENTID = null;
                if (__ctx1__ != null && __ctx1__.__RestContentDocumentLinkRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentDocumentLinkRequestMsg);
                    __ctx1__.__RestContentDocumentLinkRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestContentVersionResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionResponseMsg);
                    __ctx1__.__RestContentVersionResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__ContentLinkRequestInfoMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ContentLinkRequestInfoMsg);
                    __ctx1__.__ContentLinkRequestInfoMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__RestContentVersionResponseMessage = null;
                if (__ctx1__ != null && __ctx1__.__RestContentVersionQueryRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionQueryRequestMsg);
                    __ctx1__.__RestContentVersionQueryRequestMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestContentDocumentLinkResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentDocumentLinkResponseMsg);
                    __ctx1__.__RestContentDocumentLinkResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__RestContentVersionQueryResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionQueryResponseMsg);
                    __ctx1__.__RestContentVersionQueryResponseMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__RestDLAPDocumentUploadException = null;
                if (__ctx0__ != null && __ctx0__.__subWrapper0 != null)
                {
                    __ctx0__.__subWrapper0.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper0 = null;
                }
                if (__ctx0__ != null && __ctx0__.__subWrapper1 != null)
                {
                    __ctx0__.__subWrapper1.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper1 = null;
                }
                if (__ctx0__ != null && __ctx0__.__subWrapper2 != null)
                {
                    __ctx0__.__subWrapper2.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper2 = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__RestContentSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestContentLinkResponseMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestContentVersionSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestContentLinkSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__ApplicationSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RECEIPTDOCUMENT_ID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestContentResponseMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__DocCheckListItemSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__SOQL_ContentVersion_QUERY = null;
                if (__ctx1__ != null && __ctx1__.__ActualDocumentUploadRequest != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ActualDocumentUploadRequest);
                    __ctx1__.__ActualDocumentUploadRequest = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("ContentLinkRequestInfoMsg")]
            internal ContentLinkRequestInfoType __ContentLinkRequestInfoMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionRequestMsg")]
            internal RestContentVersionRequestType __RestContentVersionRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionResponseMsg")]
            internal RestContentVersionResponseType __RestContentVersionResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentDocumentLinkRequestMsg")]
            internal RestContentDocumentLinkRequestType __RestContentDocumentLinkRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentDocumentLinkResponseMsg")]
            internal RestContentDocumentLinkResponseType __RestContentDocumentLinkResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionQueryRequestMsg")]
            internal RestContentVersionQueryRequestType __RestContentVersionQueryRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionQueryResponseMsg")]
            internal RestContentVersionQueryResponseType __RestContentVersionQueryResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ActualDocumentUploadResponse")]
            internal DocumentUploadResponseType __ActualDocumentUploadResponse;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ActualDocumentUploadRequest")]
            internal DocumentUploadRequestType __ActualDocumentUploadRequest;
            [Microsoft.XLANGs.Core.UserVariableAttribute("CONTENTVERSION_DOCUMENTID")]
            internal System.String __CONTENTVERSION_DOCUMENTID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestDLAPDocumentUploadException")]
            internal System.Exception __RestDLAPDocumentUploadException;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionResponseMessage")]
            internal System.String __RestContentVersionResponseMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionSFID")]
            internal System.String __RestContentVersionSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SOQL_ContentVersion_QUERY")]
            internal System.String __SOQL_ContentVersion_QUERY;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentResponseMessage")]
            internal System.String __RestContentResponseMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentSFID")]
            internal System.String __RestContentSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentLinkResponseMessage")]
            internal System.String __RestContentLinkResponseMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentLinkSFID")]
            internal System.String __RestContentLinkSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ApplicationSFID")]
            internal System.String __ApplicationSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RECEIPTDOCUMENT_ID")]
            internal System.String __RECEIPTDOCUMENT_ID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("DocCheckListItemSFID")]
            internal System.String __DocCheckListItemSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ContentDocumentlinkSFID")]
            internal System.String __ContentDocumentlinkSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("ResponseStatus")]
            internal System.String __ResponseStatus;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Flag")]
            internal System.Boolean __Flag;
            [Microsoft.XLANGs.Core.UserVariableAttribute("CheckListItemFlag")]
            internal System.Boolean __CheckListItemFlag;
            [Microsoft.XLANGs.Core.UserVariableAttribute("CheckListResponseStatus")]
            internal System.String __CheckListResponseStatus;
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionInsertPort")]
        internal RestContentVersionInsertPortType RestContentVersionInsertPort;
        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentVersionDocumentIdQueryPort")]
        internal RestContentVersionDocumentIdQueryPortType RestContentVersionDocumentIdQueryPort;
        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestContentDocumentlinkInsertPort")]
        internal RestContentDocumentlinkInsertPortType RestContentDocumentlinkInsertPort;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestContentVersionInsertPortType.Operation},
                                               typeof(UploadChildLogic).GetField("RestContentVersionInsertPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadChildLogic), "RestContentVersionInsertPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestContentVersionDocumentIdQueryPortType.Operation},
                                               typeof(UploadChildLogic).GetField("RestContentVersionDocumentIdQueryPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadChildLogic), "RestContentVersionDocumentIdQueryPort"),
                                               null),
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestContentDocumentlinkInsertPortType.Operation},
                                               typeof(UploadChildLogic).GetField("RestContentDocumentlinkInsertPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadChildLogic), "RestContentDocumentlinkInsertPort"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                h[_portInfo[1].Name] = _portInfo[1];
                h[_portInfo[2].Name] = _portInfo[2];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }


        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "56452ac1-085f-477d-a32a-4c941c798e8a", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "56452ac1-085f-477d-a32a-4c941c798e8a", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "d9d3e49d-6764-47dd-a613-6d30fcee6466", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "d9d3e49d-6764-47dd-a613-6d30fcee6466", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "3ac19178-5637-4ba3-9087-bfe79efb1e97", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "3ac19178-5637-4ba3-9087-bfe79efb1e97", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "c647a4b5-e5dd-4374-be2c-2b7b8e300c9f", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "c647a4b5-e5dd-4374-be2c-2b7b8e300c9f", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "554d96a4-88f3-4a81-a166-16f84f272876", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "8969165b-c22c-4e21-82d6-93f707582f14", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "8969165b-c22c-4e21-82d6-93f707582f14", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "75c0e9e1-16aa-4357-8ece-a4638ae05f1d", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "f235a667-81a0-41b4-ab26-8a7174b0d33e", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(15, "554d96a4-88f3-4a81-a166-16f84f272876", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(16, "4f5220b4-0441-4d4e-942c-1c1177c9ea30", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(17, "4f5220b4-0441-4d4e-942c-1c1177c9ea30", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(18, "5b592078-251c-404c-89a3-fab968492913", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(19, "5b592078-251c-404c-89a3-fab968492913", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(20, "06f44513-aebf-4db1-9d77-7579e670d5c5", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(21, "06f44513-aebf-4db1-9d77-7579e670d5c5", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(22, "14c92355-76c3-4cf3-bb3a-48baae82c828", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(23, "14c92355-76c3-4cf3-bb3a-48baae82c828", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(24, "ce076642-7fcc-4aae-96ff-ef5da23f3bba", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(25, "ce076642-7fcc-4aae-96ff-ef5da23f3bba", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(26, "f456982f-7f3e-4c2a-b1d9-9a21e45498cd", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(27, "f456982f-7f3e-4c2a-b1d9-9a21e45498cd", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(28, "ee4f3b36-d67b-493a-b542-c684d8770d2d", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(29, "ee4f3b36-d67b-493a-b542-c684d8770d2d", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(30, "da68ad36-ff62-4c9d-8c6d-a7e14256a3cc", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(31, "4916d6dc-f424-42a6-af91-5cf5065fa698", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(32, "4916d6dc-f424-42a6-af91-5cf5065fa698", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(33, "b1f5ff79-6f6c-4599-9a37-02485e1adc05", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(34, "f0a37590-08b6-4355-bef6-f48e37ffab2e", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(35, "da68ad36-ff62-4c9d-8c6d-a7e14256a3cc", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(36, "e79b8255-81ec-41ea-9e32-292341e1ded4", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(37, "e79b8255-81ec-41ea-9e32-292341e1ded4", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(38, "cbe4b196-3759-4e19-9d26-8de53900bf9f", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(39, "cbe4b196-3759-4e19-9d26-8de53900bf9f", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Terminate),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,1,1,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,1,1,1,1,1,1,1,1,2,2,3,4,4,4,5,6,6,7,8,8,9,9,10,10,11,11,12,13,13,14,14,15,16,16,17,18,18,18,19,20,20,21,22,22,23,24,24,24,25,26,26,27,28,28,29,29,30,30,31,31,32,33,33,34,34,35,36,36,37,38,38,39,39,39,39,39,39,39,39,39,39,1,1,1,1,1,};

        public static int[][] __progressLocations = new int[2] [] {__progressLocation0,__progressLocation1};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __UploadChildLogic_1 __ctx1__ = (__UploadChildLogic_1)_stateMgrs[1];
            __UploadChildLogic_root_0 __ctx0__ = (__UploadChildLogic_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                RestContentVersionInsertPort = new RestContentVersionInsertPortType(0, this);
                RestContentDocumentlinkInsertPort = new RestContentDocumentlinkInsertPortType(2, this);
                RestContentVersionDocumentIdQueryPort = new RestContentVersionDocumentIdQueryPortType(1, this);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __UploadChildLogic_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __UploadChildLogic_1 __ctx1__ = (__UploadChildLogic_1)_stateMgrs[1];
            __UploadChildLogic_root_0 __ctx0__ = (__UploadChildLogic_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__ApplicationSFID = (System.String)Args[0];
                __ctx1__.__RECEIPTDOCUMENT_ID = (System.String)Args[1];
                __ctx1__.__DocCheckListItemSFID = (System.String)Args[2];
                __ctx1__.__CheckListItemFlag = (System.Boolean)Args[8];
                __ctx1__.__ActualDocumentUploadResponse = null;
                __ctx1__.__ActualDocumentUploadRequest = new DocumentUploadRequestType("ActualDocumentUploadRequest", __ctx1__);
                __ctx1__.__ActualDocumentUploadRequest.CopyFrom((Microsoft.XLANGs.Core.XMessage)Args[7]);
                __ctx1__.RefMessage(__ctx1__.__ActualDocumentUploadRequest);
                __ctx1__.__ActualDocumentUploadRequest.ConstructionCompleteEvent();
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx1__.__CONTENTVERSION_DOCUMENTID = default(System.String);
                __ctx1__.__RestDLAPDocumentUploadException = default(System.Exception);
                __ctx1__.__RestContentVersionResponseMessage = default(System.String);
                __ctx1__.__RestContentVersionSFID = default(System.String);
                __ctx1__.__SOQL_ContentVersion_QUERY = default(System.String);
                __ctx1__.__RestContentResponseMessage = default(System.String);
                __ctx1__.__RestContentSFID = default(System.String);
                __ctx1__.__RestContentLinkResponseMessage = default(System.String);
                __ctx1__.__RestContentLinkSFID = default(System.String);
                __ctx1__.__ContentDocumentlinkSFID = default(System.String);
                __ctx1__.__ResponseStatus = default(System.String);
                __ctx1__.__Flag = default(System.Boolean);
                __ctx1__.__CheckListResponseStatus = default(System.String);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__CONTENTVERSION_DOCUMENTID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.__RestDLAPDocumentUploadException = new System.Exception();
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx1__.__RestContentVersionResponseMessage = "";
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx1__.__RestContentVersionSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.__SOQL_ContentVersion_QUERY = "";
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                __ctx1__.__RestContentResponseMessage = "";
                if (__ctx1__ != null)
                    __ctx1__.__RestContentResponseMessage = null;
                if ( !PostProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 9;
            case 9:
                __ctx1__.__RestContentSFID = "";
                if (__ctx1__ != null)
                    __ctx1__.__RestContentSFID = null;
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                __ctx1__.__RestContentLinkResponseMessage = "";
                if ( !PostProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 11;
            case 11:
                __ctx1__.__RestContentLinkSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 12;
            case 12:
                if ( !PreProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[2],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 13;
            case 13:
                {
                    RestContentVersionRequestType __RestContentVersionRequestMsg = new RestContentVersionRequestType("RestContentVersionRequestMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.DLAPDocumentUpload.Logic.MakeContentVersionRequest), new object[] {__RestContentVersionRequestMsg.MessagePart}, new object[] {__ctx1__.__ActualDocumentUploadRequest.MessagePart});

                    if (__ctx1__.__RestContentVersionRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionRequestMsg);
                    __ctx1__.__RestContentVersionRequestMsg = __RestContentVersionRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestContentVersionRequestMsg);
                }
                __ctx1__.__RestContentVersionRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionRequestMsg);
                    __edata.Messages.Add(__ctx1__.__ActualDocumentUploadRequest);
                    Tracker.FireEvent(__eventLocations[3],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestContentVersionInsertPort.SendMessage(0, __ctx1__.__RestContentVersionRequestMsg, null, null, out __ctx0__.__subWrapper0, __ctx1__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionRequestMsg);
                    __edata.PortName = @"RestContentVersionInsertPort";
                    Tracker.FireEvent(__eventLocations[5],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                if ( !PreProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 20;
            case 20:
                if (!RestContentVersionInsertPort.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[0]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper0 != null)
                {
                    __ctx0__.__subWrapper0.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper0 = null;
                }
                if (__ctx1__.__RestContentVersionResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionResponseMsg);
                __ctx1__.__RestContentVersionResponseMsg = new RestContentVersionResponseType("RestContentVersionResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestContentVersionResponseMsg);
                RestContentVersionInsertPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestContentVersionResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (RestContentVersionInsertPort != null)
                {
                    RestContentVersionInsertPort.Close(__ctx1__, __seg__);
                    RestContentVersionInsertPort = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 21;
            case 21:
                if ( !PreProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionResponseMsg);
                    __edata.PortName = @"RestContentVersionInsertPort";
                    Tracker.FireEvent(__eventLocations[7],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                __ctx1__.__RestContentVersionResponseMessage = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestContentVersionResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='errors' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='message' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                __ctx1__.__RestContentVersionSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestContentVersionResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion']/*[local-name()='id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentVersion'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                if ( !PreProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 27;
            case 27:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__RestContentVersionResponseMessage) && (__ctx1__.__RestContentVersionSFID.Length == 0);
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 35 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 35;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 28;
            case 28:
                if ( !PreProgressInc( __seg__, __ctx__, 29 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 29;
            case 29:
                __ctx1__.__RestDLAPDocumentUploadException = new System.Exception("DLAP Document Upload Rest Exception Occurred- " + __ctx1__.__RestContentVersionResponseMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 30;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                if ( !PreProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[8],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 32;
            case 32:
                throw __ctx1__.__RestDLAPDocumentUploadException;
            case 33:
                if ( !PreProgressInc( __seg__, __ctx__, 34 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[14],__eventData[9],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 34;
            case 34:
                RequestTerminate(__ctx1__,"DLAP Document Upload Rest Exception Occurred");
                __seg__.SegmentDone();
                break;
            case 35:
                if ( !PreProgressInc( __seg__, __ctx__, 36 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[15],__eventData[10],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 36;
            case 36:
                if ( !PreProgressInc( __seg__, __ctx__, 37 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[16],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 37;
            case 37:
                {
                    RestContentVersionQueryRequestType __RestContentVersionQueryRequestMsg = new RestContentVersionQueryRequestType("RestContentVersionQueryRequestMsg", __ctx1__);

                    ApplyTransform(typeof(SBA.DLAPDocumentUpload.Logic.MakeContentVersionDocumentIdRequest), new object[] {__RestContentVersionQueryRequestMsg.MessagePart}, new object[] {__ctx1__.__RestContentVersionRequestMsg.MessagePart});
                    __ctx1__.__SOQL_ContentVersion_QUERY = @"Select Id, ContentDocumentId from ContentVersion WHERE Id IN " + "(" + "'" + __ctx1__.__RestContentVersionSFID + "'" + ")";
                    if (__ctx1__ != null)
                        __ctx1__.__RestContentVersionSFID = null;
                    __RestContentVersionQueryRequestMsg.SetPropertyValue(typeof(DLAPDocumentUploadSalesForceDefinition.Rest.SOQL_ContentDocument_ID_Query), __ctx1__.__SOQL_ContentVersion_QUERY);
                    if (__ctx1__ != null)
                        __ctx1__.__SOQL_ContentVersion_QUERY = null;

                    if (__ctx1__.__RestContentVersionQueryRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionQueryRequestMsg);
                    __ctx1__.__RestContentVersionQueryRequestMsg = __RestContentVersionQueryRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestContentVersionQueryRequestMsg);
                }
                __ctx1__.__RestContentVersionQueryRequestMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 38 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 38;
            case 38:
                if ( !PreProgressInc( __seg__, __ctx__, 39 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionQueryRequestMsg);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionRequestMsg);
                    Tracker.FireEvent(__eventLocations[17],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestContentVersionRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionRequestMsg);
                    __ctx1__.__RestContentVersionRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 39;
            case 39:
                if ( !PreProgressInc( __seg__, __ctx__, 40 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[18],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 40;
            case 40:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 41 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 41;
            case 41:
                if ( !PreProgressInc( __seg__, __ctx__, 42 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestContentVersionDocumentIdQueryPort.SendMessage(0, __ctx1__.__RestContentVersionQueryRequestMsg, null, null, out __ctx0__.__subWrapper1, __ctx1__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 42;
            case 42:
                if ( !PreProgressInc( __seg__, __ctx__, 43 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionQueryRequestMsg);
                    __edata.PortName = @"RestContentVersionDocumentIdQueryPort";
                    Tracker.FireEvent(__eventLocations[19],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestContentVersionQueryRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionQueryRequestMsg);
                    __ctx1__.__RestContentVersionQueryRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 43;
            case 43:
                if ( !PreProgressInc( __seg__, __ctx__, 44 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[20],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 44;
            case 44:
                if (!RestContentVersionDocumentIdQueryPort.GetMessageId(__ctx0__.__subWrapper1.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[1]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper1 != null)
                {
                    __ctx0__.__subWrapper1.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper1 = null;
                }
                if (__ctx1__.__RestContentVersionQueryResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionQueryResponseMsg);
                __ctx1__.__RestContentVersionQueryResponseMsg = new RestContentVersionQueryResponseType("RestContentVersionQueryResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestContentVersionQueryResponseMsg);
                RestContentVersionDocumentIdQueryPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestContentVersionQueryResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (RestContentVersionDocumentIdQueryPort != null)
                {
                    RestContentVersionDocumentIdQueryPort.Close(__ctx1__, __seg__);
                    RestContentVersionDocumentIdQueryPort = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 45 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 45;
            case 45:
                if ( !PreProgressInc( __seg__, __ctx__, 46 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionQueryResponseMsg);
                    __edata.PortName = @"RestContentVersionDocumentIdQueryPort";
                    Tracker.FireEvent(__eventLocations[21],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 46;
            case 46:
                if ( !PreProgressInc( __seg__, __ctx__, 47 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[22],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 47;
            case 47:
                {
                    RestContentDocumentLinkRequestType __RestContentDocumentLinkRequestMsg = new RestContentDocumentLinkRequestType("RestContentDocumentLinkRequestMsg", __ctx1__);
                    ContentLinkRequestInfoType __ContentLinkRequestInfoMsg = new ContentLinkRequestInfoType("ContentLinkRequestInfoMsg", __ctx1__);

                    ApplyTransform(typeof(DLAPDocumentUploadLogic.MakeTempConentLinkValuesRequest), new object[] {__ContentLinkRequestInfoMsg.MessagePart}, new object[] {__ctx1__.__RestContentVersionQueryResponseMsg.MessagePart});
                    __ctx1__.__CONTENTVERSION_DOCUMENTID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestContentVersionQueryResponseMsg.MessagePart, "string(/*[local-name()='QueryResult' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/RestContentVersion']/*[local-name()='records' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/RestContentVersion']/*[local-name()='ContentDocumentId' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/QUERY/RestContentVersion'])", typeof(System.String));
                    __ContentLinkRequestInfoMsg.MessagePart.SetDistinguishedField("CONTENTVERSION_DOCUMENTID", __ctx1__.__CONTENTVERSION_DOCUMENTID);
                    if (__ctx1__ != null)
                        __ctx1__.__CONTENTVERSION_DOCUMENTID = null;
                    __ContentLinkRequestInfoMsg.MessagePart.SetDistinguishedField("ACTION_ID", __ctx1__.__DocCheckListItemSFID);
                    if (__ctx1__ != null)
                        __ctx1__.__DocCheckListItemSFID = null;
                    __ContentLinkRequestInfoMsg.MessagePart.SetDistinguishedField("RECEIPTDOCUMENT_ID", __ctx1__.__RECEIPTDOCUMENT_ID);
                    if (__ctx1__ != null)
                        __ctx1__.__RECEIPTDOCUMENT_ID = null;
                    __ContentLinkRequestInfoMsg.MessagePart.SetDistinguishedField("APPLICATIONSFID", __ctx1__.__ApplicationSFID);
                    if (__ctx1__ != null)
                        __ctx1__.__ApplicationSFID = null;
                    ApplyTransform(typeof(DLAPDocumentUploadLogic.MakeDocumentLinkRequest), new object[] {__RestContentDocumentLinkRequestMsg.MessagePart}, new object[] {__ContentLinkRequestInfoMsg.MessagePart});

                    if (__ctx1__.__RestContentDocumentLinkRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestContentDocumentLinkRequestMsg);
                    __ctx1__.__RestContentDocumentLinkRequestMsg = __RestContentDocumentLinkRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestContentDocumentLinkRequestMsg);
                    if (__ctx1__.__ContentLinkRequestInfoMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ContentLinkRequestInfoMsg);
                    __ctx1__.__ContentLinkRequestInfoMsg = __ContentLinkRequestInfoMsg;
                    __ctx1__.RefMessage(__ctx1__.__ContentLinkRequestInfoMsg);
                }
                __ctx1__.__RestContentDocumentLinkRequestMsg.ConstructionCompleteEvent(true);
                __ctx1__.__ContentLinkRequestInfoMsg.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 48 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 48;
            case 48:
                if ( !PreProgressInc( __seg__, __ctx__, 49 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestContentDocumentLinkRequestMsg);
                    __edata.Messages.Add(__ctx1__.__ContentLinkRequestInfoMsg);
                    __edata.Messages.Add(__ctx1__.__RestContentVersionQueryResponseMsg);
                    Tracker.FireEvent(__eventLocations[23],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestContentVersionQueryResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionQueryResponseMsg);
                    __ctx1__.__RestContentVersionQueryResponseMsg = null;
                }
                if (__ctx1__ != null && __ctx1__.__ContentLinkRequestInfoMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ContentLinkRequestInfoMsg);
                    __ctx1__.__ContentLinkRequestInfoMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 49;
            case 49:
                if ( !PreProgressInc( __seg__, __ctx__, 50 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[24],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 50;
            case 50:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 51 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 51;
            case 51:
                if ( !PreProgressInc( __seg__, __ctx__, 52 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestContentDocumentlinkInsertPort.SendMessage(0, __ctx1__.__RestContentDocumentLinkRequestMsg, null, null, out __ctx0__.__subWrapper2, __ctx1__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 52;
            case 52:
                if ( !PreProgressInc( __seg__, __ctx__, 53 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestContentDocumentLinkRequestMsg);
                    __edata.PortName = @"RestContentDocumentlinkInsertPort";
                    Tracker.FireEvent(__eventLocations[25],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestContentDocumentLinkRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentDocumentLinkRequestMsg);
                    __ctx1__.__RestContentDocumentLinkRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 53;
            case 53:
                if ( !PreProgressInc( __seg__, __ctx__, 54 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[26],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 54;
            case 54:
                if (!RestContentDocumentlinkInsertPort.GetMessageId(__ctx0__.__subWrapper2.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[2]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper2 != null)
                {
                    __ctx0__.__subWrapper2.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper2 = null;
                }
                if (__ctx1__.__RestContentDocumentLinkResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentDocumentLinkResponseMsg);
                __ctx1__.__RestContentDocumentLinkResponseMsg = new RestContentDocumentLinkResponseType("RestContentDocumentLinkResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestContentDocumentLinkResponseMsg);
                RestContentDocumentlinkInsertPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestContentDocumentLinkResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (RestContentDocumentlinkInsertPort != null)
                {
                    RestContentDocumentlinkInsertPort.Close(__ctx1__, __seg__);
                    RestContentDocumentlinkInsertPort = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 55 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 55;
            case 55:
                if ( !PreProgressInc( __seg__, __ctx__, 56 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestContentDocumentLinkResponseMsg);
                    __edata.PortName = @"RestContentDocumentlinkInsertPort";
                    Tracker.FireEvent(__eventLocations[27],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 56;
            case 56:
                if ( !PreProgressInc( __seg__, __ctx__, 57 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[28],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 57;
            case 57:
                __ctx1__.__RestContentLinkResponseMessage = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestContentVersionResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink']/*[local-name()='errors' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink']/*[local-name()='message' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 58 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 58;
            case 58:
                if ( !PreProgressInc( __seg__, __ctx__, 59 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[29],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 59;
            case 59:
                __ctx1__.__RestContentLinkSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestContentVersionResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink']/*[local-name()='id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/RestContentDocumentLink'])", typeof(System.String));
                if (__ctx1__ != null && __ctx1__.__RestContentVersionResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentVersionResponseMsg);
                    __ctx1__.__RestContentVersionResponseMsg = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 60 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 60;
            case 60:
                if ( !PreProgressInc( __seg__, __ctx__, 61 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[30],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 61;
            case 61:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__RestContentLinkResponseMessage) && (__ctx1__.__RestContentLinkSFID.Length == 0);
                if (__ctx1__ != null)
                    __ctx1__.__RestContentLinkResponseMessage = null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 69 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 69;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 62 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 62;
            case 62:
                if ( !PreProgressInc( __seg__, __ctx__, 63 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[31],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 63;
            case 63:
                __ctx1__.__RestDLAPDocumentUploadException = new System.Exception("DLAP Document Upload Rest Exception Occurred- " + __ctx1__.__RestContentVersionResponseMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 64 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 64;
            case 64:
                if ( !PreProgressInc( __seg__, __ctx__, 65 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[32],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 65;
            case 65:
                if ( !PreProgressInc( __seg__, __ctx__, 66 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[33],__eventData[8],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 66;
            case 66:
                throw __ctx1__.__RestDLAPDocumentUploadException;
            case 67:
                if ( !PreProgressInc( __seg__, __ctx__, 68 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[34],__eventData[9],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 68;
            case 68:
                RequestTerminate(__ctx1__,"DLAP Document Upload Rest Exception Occurred");
                __seg__.SegmentDone();
                break;
            case 69:
                if ( !PreProgressInc( __seg__, __ctx__, 70 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__RestContentVersionResponseMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestDLAPDocumentUploadException = null;
                Tracker.FireEvent(__eventLocations[35],__eventData[10],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 70;
            case 70:
                if ( !PreProgressInc( __seg__, __ctx__, 71 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[36],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 71;
            case 71:
                {
                    DocumentUploadResponseType __ActualDocumentUploadResponse = new DocumentUploadResponseType("ActualDocumentUploadResponse", __ctx1__);

                    ApplyTransform(typeof(SBA.DLAPDocumentUpload.Logic.MakeDocumentUploadResponse), new object[] {__ActualDocumentUploadResponse.MessagePart}, new object[] {__ctx1__.__RestContentDocumentLinkResponseMsg.MessagePart});

                    if (__ctx1__.__ActualDocumentUploadResponse != null)
                        __ctx1__.UnrefMessage(__ctx1__.__ActualDocumentUploadResponse);
                    __ctx1__.__ActualDocumentUploadResponse = __ActualDocumentUploadResponse;
                    __ctx1__.RefMessage(__ctx1__.__ActualDocumentUploadResponse);
                }
                __ctx1__.__ActualDocumentUploadResponse.ConstructionCompleteEvent(true);
                if ( !PostProgressInc( __seg__, __ctx__, 72 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 72;
            case 72:
                if ( !PreProgressInc( __seg__, __ctx__, 73 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__ActualDocumentUploadResponse);
                    __edata.Messages.Add(__ctx1__.__RestContentDocumentLinkResponseMsg);
                    Tracker.FireEvent(__eventLocations[37],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestContentDocumentLinkResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestContentDocumentLinkResponseMsg);
                    __ctx1__.__RestContentDocumentLinkResponseMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 73;
            case 73:
                if ( !PreProgressInc( __seg__, __ctx__, 74 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[38],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 74;
            case 74:
                __ctx1__.__Flag = true;
                if ( !PostProgressInc( __seg__, __ctx__, 75 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 75;
            case 75:
                if ( !PreProgressInc( __seg__, __ctx__, 76 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[39],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 76;
            case 76:
                if ( !PreProgressInc( __seg__, __ctx__, 77 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 77;
            case 77:
                __condition__ = !__ctx1__.__CheckListItemFlag;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 81 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 81;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 78 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 78;
            case 78:
                __ctx1__.__ResponseStatus = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__ActualDocumentUploadResponse.MessagePart, "string(/*[local-name()='DOCUMENTRESPONSE' and namespace-uri()='http://DocumentUploadDefinition.DocumentUpload']/*[local-name()='Upload_Status' and namespace-uri()=''])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 79 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 79;
            case 79:
                __ctx1__.__CheckListResponseStatus = __ctx1__.__ResponseStatus;
                if ( !PostProgressInc( __seg__, __ctx__, 80 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 80;
            case 80:
                if ( !PostProgressInc( __seg__, __ctx__, 83 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 83;
            case 81:
                __ctx1__.__CheckListResponseStatus = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__ActualDocumentUploadResponse.MessagePart, "string(/*[local-name()='DOCUMENTRESPONSE' and namespace-uri()='http://DocumentUploadDefinition.DocumentUpload']/*[local-name()='Upload_Status' and namespace-uri()=''])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 82 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 82;
            case 82:
                __ctx1__.__ResponseStatus = __ctx1__.__CheckListResponseStatus;
                if ( !PostProgressInc( __seg__, __ctx__, 83 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 83;
            case 83:
                if ( !PreProgressInc( __seg__, __ctx__, 84 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[10],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 84;
            case 84:
                __ctx1__.__ContentDocumentlinkSFID = __ctx1__.__RestContentLinkSFID;
                if (__ctx1__ != null)
                    __ctx1__.__RestContentLinkSFID = null;
                if ( !PostProgressInc( __seg__, __ctx__, 85 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 85;
            case 85:
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body);
                    __edata.Messages.Add(__ctx1__.__ActualDocumentUploadResponse);
                    __edata.Messages.Add(__ctx1__.__ActualDocumentUploadRequest);
                    Tracker.FireEvent(__eventLocations[0],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__ActualDocumentUploadRequest != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__ActualDocumentUploadRequest);
                    __ctx1__.__ActualDocumentUploadRequest = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 86 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 86;
            case 86:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 87 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 87;
            case 87:
                if ( !PreProgressInc( __seg__, __ctx__, 88 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 88;
            case 88:
                Args[3] = __ctx1__.__ContentDocumentlinkSFID;
                Args[4] = __ctx1__.__ResponseStatus;
                Args[5] = __ctx1__.__Flag;
                Args[9] = __ctx1__.__CheckListResponseStatus;
                ((Microsoft.XLANGs.Core.MessageTuple)(Args[6])).message = __ctx1__.__ActualDocumentUploadResponse;
                ((Microsoft.XLANGs.Core.MessageTuple)(Args[6])).context.RefMessage(__ctx1__.__ActualDocumentUploadResponse);
                if ( !PostProgressInc( __seg__, __ctx__, 89 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 89;
            case 89:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
        private static Microsoft.XLANGs.Core.CachedObject[] _locations = new Microsoft.XLANGs.Core.CachedObject[] {
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{84A61E71-66D8-456E-BAA9-326EA8E21D62}")),
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{E9E85325-F5AB-4378-B156-FEA80D6CA1F9}")),
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{D9B12120-87BA-4FD8-A069-455ED17293EB}"))
        };

    }
    //#line 298 "C:\Users\skyeniga\Source\Repos\Biztalk\DLAP Document Upload\DLAP Document Upload Logic\UploadEventRequest.odx"
    [Microsoft.XLANGs.BaseTypes.ServicePortsAttribute(
        new Microsoft.XLANGs.BaseTypes.EXLangSParameter[] {
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.ePort|Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        },
        new System.Type[] {
            typeof(DLAPDocument.RestEventPortType)
        },
        new System.String[] {
            "RestEventPort"
        },
        new System.Type[] {
            null
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceCallTreeAttribute(
        new System.Type[] {
        },
        new System.Type[] {
        },
        new System.Type[] {
        }
    )]
    [Microsoft.XLANGs.BaseTypes.ServiceAttribute(
        Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal,
        Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eCallable|Microsoft.XLANGs.BaseTypes.EXLangSServiceInfo.eExecable
    )]
    [System.SerializableAttribute]
    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed internal class UploadEventRequest : Microsoft.BizTalk.XLANGs.BTXEngine.BTXService
    {
        public static readonly Microsoft.XLANGs.BaseTypes.EXLangSAccess __access = Microsoft.XLANGs.BaseTypes.EXLangSAccess.eInternal;
        public static readonly bool __execable = true;
        [Microsoft.XLANGs.BaseTypes.CallCompensationAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSCallCompensationInfo.eHasRequestResponse
,
            new System.String[] {
            },
            new System.String[] {
            }
        )]
        public static void __bodyProxy(
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String Application_Number__c,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String SObject_ID__c,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String Log_Message__c,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String SObject_Name__c,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String Stage__c,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String Status__c,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.String Auto_Decline_Reason__c,
            [ Microsoft.XLANGs.BaseTypes.ServiceParameterAttribute(Microsoft.XLANGs.BaseTypes.EXLangSParameter.eVariable, "") ] System.Guid OrchestrationInstanceId)
        {
        }
        private static System.Guid _serviceId = Microsoft.XLANGs.Core.HashHelper.HashServiceType(typeof(UploadEventRequest));
        private static volatile System.Guid[] _activationSubIds;

        private static new object _lockIdentity = new object();

        public static System.Guid UUID { get { return _serviceId; } }
        public override System.Guid ServiceId { get { return UUID; } }

        protected override System.Guid[] ActivationSubGuids
        {
            get { return _activationSubIds; }
            set { _activationSubIds = value; }
        }

        protected override object StaleStateLock
        {
            get { return _lockIdentity; }
        }

        protected override bool HasActivation { get { return false; } }

        internal bool IsExeced = false;

        static UploadEventRequest()
        {
            Microsoft.BizTalk.XLANGs.BTXEngine.BTXService.CacheStaticState( _serviceId );
        }

        private void ConstructorHelper()
        {
            _segments = new Microsoft.XLANGs.Core.Segment[] {
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment0), 0, 0, 0),
                new Microsoft.XLANGs.Core.Segment( new Microsoft.XLANGs.Core.Segment.SegmentCode(this.segment1), 1, 1, 1)
            };

            _Locks = 0;
            _rootContext = new __UploadEventRequest_root_0(this);
            _stateMgrs = new Microsoft.XLANGs.Core.IStateManager[2];
            _stateMgrs[0] = _rootContext;
            FinalConstruct();
        }

        public UploadEventRequest(System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXSession session, Microsoft.BizTalk.XLANGs.BTXEngine.BTXEvents tracker)
            : base(instanceId, session, "UploadEventRequest", tracker)
        {
            ConstructorHelper();
        }

        public UploadEventRequest(int callIndex, System.Guid instanceId, Microsoft.BizTalk.XLANGs.BTXEngine.BTXService parent)
            : base(callIndex, instanceId, parent, "UploadEventRequest")
        {
            ConstructorHelper();
        }

        private const string _symInfo = @"
<XsymFile>
<ProcessFlow xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>      <shapeType>RootShape</shapeType>      <ShapeID>2ee6dff8-07f1-4535-87b4-ca35f04552ce</ShapeID>      
<children>                          
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>a676f29c-3ad3-441a-9f17-93e93bcf3594</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>Application_Number__c</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>2cc70f21-fb1e-44c1-aa0a-270226a1cb6b</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>SObject_ID__c</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>abf6e77a-f970-4150-8b96-a18764dee685</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>Log_Message__c</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>9c3da375-0e18-4100-93a5-95e54e96444f</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>SObject_Name__c</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>5ea50e81-ba95-40b0-b919-e29bb55068a1</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>Stage__c</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>6037bce8-4a3d-4cbd-981d-a85a9a4bd78c</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>Status__c</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>180e5926-6764-420e-bc34-850c915c92de</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>Auto_Decline_Reason__c</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableDeclarationShape</shapeType>      <ShapeID>8f5afe28-20b3-40a6-be0e-e3c5f9e35113</ShapeID>      <ParentLink>ServiceBody_Declaration</ParentLink>                <shapeText>OrchestrationInstanceId</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ConstructShape</shapeType>      <ShapeID>f84d8b89-0605-4efc-a0fa-b6bca8404099</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Construct Rest Event Request Msg</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>MessageAssignmentShape</shapeType>      <ShapeID>7c03b257-1f9d-4a02-b591-aea5f1667fe7</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Make Request Msg</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>MessageRefShape</shapeType>      <ShapeID>e7aaa676-ad3b-4b9b-a092-1ae10c02d9bb</ShapeID>      <ParentLink>Construct_MessageRef</ParentLink>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>SendShape</shapeType>      <ShapeID>6d47e91d-bd62-40ed-9a49-af24cec37cc9</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Send Rest Event Request</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ReceiveShape</shapeType>      <ShapeID>6e81659d-4305-431e-a67a-e169f0f4aabe</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Receive Rest Event Response</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>9158f587-ec12-486b-bd82-6c1bcab8b47e</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Extract Values</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionShape</shapeType>      <ShapeID>6b1d035d-d610-4c90-af71-267a9a0a5129</ShapeID>      <ParentLink>ServiceBody_Statement</ParentLink>                <shapeText>Valid Response</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>7d48d2d0-06a2-4413-a260-052a231c2896</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Error</shapeText>                  
<children>                          
<ShapeInfo>      <shapeType>VariableAssignmentShape</shapeType>      <ShapeID>39f3c870-1aa8-4c00-950b-0e1611a58029</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Exception</shapeText>                  
<children>                </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>ThrowShape</shapeType>      <ShapeID>62204449-a1eb-4fc8-b1bf-0121af48e99d</ShapeID>      <ParentLink>ComplexStatement_Statement</ParentLink>                <shapeText>Rest Error </shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                            
<ShapeInfo>      <shapeType>DecisionBranchShape</shapeType>      <ShapeID>103f3149-950d-40b4-aad1-5c4f7df5fc69</ShapeID>      <ParentLink>ReallyComplexStatement_Branch</ParentLink>                <shapeText>Else</shapeText>                  
<children>                </children>
  </ShapeInfo>
                  </children>
  </ShapeInfo>
                  </children>
  </ProcessFlow><Metadata>

<TrkMetadata>
<ActionName>'UploadEventRequest'</ActionName><IsAtomic>0</IsAtomic><Line>298</Line><Position>14</Position><ShapeID>'e211a116-cb8b-44e7-a052-0de295aa0001'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>317</Line><Position>13</Position><ShapeID>'f84d8b89-0605-4efc-a0fa-b6bca8404099'</ShapeID>
<Messages>
	<MsgInfo><name>RestEventRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestEventRequest</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>344</Line><Position>13</Position><ShapeID>'6d47e91d-bd62-40ed-9a49-af24cec37cc9'</ShapeID>
<Messages>
	<MsgInfo><name>RestEventRequestMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestEventRequest</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>346</Line><Position>13</Position><ShapeID>'6e81659d-4305-431e-a67a-e169f0f4aabe'</ShapeID>
<Messages>
	<MsgInfo><name>RestEventResponseMsg</name><part>MessagePart</part><schema>DLAPDocumentUploadSalesForceDefinition.Rest.RestEventResponse</schema><direction>Out</direction></MsgInfo>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>348</Line><Position>30</Position><ShapeID>'9158f587-ec12-486b-bd82-6c1bcab8b47e'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>352</Line><Position>13</Position><ShapeID>'6b1d035d-d610-4c90-af71-267a9a0a5129'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>355</Line><Position>36</Position><ShapeID>'39f3c870-1aa8-4c00-950b-0e1611a58029'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>

<TrkMetadata>
<Line>357</Line><Position>17</Position><ShapeID>'62204449-a1eb-4fc8-b1bf-0121af48e99d'</ShapeID>
<Messages>
</Messages>
</TrkMetadata>
</Metadata>
</XsymFile>";

        public override string odXml { get { return _symODXML; } }

        private const string _symODXML = @"
<?xml version='1.0' encoding='utf-8' standalone='yes'?>
<om:MetaModel MajorVersion='1' MinorVersion='3' Core='2b131234-7959-458d-834f-2dc0769ce683' ScheduleModel='66366196-361d-448d-976f-cab5e87496d2' xmlns:om='http://schemas.microsoft.com/BizTalk/2003/DesignerData'>
    <om:Element Type='Module' OID='bbcbebda-889c-43dd-8d4b-e041fb1ae986' LowerBound='1.1' HigherBound='84.1'>
        <om:Property Name='ReportToAnalyst' Value='True' />
        <om:Property Name='Name' Value='DLAPDocument' />
        <om:Property Name='Signal' Value='False' />
        <om:Element Type='PortType' OID='07b579c5-839a-4e4d-a217-7913da78764d' ParentLink='Module_PortType' LowerBound='12.1' HigherBound='19.1'>
            <om:Property Name='Synchronous' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestEventPortType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='OperationDeclaration' OID='36a52f52-fb4b-4e31-a633-efdd4af743a9' ParentLink='PortType_OperationDeclaration' LowerBound='14.1' HigherBound='18.1'>
                <om:Property Name='OperationType' Value='RequestResponse' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='Operation' />
                <om:Property Name='Signal' Value='True' />
                <om:Element Type='MessageRef' OID='425e8e1f-f6d6-4ae9-9ee4-9e16e783be00' ParentLink='OperationDeclaration_RequestMessageRef' LowerBound='16.13' HigherBound='16.33'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestEventRequestType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Request' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='MessageRef' OID='d5e4a510-d20b-4445-a7b8-b6dab9dd707d' ParentLink='OperationDeclaration_ResponseMessageRef' LowerBound='16.35' HigherBound='16.56'>
                    <om:Property Name='Ref' Value='DLAPDocument.RestEventResponseType' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Response' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='ef8a0adb-5611-46ed-b4e2-b0d6fdede31d' ParentLink='Module_MessageType' LowerBound='4.1' HigherBound='8.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestEventRequestType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='043cbdb6-b282-4738-81d9-208829dc2e67' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='6.1' HigherBound='7.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestEventRequest' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='MultipartMessageType' OID='73fe28fb-8f44-4787-a6e3-d0761df92d6e' ParentLink='Module_MessageType' LowerBound='8.1' HigherBound='12.1'>
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='RestEventResponseType' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='PartDeclaration' OID='eb73e6ae-3df9-4856-9b63-37e17334d5f3' ParentLink='MultipartMessageType_PartDeclaration' LowerBound='10.1' HigherBound='11.1'>
                <om:Property Name='ClassName' Value='DLAPDocumentUploadSalesForceDefinition.Rest.RestEventResponse' />
                <om:Property Name='IsBodyPart' Value='True' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='MessagePart' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
        </om:Element>
        <om:Element Type='ServiceDeclaration' OID='337f13cb-d5ce-4a15-be06-bbf4dd36692c' ParentLink='Module_ServiceDeclaration' LowerBound='19.1' HigherBound='83.1'>
            <om:Property Name='InitializedTransactionType' Value='False' />
            <om:Property Name='IsInvokable' Value='True' />
            <om:Property Name='TypeModifier' Value='Internal' />
            <om:Property Name='ReportToAnalyst' Value='True' />
            <om:Property Name='Name' Value='UploadEventRequest' />
            <om:Property Name='Signal' Value='True' />
            <om:Element Type='VariableDeclaration' OID='8fdeac09-2c4f-4ce7-8adb-ac78e1512acd' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='26.1' HigherBound='27.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Xml.XmlDocument' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='TempXml' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='a95680b5-d687-4fa0-9f64-730e1fe273ca' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='27.1' HigherBound='28.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='GUID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='034db045-a866-4f9c-b63e-9dfcdd93bd71' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='28.1' HigherBound='29.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestEventMessage' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='4cb16eb8-b513-4ffb-863a-7e9fd6b86d9f' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='29.1' HigherBound='30.1'>
                <om:Property Name='UseDefaultConstructor' Value='False' />
                <om:Property Name='Type' Value='System.String' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestEventSFID' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='VariableDeclaration' OID='655bc5ef-bb88-414d-82b9-8a08a169cfba' ParentLink='ServiceDeclaration_VariableDeclaration' LowerBound='30.1' HigherBound='31.1'>
                <om:Property Name='UseDefaultConstructor' Value='True' />
                <om:Property Name='Type' Value='System.Exception' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestEventException' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='6e7fe960-d5a3-4467-b7ea-c1cd8a4a3046' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='24.1' HigherBound='25.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestEventRequestType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestEventRequestMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='MessageDeclaration' OID='ea9f32f2-a444-40e6-a63a-fdc3f7748aec' ParentLink='ServiceDeclaration_MessageDeclaration' LowerBound='25.1' HigherBound='26.1'>
                <om:Property Name='Type' Value='DLAPDocument.RestEventResponseType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestEventResponseMsg' />
                <om:Property Name='Signal' Value='True' />
            </om:Element>
            <om:Element Type='ServiceBody' OID='2ee6dff8-07f1-4535-87b4-ca35f04552ce' ParentLink='ServiceDeclaration_ServiceBody'>
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='VariableDeclaration' OID='a676f29c-3ad3-441a-9f17-93e93bcf3594' ParentLink='ServiceBody_Declaration' LowerBound='31.15' HigherBound='31.50'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Application_Number__c' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='2cc70f21-fb1e-44c1-aa0a-270226a1cb6b' ParentLink='ServiceBody_Declaration' LowerBound='31.52' HigherBound='31.79'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='SObject_ID__c' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='abf6e77a-f970-4150-8b96-a18764dee685' ParentLink='ServiceBody_Declaration' LowerBound='31.81' HigherBound='31.109'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Log_Message__c' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='9c3da375-0e18-4100-93a5-95e54e96444f' ParentLink='ServiceBody_Declaration' LowerBound='31.111' HigherBound='31.140'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='SObject_Name__c' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='5ea50e81-ba95-40b0-b919-e29bb55068a1' ParentLink='ServiceBody_Declaration' LowerBound='31.142' HigherBound='31.164'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Stage__c' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='6037bce8-4a3d-4cbd-981d-a85a9a4bd78c' ParentLink='ServiceBody_Declaration' LowerBound='31.166' HigherBound='31.189'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Status__c' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='180e5926-6764-420e-bc34-850c915c92de' ParentLink='ServiceBody_Declaration' LowerBound='31.191' HigherBound='31.227'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.String' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Auto_Decline_Reason__c' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableDeclaration' OID='8f5afe28-20b3-40a6-be0e-e3c5f9e35113' ParentLink='ServiceBody_Declaration' LowerBound='31.229' HigherBound='31.264'>
                    <om:Property Name='UseDefaultConstructor' Value='False' />
                    <om:Property Name='Type' Value='System.Guid' />
                    <om:Property Name='ParamDirection' Value='In' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='OrchestrationInstanceId' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Construct' OID='f84d8b89-0605-4efc-a0fa-b6bca8404099' ParentLink='ServiceBody_Statement' LowerBound='38.1' HigherBound='65.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Construct Rest Event Request Msg' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='MessageAssignment' OID='7c03b257-1f9d-4a02-b591-aea5f1667fe7' ParentLink='ComplexStatement_Statement' LowerBound='41.1' HigherBound='64.1'>
                        <om:Property Name='Expression' Value='TempXml = new System.Xml.XmlDocument();&#xD;&#xA;&#xD;&#xA;Status__c = System.Security.SecurityElement.Escape(Status__c); &#xD;&#xA;&#xD;&#xA;Stage__c = System.Security.SecurityElement.Escape(Stage__c);&#xD;&#xA; &#xD;&#xA;Application_Number__c = System.Security.SecurityElement.Escape(Application_Number__c); &#xD;&#xA;&#xD;&#xA;SObject_Name__c = System.Security.SecurityElement.Escape(SObject_Name__c); &#xD;&#xA;&#xD;&#xA;SObject_ID__c= System.Security.SecurityElement.Escape(SObject_ID__c); &#xD;&#xA;&#xD;&#xA;Log_Message__c = System.Security.SecurityElement.Escape(Log_Message__c); &#xD;&#xA;&#xD;&#xA;GUID = System.DateTime.Now.ToString(&quot;yyyyMMddHHmmssfffffff&quot;)+&quot;--&quot;+System.Convert.ToString(OrchestrationInstanceId);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;TempXml.LoadXml(System.String.Format(&quot;&lt;ns0:SaveRequest xmlns:ns0=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventRequest&apos;&gt;&lt;ns0:allOrNone&gt;true&lt;/ns0:allOrNone&gt;&lt;ns0:records type=&apos;Event_Request__c&apos;&gt;&lt;ns0:Application_Number__c&gt;{0}&lt;/ns0:Application_Number__c&gt;&lt;ns0:SObject_ID__c&gt;{1}&lt;/ns0:SObject_ID__c&gt;&lt;ns0:Log_Message__c&gt;{2}&lt;/ns0:Log_Message__c&gt;&lt;ns0:SObject_Name__c&gt;{3}&lt;/ns0:SObject_Name__c&gt;&lt;ns0:Stage__c&gt;{4}&lt;/ns0:Stage__c&gt;&lt;ns0:Status__c&gt;{5}&lt;/ns0:Status__c&gt;&lt;ns0:Auto_Decline_Reason__c&gt;{6}&lt;/ns0:Auto_Decline_Reason__c&gt;&lt;ns0:GUID__c&gt;{7}&lt;/ns0:GUID__c&gt;&lt;/ns0:records&gt;&lt;/ns0:SaveRequest&gt;&quot;,Application_Number__c,SObject_ID__c,Log_Message__c,SObject_Name__c,Stage__c,Status__c,Auto_Decline_Reason__c,GUID));&#xD;&#xA;&#xD;&#xA;RestEventRequestMsg.MessagePart = TempXml;&#xD;&#xA;&#xD;&#xA;' />
                        <om:Property Name='ReportToAnalyst' Value='False' />
                        <om:Property Name='Name' Value='Make Request Msg' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                    <om:Element Type='MessageRef' OID='e7aaa676-ad3b-4b9b-a092-1ae10c02d9bb' ParentLink='Construct_MessageRef' LowerBound='39.23' HigherBound='39.42'>
                        <om:Property Name='Ref' Value='RestEventRequestMsg' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
                <om:Element Type='Send' OID='6d47e91d-bd62-40ed-9a49-af24cec37cc9' ParentLink='ServiceBody_Statement' LowerBound='65.1' HigherBound='67.1'>
                    <om:Property Name='PortName' Value='RestEventPort' />
                    <om:Property Name='MessageName' Value='RestEventRequestMsg' />
                    <om:Property Name='OperationName' Value='Operation' />
                    <om:Property Name='OperationMessageName' Value='Request' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Send Rest Event Request' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='Receive' OID='6e81659d-4305-431e-a67a-e169f0f4aabe' ParentLink='ServiceBody_Statement' LowerBound='67.1' HigherBound='69.1'>
                    <om:Property Name='Activate' Value='False' />
                    <om:Property Name='PortName' Value='RestEventPort' />
                    <om:Property Name='MessageName' Value='RestEventResponseMsg' />
                    <om:Property Name='OperationName' Value='Operation' />
                    <om:Property Name='OperationMessageName' Value='Response' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Receive Rest Event Response' />
                    <om:Property Name='Signal' Value='True' />
                </om:Element>
                <om:Element Type='VariableAssignment' OID='9158f587-ec12-486b-bd82-6c1bcab8b47e' ParentLink='ServiceBody_Statement' LowerBound='69.1' HigherBound='73.1'>
                    <om:Property Name='Expression' Value='RestEventMessage =  xpath(RestEventResponseMsg.MessagePart,&quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse&apos;]/*[local-name()=&apos;errors&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse&apos;]/*[local-name()=&apos;message&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse&apos;])&quot;);&#xD;&#xA;&#xD;&#xA;RestEventSFID = xpath(RestEventResponseMsg.MessagePart,&quot;string(/*[local-name()=&apos;results&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse&apos;]/*[local-name()=&apos;result&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse&apos;]/*[local-name()=&apos;id&apos; and namespace-uri()=&apos;http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse&apos;])&quot;);' />
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Extract Values' />
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
                <om:Element Type='Decision' OID='6b1d035d-d610-4c90-af71-267a9a0a5129' ParentLink='ServiceBody_Statement' LowerBound='73.1' HigherBound='81.1'>
                    <om:Property Name='ReportToAnalyst' Value='True' />
                    <om:Property Name='Name' Value='Valid Response' />
                    <om:Property Name='Signal' Value='True' />
                    <om:Element Type='DecisionBranch' OID='7d48d2d0-06a2-4413-a260-052a231c2896' ParentLink='ReallyComplexStatement_Branch' LowerBound='74.13' HigherBound='81.1'>
                        <om:Property Name='Expression' Value='!System.String.IsNullOrWhiteSpace(RestEventMessage) &amp;&amp; (RestEventSFID.Length == 0)' />
                        <om:Property Name='IsGhostBranch' Value='True' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Error' />
                        <om:Property Name='Signal' Value='True' />
                        <om:Element Type='VariableAssignment' OID='39f3c870-1aa8-4c00-950b-0e1611a58029' ParentLink='ComplexStatement_Statement' LowerBound='76.1' HigherBound='78.1'>
                            <om:Property Name='Expression' Value='RestEventException = new System.Exception(&quot;DLAP Document Upload Evenet Request Rest Exception  -  &quot; + RestEventMessage);' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Rest Exception' />
                            <om:Property Name='Signal' Value='False' />
                        </om:Element>
                        <om:Element Type='Throw' OID='62204449-a1eb-4fc8-b1bf-0121af48e99d' ParentLink='ComplexStatement_Statement' LowerBound='78.1' HigherBound='80.1'>
                            <om:Property Name='ThrownReference' Value='RestEventException' />
                            <om:Property Name='ReportToAnalyst' Value='True' />
                            <om:Property Name='Name' Value='Rest Error ' />
                            <om:Property Name='Signal' Value='True' />
                        </om:Element>
                    </om:Element>
                    <om:Element Type='DecisionBranch' OID='103f3149-950d-40b4-aad1-5c4f7df5fc69' ParentLink='ReallyComplexStatement_Branch'>
                        <om:Property Name='IsGhostBranch' Value='True' />
                        <om:Property Name='ReportToAnalyst' Value='True' />
                        <om:Property Name='Name' Value='Else' />
                        <om:Property Name='Signal' Value='False' />
                    </om:Element>
                </om:Element>
            </om:Element>
            <om:Element Type='PortDeclaration' OID='e730237c-d203-49ea-aabb-c5922f587297' ParentLink='ServiceDeclaration_PortDeclaration' LowerBound='22.1' HigherBound='24.1'>
                <om:Property Name='PortModifier' Value='Uses' />
                <om:Property Name='Orientation' Value='Right' />
                <om:Property Name='PortIndex' Value='-1' />
                <om:Property Name='IsWebPort' Value='False' />
                <om:Property Name='OrderedDelivery' Value='False' />
                <om:Property Name='DeliveryNotification' Value='None' />
                <om:Property Name='Type' Value='DLAPDocument.RestEventPortType' />
                <om:Property Name='ParamDirection' Value='In' />
                <om:Property Name='ReportToAnalyst' Value='True' />
                <om:Property Name='Name' Value='RestEventPort' />
                <om:Property Name='Signal' Value='False' />
                <om:Element Type='LogicalBindingAttribute' OID='cb8f9576-30e9-40b2-8d5e-878631c8bbfd' ParentLink='PortDeclaration_CLRAttribute' LowerBound='22.1' HigherBound='23.1'>
                    <om:Property Name='Signal' Value='False' />
                </om:Element>
            </om:Element>
        </om:Element>
    </om:Element>
</om:MetaModel>
";

        [System.SerializableAttribute]
        public class __UploadEventRequest_root_0 : Microsoft.XLANGs.Core.ServiceContext
        {
            public __UploadEventRequest_root_0(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "UploadEventRequest")
            {
            }

            public override int Index { get { return 0; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[0]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[0]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadEventRequest __svc__ = (UploadEventRequest)_service;
                __UploadEventRequest_root_0 __ctx0__ = (__UploadEventRequest_root_0)(__svc__._stateMgrs[0]);

                if (__svc__.RestEventPort != null)
                {
                    __svc__.RestEventPort.Close(this, null);
                    __svc__.RestEventPort = null;
                }
                base.Finally();
            }

            internal Microsoft.XLANGs.Core.SubscriptionWrapper __subWrapper0;
        }


        [System.SerializableAttribute]
        public class __UploadEventRequest_1 : Microsoft.XLANGs.Core.ExceptionHandlingContext
        {
            public __UploadEventRequest_1(Microsoft.XLANGs.Core.Service svc)
                : base(svc, "UploadEventRequest")
            {
            }

            public override int Index { get { return 1; } }

            public override bool CombineParentCommit { get { return true; } }

            public override Microsoft.XLANGs.Core.Segment InitialSegment
            {
                get { return _service._segments[1]; }
            }
            public override Microsoft.XLANGs.Core.Segment FinalSegment
            {
                get { return _service._segments[1]; }
            }

            public override int CompensationSegment { get { return -1; } }
            public override bool OnError()
            {
                Finally();
                return false;
            }

            public override void Finally()
            {
                UploadEventRequest __svc__ = (UploadEventRequest)_service;
                __UploadEventRequest_1 __ctx1__ = (__UploadEventRequest_1)(__svc__._stateMgrs[1]);
                __UploadEventRequest_root_0 __ctx0__ = (__UploadEventRequest_root_0)(__svc__._stateMgrs[0]);

                if (__ctx0__ != null && __ctx0__.__subWrapper0 != null)
                {
                    __ctx0__.__subWrapper0.Destroy(__svc__, __ctx0__);
                    __ctx0__.__subWrapper0 = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__RestEventException = null;
                if (__ctx1__ != null && __ctx1__.__RestEventRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestEventRequestMsg);
                    __ctx1__.__RestEventRequestMsg = null;
                }
                if (__ctx1__ != null)
                    __ctx1__.__GUID = null;
                if (__ctx1__ != null)
                    __ctx1__.__SObject_Name__c = null;
                if (__ctx1__ != null)
                    __ctx1__.__Auto_Decline_Reason__c = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestEventSFID = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestEventMessage = null;
                if (__ctx1__ != null)
                    __ctx1__.__Application_Number__c = null;
                if (__ctx1__ != null)
                    __ctx1__.__Stage__c = null;
                if (__ctx1__ != null)
                    __ctx1__.__Status__c = null;
                if (__ctx1__ != null)
                    __ctx1__.__SObject_ID__c = null;
                if (__ctx1__ != null)
                    __ctx1__.__Log_Message__c = null;
                if (__ctx1__ != null)
                    __ctx1__.__TempXml = null;
                if (__ctx1__ != null && __ctx1__.__RestEventResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestEventResponseMsg);
                    __ctx1__.__RestEventResponseMsg = null;
                }
                base.Finally();
            }

            [Microsoft.XLANGs.Core.UserVariableAttribute("RestEventRequestMsg")]
            internal RestEventRequestType __RestEventRequestMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestEventResponseMsg")]
            internal RestEventResponseType __RestEventResponseMsg;
            [Microsoft.XLANGs.Core.UserVariableAttribute("TempXml")]
            internal Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy __TempXml;
            [Microsoft.XLANGs.Core.UserVariableAttribute("GUID")]
            internal System.String __GUID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestEventMessage")]
            internal System.String __RestEventMessage;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestEventSFID")]
            internal System.String __RestEventSFID;
            [Microsoft.XLANGs.Core.UserVariableAttribute("RestEventException")]
            internal System.Exception __RestEventException;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Application_Number__c")]
            internal System.String __Application_Number__c;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SObject_ID__c")]
            internal System.String __SObject_ID__c;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Log_Message__c")]
            internal System.String __Log_Message__c;
            [Microsoft.XLANGs.Core.UserVariableAttribute("SObject_Name__c")]
            internal System.String __SObject_Name__c;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Stage__c")]
            internal System.String __Stage__c;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Status__c")]
            internal System.String __Status__c;
            [Microsoft.XLANGs.Core.UserVariableAttribute("Auto_Decline_Reason__c")]
            internal System.String __Auto_Decline_Reason__c;
            [Microsoft.XLANGs.Core.UserVariableAttribute("OrchestrationInstanceId")]
            internal System.Guid __OrchestrationInstanceId;
        }

        private static Microsoft.XLANGs.Core.CorrelationType[] _correlationTypes = null;
        public override Microsoft.XLANGs.Core.CorrelationType[] CorrelationTypes { get { return _correlationTypes; } }

        private static System.Guid[] _convoySetIds;

        public override System.Guid[] ConvoySetGuids
        {
            get { return _convoySetIds; }
            set { _convoySetIds = value; }
        }

        public static object[] StaticConvoySetInformation
        {
            get {
                return null;
            }
        }

        [Microsoft.XLANGs.BaseTypes.LogicalBindingAttribute()]
        [Microsoft.XLANGs.BaseTypes.PortAttribute(
            Microsoft.XLANGs.BaseTypes.EXLangSParameter.eUses
        )]
        [Microsoft.XLANGs.Core.UserVariableAttribute("RestEventPort")]
        internal RestEventPortType RestEventPort;

        public static Microsoft.XLANGs.Core.PortInfo[] _portInfo = new Microsoft.XLANGs.Core.PortInfo[] {
            new Microsoft.XLANGs.Core.PortInfo(new Microsoft.XLANGs.Core.OperationInfo[] {RestEventPortType.Operation},
                                               typeof(UploadEventRequest).GetField("RestEventPort", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance),
                                               Microsoft.XLANGs.BaseTypes.Polarity.uses,
                                               false,
                                               Microsoft.XLANGs.Core.HashHelper.HashPort(typeof(UploadEventRequest), "RestEventPort"),
                                               null)
        };

        public override Microsoft.XLANGs.Core.PortInfo[] PortInformation
        {
            get { return _portInfo; }
        }

        static public System.Collections.Hashtable PortsInformation
        {
            get
            {
                System.Collections.Hashtable h = new System.Collections.Hashtable();
                h[_portInfo[0].Name] = _portInfo[0];
                return h;
            }
        }

        public static System.Type[] InvokedServicesTypes
        {
            get
            {
                return new System.Type[] {
                    // type of each service invoked by this service
                };
            }
        }

        public static System.Type[] CalledServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }

        public static System.Type[] ExecedServicesTypes
        {
            get
            {
                return new System.Type[] {
                };
            }
        }


        public static Microsoft.XLANGs.RuntimeTypes.Location[] __eventLocations = new Microsoft.XLANGs.RuntimeTypes.Location[] {
            new Microsoft.XLANGs.RuntimeTypes.Location(0, "00000000-0000-0000-0000-000000000000", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(1, "00000000-0000-0000-0000-000000000000", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(2, "f84d8b89-0605-4efc-a0fa-b6bca8404099", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(3, "f84d8b89-0605-4efc-a0fa-b6bca8404099", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(4, "6d47e91d-bd62-40ed-9a49-af24cec37cc9", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(5, "6d47e91d-bd62-40ed-9a49-af24cec37cc9", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(6, "6e81659d-4305-431e-a67a-e169f0f4aabe", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(7, "6e81659d-4305-431e-a67a-e169f0f4aabe", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(8, "9158f587-ec12-486b-bd82-6c1bcab8b47e", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(9, "9158f587-ec12-486b-bd82-6c1bcab8b47e", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(10, "6b1d035d-d610-4c90-af71-267a9a0a5129", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(11, "39f3c870-1aa8-4c00-950b-0e1611a58029", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(12, "39f3c870-1aa8-4c00-950b-0e1611a58029", 1, false),
            new Microsoft.XLANGs.RuntimeTypes.Location(13, "62204449-a1eb-4fc8-b1bf-0121af48e99d", 1, true),
            new Microsoft.XLANGs.RuntimeTypes.Location(14, "6b1d035d-d610-4c90-af71-267a9a0a5129", 1, false)
        };

        public override Microsoft.XLANGs.RuntimeTypes.Location[] EventLocations
        {
            get { return __eventLocations; }
        }

        public static Microsoft.XLANGs.RuntimeTypes.EventData[] __eventData = new Microsoft.XLANGs.RuntimeTypes.EventData[] {
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Body),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Construct),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Send),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Receive),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Expression),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.If),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.Start | Microsoft.XLANGs.RuntimeTypes.Operation.Throw),
            new Microsoft.XLANGs.RuntimeTypes.EventData( Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.If)
        };

        public static int[] __progressLocation0 = new int[] { 0,0,0,1,1,};
        public static int[] __progressLocation1 = new int[] { 0,0,1,1,1,1,1,1,2,2,3,4,4,4,5,6,6,7,8,8,9,9,10,10,11,11,12,13,13,14,1,1,1,1,};

        public static int[][] __progressLocations = new int[2] [] {__progressLocation0,__progressLocation1};
        public override int[][] ProgressLocations {get {return __progressLocations;} }

        public Microsoft.XLANGs.Core.StopConditions segment0(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[0];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[0];
            __UploadEventRequest_1 __ctx1__ = (__UploadEventRequest_1)_stateMgrs[1];
            __UploadEventRequest_root_0 __ctx0__ = (__UploadEventRequest_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                RestEventPort = new RestEventPortType(0, this);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.Initialized) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.Initialized;
                goto case 1;
            case 1:
                __ctx1__ = new __UploadEventRequest_1(this);
                _stateMgrs[1] = __ctx1__;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                __ctx0__.StartContext(__seg__, __ctx1__);
                if ( !PostProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                return Microsoft.XLANGs.Core.StopConditions.Blocked;
            case 3:
                if (!__ctx0__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.Finally();
                ServiceDone(__seg__, (Microsoft.XLANGs.Core.Context)_stateMgrs[0]);
                __ctx0__.OnCommit();
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }

        public Microsoft.XLANGs.Core.StopConditions segment1(Microsoft.XLANGs.Core.StopConditions stopOn)
        {
            Microsoft.XLANGs.Core.Envelope __msgEnv__ = null;
            bool __condition__;
            Microsoft.XLANGs.Core.Segment __seg__ = _segments[1];
            Microsoft.XLANGs.Core.Context __ctx__ = (Microsoft.XLANGs.Core.Context)_stateMgrs[1];
            __UploadEventRequest_1 __ctx1__ = (__UploadEventRequest_1)_stateMgrs[1];
            __UploadEventRequest_root_0 __ctx0__ = (__UploadEventRequest_root_0)_stateMgrs[0];

            switch (__seg__.Progress)
            {
            case 0:
                __ctx1__.__Application_Number__c = (System.String)Args[0];
                __ctx1__.__SObject_ID__c = (System.String)Args[1];
                __ctx1__.__Log_Message__c = (System.String)Args[2];
                __ctx1__.__SObject_Name__c = (System.String)Args[3];
                __ctx1__.__Stage__c = (System.String)Args[4];
                __ctx1__.__Status__c = (System.String)Args[5];
                __ctx1__.__Auto_Decline_Reason__c = (System.String)Args[6];
                __ctx1__.__OrchestrationInstanceId = (System.Guid)Args[7];
                if ( !PostProgressInc( __seg__, __ctx__, 1 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 1;
            case 1:
                __ctx1__.__TempXml = new Microsoft.XLANGs.RuntimeTypes.XmlDocumentSerializationProxy();
                __ctx1__.__GUID = default(System.String);
                __ctx1__.__RestEventMessage = default(System.String);
                __ctx1__.__RestEventSFID = default(System.String);
                __ctx1__.__RestEventException = default(System.Exception);
                __ctx__.PrologueCompleted = true;
                if ( !PostProgressInc( __seg__, __ctx__, 2 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 2;
            case 2:
                if ( !PreProgressInc( __seg__, __ctx__, 3 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[1],__eventData[1],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 3;
            case 3:
                __ctx1__.__TempXml.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                if ( !PostProgressInc( __seg__, __ctx__, 4 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 4;
            case 4:
                __ctx1__.__GUID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 5 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 5;
            case 5:
                __ctx1__.__RestEventMessage = "";
                if ( !PostProgressInc( __seg__, __ctx__, 6 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 6;
            case 6:
                __ctx1__.__RestEventSFID = "";
                if ( !PostProgressInc( __seg__, __ctx__, 7 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 7;
            case 7:
                __ctx1__.__RestEventException = new System.Exception();
                if ( !PostProgressInc( __seg__, __ctx__, 8 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 8;
            case 8:
                if ( !PreProgressInc( __seg__, __ctx__, 9 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[2],__eventData[2],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 9;
            case 9:
                {
                    RestEventRequestType __RestEventRequestMsg = new RestEventRequestType("RestEventRequestMsg", __ctx1__);

                    __ctx1__.__TempXml.UnderlyingXmlDocument = new System.Xml.XmlDocument();
                    __ctx1__.__Status__c = System.Security.SecurityElement.Escape(__ctx1__.__Status__c);
                    __ctx1__.__Stage__c = System.Security.SecurityElement.Escape(__ctx1__.__Stage__c);
                    __ctx1__.__Application_Number__c = System.Security.SecurityElement.Escape(__ctx1__.__Application_Number__c);
                    __ctx1__.__SObject_Name__c = System.Security.SecurityElement.Escape(__ctx1__.__SObject_Name__c);
                    __ctx1__.__SObject_ID__c = System.Security.SecurityElement.Escape(__ctx1__.__SObject_ID__c);
                    __ctx1__.__Log_Message__c = System.Security.SecurityElement.Escape(__ctx1__.__Log_Message__c);
                    __ctx1__.__GUID = System.DateTime.Now.ToString("yyyyMMddHHmmssfffffff") + "--" + System.Convert.ToString(__ctx1__.__OrchestrationInstanceId);
                    __ctx1__.__TempXml.UnderlyingXmlDocument.LoadXml(System.String.Format("<ns0:SaveRequest xmlns:ns0='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventRequest'><ns0:allOrNone>true</ns0:allOrNone><ns0:records type='Event_Request__c'><ns0:Application_Number__c>{0}</ns0:Application_Number__c><ns0:SObject_ID__c>{1}</ns0:SObject_ID__c><ns0:Log_Message__c>{2}</ns0:Log_Message__c><ns0:SObject_Name__c>{3}</ns0:SObject_Name__c><ns0:Stage__c>{4}</ns0:Stage__c><ns0:Status__c>{5}</ns0:Status__c><ns0:Auto_Decline_Reason__c>{6}</ns0:Auto_Decline_Reason__c><ns0:GUID__c>{7}</ns0:GUID__c></ns0:records></ns0:SaveRequest>", __ctx1__.__Application_Number__c, __ctx1__.__SObject_ID__c, __ctx1__.__Log_Message__c, __ctx1__.__SObject_Name__c, __ctx1__.__Stage__c, __ctx1__.__Status__c, __ctx1__.__Auto_Decline_Reason__c, __ctx1__.__GUID));
                    if (__ctx1__ != null)
                        __ctx1__.__Auto_Decline_Reason__c = null;
                    if (__ctx1__ != null)
                        __ctx1__.__Status__c = null;
                    if (__ctx1__ != null)
                        __ctx1__.__Stage__c = null;
                    if (__ctx1__ != null)
                        __ctx1__.__SObject_Name__c = null;
                    if (__ctx1__ != null)
                        __ctx1__.__Log_Message__c = null;
                    if (__ctx1__ != null)
                        __ctx1__.__SObject_ID__c = null;
                    if (__ctx1__ != null)
                        __ctx1__.__Application_Number__c = null;
                    if (__ctx1__ != null)
                        __ctx1__.__GUID = null;
                    __RestEventRequestMsg.MessagePart.LoadFrom((System.Xml.XmlDocument)__ctx1__.__TempXml.UnderlyingXmlDocument);
                    if (__ctx1__ != null)
                        __ctx1__.__TempXml = null;

                    if (__ctx1__.__RestEventRequestMsg != null)
                        __ctx1__.UnrefMessage(__ctx1__.__RestEventRequestMsg);
                    __ctx1__.__RestEventRequestMsg = __RestEventRequestMsg;
                    __ctx1__.RefMessage(__ctx1__.__RestEventRequestMsg);
                }
                __ctx1__.__RestEventRequestMsg.ConstructionCompleteEvent(false);
                if ( !PostProgressInc( __seg__, __ctx__, 10 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 10;
            case 10:
                if ( !PreProgressInc( __seg__, __ctx__, 11 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Construct);
                    __edata.Messages.Add(__ctx1__.__RestEventRequestMsg);
                    Tracker.FireEvent(__eventLocations[3],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 11;
            case 11:
                if ( !PreProgressInc( __seg__, __ctx__, 12 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[4],__eventData[3],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 12;
            case 12:
                if (!__ctx1__.PrepareToPendingCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 13 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 13;
            case 13:
                if ( !PreProgressInc( __seg__, __ctx__, 14 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                RestEventPort.SendMessage(0, __ctx1__.__RestEventRequestMsg, null, null, out __ctx0__.__subWrapper0, __ctx1__, __seg__ );
                if ((stopOn & Microsoft.XLANGs.Core.StopConditions.OutgoingRqst) != 0)
                    return Microsoft.XLANGs.Core.StopConditions.OutgoingRqst;
                goto case 14;
            case 14:
                if ( !PreProgressInc( __seg__, __ctx__, 15 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Send);
                    __edata.Messages.Add(__ctx1__.__RestEventRequestMsg);
                    __edata.PortName = @"RestEventPort";
                    Tracker.FireEvent(__eventLocations[5],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (__ctx1__ != null && __ctx1__.__RestEventRequestMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestEventRequestMsg);
                    __ctx1__.__RestEventRequestMsg = null;
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 15;
            case 15:
                if ( !PreProgressInc( __seg__, __ctx__, 16 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[6],__eventData[4],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 16;
            case 16:
                if (!RestEventPort.GetMessageId(__ctx0__.__subWrapper0.getSubscription(this), __seg__, __ctx1__, out __msgEnv__, _locations[0]))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if (__ctx0__ != null && __ctx0__.__subWrapper0 != null)
                {
                    __ctx0__.__subWrapper0.Destroy(this, __ctx0__);
                    __ctx0__.__subWrapper0 = null;
                }
                if (__ctx1__.__RestEventResponseMsg != null)
                    __ctx1__.UnrefMessage(__ctx1__.__RestEventResponseMsg);
                __ctx1__.__RestEventResponseMsg = new RestEventResponseType("RestEventResponseMsg", __ctx1__);
                __ctx1__.RefMessage(__ctx1__.__RestEventResponseMsg);
                RestEventPort.ReceiveMessage(0, __msgEnv__, __ctx1__.__RestEventResponseMsg, null, (Microsoft.XLANGs.Core.Context)_stateMgrs[1], __seg__);
                if (RestEventPort != null)
                {
                    RestEventPort.Close(__ctx1__, __seg__);
                    RestEventPort = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 17 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 17;
            case 17:
                if ( !PreProgressInc( __seg__, __ctx__, 18 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                {
                    Microsoft.XLANGs.RuntimeTypes.EventData __edata = new Microsoft.XLANGs.RuntimeTypes.EventData(Microsoft.XLANGs.RuntimeTypes.Operation.End | Microsoft.XLANGs.RuntimeTypes.Operation.Receive);
                    __edata.Messages.Add(__ctx1__.__RestEventResponseMsg);
                    __edata.PortName = @"RestEventPort";
                    Tracker.FireEvent(__eventLocations[7],__edata,_stateMgrs[1].TrackDataStream );
                }
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 18;
            case 18:
                if ( !PreProgressInc( __seg__, __ctx__, 19 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[8],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 19;
            case 19:
                __ctx1__.__RestEventMessage = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestEventResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse']/*[local-name()='errors' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse']/*[local-name()='message' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse'])", typeof(System.String));
                if ( !PostProgressInc( __seg__, __ctx__, 20 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 20;
            case 20:
                if ( !PreProgressInc( __seg__, __ctx__, 21 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[9],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 21;
            case 21:
                __ctx1__.__RestEventSFID = (System.String)Microsoft.XLANGs.Core.Part.XPathLoad(__ctx1__.__RestEventResponseMsg.MessagePart, "string(/*[local-name()='results' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse']/*[local-name()='result' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse']/*[local-name()='id' and namespace-uri()='http://SBA.gov/DLAPDocumentUpload/REST/INSERT/EventResponse'])", typeof(System.String));
                if (__ctx1__ != null && __ctx1__.__RestEventResponseMsg != null)
                {
                    __ctx1__.UnrefMessage(__ctx1__.__RestEventResponseMsg);
                    __ctx1__.__RestEventResponseMsg = null;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 22 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 22;
            case 22:
                if ( !PreProgressInc( __seg__, __ctx__, 23 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[10],__eventData[7],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 23;
            case 23:
                __condition__ = !System.String.IsNullOrWhiteSpace(__ctx1__.__RestEventMessage) && (__ctx1__.__RestEventSFID.Length == 0);
                if (__ctx1__ != null)
                    __ctx1__.__RestEventSFID = null;
                if (!__condition__)
                {
                    if ( !PostProgressInc( __seg__, __ctx__, 29 ) )
                        return Microsoft.XLANGs.Core.StopConditions.Paused;
                    goto case 29;
                }
                if ( !PostProgressInc( __seg__, __ctx__, 24 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 24;
            case 24:
                if ( !PreProgressInc( __seg__, __ctx__, 25 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[11],__eventData[5],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 25;
            case 25:
                __ctx1__.__RestEventException = new System.Exception("DLAP Document Upload Evenet Request Rest Exception  -  " + __ctx1__.__RestEventMessage);
                if ( !PostProgressInc( __seg__, __ctx__, 26 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 26;
            case 26:
                if ( !PreProgressInc( __seg__, __ctx__, 27 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[12],__eventData[6],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 27;
            case 27:
                if ( !PreProgressInc( __seg__, __ctx__, 28 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[13],__eventData[8],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 28;
            case 28:
                throw __ctx1__.__RestEventException;
            case 29:
                if ( !PreProgressInc( __seg__, __ctx__, 30 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                if (__ctx1__ != null)
                    __ctx1__.__RestEventException = null;
                if (__ctx1__ != null)
                    __ctx1__.__RestEventMessage = null;
                Tracker.FireEvent(__eventLocations[14],__eventData[9],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 30;
            case 30:
                if ( !PreProgressInc( __seg__, __ctx__, 31 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                Tracker.FireEvent(__eventLocations[0],__eventData[0],_stateMgrs[1].TrackDataStream );
                if (IsDebugged)
                    return Microsoft.XLANGs.Core.StopConditions.InBreakpoint;
                goto case 31;
            case 31:
                if (!__ctx1__.CleanupAndPrepareToCommit(__seg__))
                    return Microsoft.XLANGs.Core.StopConditions.Blocked;
                if ( !PostProgressInc( __seg__, __ctx__, 32 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                goto case 32;
            case 32:
                if ( !PreProgressInc( __seg__, __ctx__, 33 ) )
                    return Microsoft.XLANGs.Core.StopConditions.Paused;
                __ctx1__.OnCommit();
                goto case 33;
            case 33:
                __seg__.SegmentDone();
                _segments[0].PredecessorDone(this);
                break;
            }
            return Microsoft.XLANGs.Core.StopConditions.Completed;
        }
        private static Microsoft.XLANGs.Core.CachedObject[] _locations = new Microsoft.XLANGs.Core.CachedObject[] {
            new Microsoft.XLANGs.Core.CachedObject(new System.Guid("{0F464ACE-4C0F-406E-87D3-4FE18AACEF7E}"))
        };

    }

    [Microsoft.XLANGs.BaseTypes.BPELExportableAttribute(false)]
    sealed public class _MODULE_PROXY_ { }
}
